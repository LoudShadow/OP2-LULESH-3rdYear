//
// auto-generated by op2.py
//

//user function
inline void CalcSoundSpeedForElem(const double *pbvc, const double *enewc, const double *vnewc, const double *bvc, const double *pnewc, double *ss){
    double ssTmp = (pbvc[0] * enewc[0] + vnewc[0] * vnewc[0] *
                bvc[0] * pnewc[0]) / m_refdens;
    if (ssTmp <= m_ssc_thresh) {
        ssTmp = m_ssc_low;
    }
    else {
        ssTmp = sqrt(ssTmp);
    }
    ss[0] = ssTmp ;
}

// host stub function
void op_par_loop_CalcSoundSpeedForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  int nargs = 6;
  op_arg args[6];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  //create aligned pointers for dats
  ALIGNED_double const double * __restrict__ ptr0 = (double *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr3 = (double *) arg3.data;
  DECLARE_PTR_ALIGNED(ptr3,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr4 = (double *) arg4.data;
  DECLARE_PTR_ALIGNED(ptr4,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr5 = (double *) arg5.data;
  DECLARE_PTR_ALIGNED(ptr5,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(26);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  CalcSoundSpeedForElem");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        CalcSoundSpeedForElem(
          &(ptr0)[1 * (n+i)],
          &(ptr1)[1 * (n+i)],
          &(ptr2)[1 * (n+i)],
          &(ptr3)[1 * (n+i)],
          &(ptr4)[1 * (n+i)],
          &(ptr5)[1 * (n+i)]);
      }
    }
    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      CalcSoundSpeedForElem(
        &(ptr0)[1*n],
        &(ptr1)[1*n],
        &(ptr2)[1*n],
        &(ptr3)[1*n],
        &(ptr4)[1*n],
        &(ptr5)[1*n]);
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[26].name      = name;
  OP_kernels[26].count    += 1;
  OP_kernels[26].time     += wall_t2 - wall_t1;
  OP_kernels[26].transfer += (float)set->size * arg0.size;
  OP_kernels[26].transfer += (float)set->size * arg1.size;
  OP_kernels[26].transfer += (float)set->size * arg2.size;
  OP_kernels[26].transfer += (float)set->size * arg3.size;
  OP_kernels[26].transfer += (float)set->size * arg4.size;
  OP_kernels[26].transfer += (float)set->size * arg5.size * 2.0f;
}
