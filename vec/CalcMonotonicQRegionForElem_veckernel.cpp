//
// auto-generated by op2.py
//

//user function
// Stuff needed for boundary conditions
// 2 BCs on each of 6 hexahedral faces (12 bits)

#define XI_M        0x00007
#define XI_M_SYMM   0x00001
#define XI_M_FREE   0x00002
#define XI_M_COMM   0x00004

// #define XI_P        0x00038
// #define XI_P_SYMM   0x00008
// #define XI_P_FREE   0x00010
// #define XI_P_COMM   0x00020

// #define ETA_M       0x001c0
// #define ETA_M_SYMM  0x00040
// #define ETA_M_FREE  0x00080
// #define ETA_M_COMM  0x00100

// #define ETA_P       0x00e00
// #define ETA_P_SYMM  0x00200
// #define ETA_P_FREE  0x00400
// #define ETA_P_COMM  0x00800

// #define ZETA_M      0x07000
// #define ZETA_M_SYMM 0x01000
// #define ZETA_M_FREE 0x02000
// #define ZETA_M_COMM 0x04000

// #define ZETA_P      0x38000
// #define ZETA_P_SYMM 0x08000
// #define ZETA_P_FREE 0x10000
// #define ZETA_P_COMM 0x20000

inline void CalcMonotonicQRegionForElem(
    const double *delv_xi, const double *delv_xi_lxim, const double *delv_xi_lxip,
    const double *delv_eta, const double *delv_eta_letam, const double *delv_eta_letap,
    const double *delv_zeta, const double *delv_zeta_lzetam, const double *delv_zeta_lzetap,
    const double *delx_xi, const double *delx_eta, const double *delx_zeta,
    const int *elemBC,
    const double *m_vdov,
    double *qq, double *ql,
    const double *elemMass, const double *volo, const double *vnew
){
    double qlin, qquad ;
    double phixi, phieta, phizeta ;
    double delvm = 0.0, delvp =0.0;
    int bcMask = elemBC[0] ;

    double norm = double(1.) / (delv_xi[0]+ m_ptiny ) ;

    switch (bcMask & XI_M) { //XI_M
    case 0x00004: /* needs comm data */ //XI_M_COMM
    case 0:         delvm = delv_xi_lxim[0]; break ;
    case 0x00001: delvm = delv_xi[0] ;       break ; //XI_M_SYMM
    case 0x00002: delvm = double(0.0) ;      break ; //XI_M_FREE
    default:          //fprintf(stderr, "Error in switch at %s line %d\n",__FILE__, __LINE__);
        delvm = 0; /* ERROR - but quiets the compiler */
        break;
    }
    switch (bcMask & 0x00038) { //XI_P
    case 0x00020: /* needs comm data */ //XI_P_COMM
    case 0:         delvp = delv_xi_lxip[0] ; break ;
    case 0x00008: delvp = delv_xi[0] ;       break ; //XI_P_FREE
    case 0x00010: delvp = double(0.0) ;      break ; //XI_P_FREE
    default:          //fprintf(stderr, "Error in switch at %s line %d\n",__FILE__, __LINE__);
        delvp = 0; /* ERROR - but quiets the compiler */
        break;
    }

    delvm = delvm * norm ;
    delvp = delvp * norm ;

    phixi = double(.5) * ( delvm + delvp ) ;

    delvm *= m_monoq_limiter_mult ;
    delvp *= m_monoq_limiter_mult ;

    if ( delvm < phixi ) phixi = delvm ;
    if ( delvp < phixi ) phixi = delvp ;
    if ( phixi < double(0.)) phixi = double(0.) ;
    if ( phixi > m_monoq_max_slope) phixi = m_monoq_max_slope;

    /*  phieta     */
    norm = double(1.) / ( delv_eta[0] + m_ptiny ) ;

    switch (bcMask & 0x001c0) { //ETA_M
        case 0x00100: /* needs comm data */ // ETA_M_COMM
        case 0:          delvm = delv_eta_letam[0] ; break ; 
        case 0x00040: delvm = delv_eta[0] ;        break ; // ETA_M_SYMM
        case 0x00080: delvm = double(0.0) ;        break ; // ETA_M_FREE
        default:          //fprintf(stderr, "Error in switch at %s line %d\n",__FILE__, __LINE__);
        delvm = 0; /* ERROR - but quiets the compiler */
        break;
    }
    switch (bcMask & 0x00e00) { //ETA_P
        case 0x00800: /* needs comm data */  //ETA_P_COMM
        case 0:          delvp = delv_eta_letap[0] ; break ; 
        case 0x00200: delvp = delv_eta[0] ;        break ; // ETA_P_SYMM
        case 0x00400: delvp = double(0.0) ;        break ; // ETA_P_FREE
        default:          //fprintf(stderr, "Error in switch at %s line %d\n",__FILE__, __LINE__);
        delvp = 0; /* ERROR - but quiets the compiler */
        break;
    }

    delvm = delvm * norm ;
    delvp = delvp * norm ;

    phieta = double(.5) * ( delvm + delvp ) ;

    delvm *= m_monoq_limiter_mult ;
    delvp *= m_monoq_limiter_mult ;

    if ( delvm  < phieta ) phieta = delvm ;
    if ( delvp  < phieta ) phieta = delvp ;
    if ( phieta < double(0.)) phieta = double(0.) ;
    if ( phieta > m_monoq_max_slope)  phieta = m_monoq_max_slope;

    /*  phizeta     */
    // norm = double(1.) / ( domain.delv_zeta(ielem) + ptiny ) ;
    norm = double(1.) / ( delv_zeta[0] + m_ptiny ) ;

    switch (bcMask & 0x07000) { //ZETA_M
        case 0x04000: /* needs comm data */ // ZETA_M_COMM
        case 0:           delvm = delv_zeta_lzetam[0] ; break ;
        case 0x01000: delvm = delv_zeta[0] ;         break ; // ZETA_M_SYMM
        case 0x02000: delvm = double(0.0) ;          break ; // ZETA_M_FREE
        default:          //fprintf(stderr, "Error in switch at %s line %d\n",__FILE__, __LINE__);
        delvm = 0; /* ERROR - but quiets the compiler */
        break;
    }
    switch (bcMask & 0x38000) { //ZETA_P
        case 0x20000: /* needs comm data */ // ZETA_P_COMM
        case 0:           delvp = delv_zeta_lzetap[0] ; break ;
        case 0x08000: delvp = delv_zeta[0] ;         break ; // ZETA_P_SYMM
        case 0x10000: delvp = double(0.0) ;          break ; // ZETA_P_FREE
        default:          //fprintf(stderr, "Error in switch at %s line %d\n",__FILE__, __LINE__);
        delvp = 0; /* ERROR - but quiets the compiler */
        break;
    }

    delvm = delvm * norm ;
    delvp = delvp * norm ;

    phizeta = double(.5) * ( delvm + delvp ) ;

    delvm *= m_monoq_limiter_mult ;
    delvp *= m_monoq_limiter_mult ;

    if ( delvm   < phizeta ) phizeta = delvm ;
    if ( delvp   < phizeta ) phizeta = delvp ;
    if ( phizeta < double(0.)) phizeta = double(0.);
    if ( phizeta > m_monoq_max_slope  ) phizeta = m_monoq_max_slope;

    /* Remove length scale */
    if ( m_vdov[0] > double(0.) )  {
        qlin  = double(0.) ;
        qquad = double(0.) ;
    }
    else {
        double delvxxi   = delv_xi[0]   * delx_xi[0]   ;
        double delvxeta  = delv_eta[0]  * delx_eta[0]  ;
        double delvxzeta = delv_zeta[0] * delx_zeta[0] ;

        if ( delvxxi   > double(0.) ) delvxxi   = double(0.) ;
        if ( delvxeta  > double(0.) ) delvxeta  = double(0.) ;
        if ( delvxzeta > double(0.) ) delvxzeta = double(0.) ;

        double rho = elemMass[0] / (volo[0] * vnew[0]) ;

        qlin = -m_qlc_monoq * rho *
        (  delvxxi   * (double(1.) - phixi) +
            delvxeta  * (double(1.) - phieta) +
            delvxzeta * (double(1.) - phizeta)  ) ;

        qquad = m_qqc_monoq * rho *
        (  delvxxi*delvxxi     * (double(1.) - phixi*phixi) +
            delvxeta*delvxeta   * (double(1.) - phieta*phieta) +
            delvxzeta*delvxzeta * (double(1.) - phizeta*phizeta)  ) ;
    }

    qq[0] = qquad ;
    ql[0] = qlin  ;

}
#ifdef VECTORIZE
//user function -- modified for vectorisation
#if defined __clang__ || defined __GNUC__
__attribute__((always_inline))
#endif
inline void CalcMonotonicQRegionForElem_vec( const double delv_xi[][SIMD_VEC], const double delv_xi_lxim[][SIMD_VEC], const double delv_xi_lxip[][SIMD_VEC], const double delv_eta[][SIMD_VEC], const double delv_eta_letam[][SIMD_VEC], const double delv_eta_letap[][SIMD_VEC], const double delv_zeta[][SIMD_VEC], const double delv_zeta_lzetam[][SIMD_VEC], const double delv_zeta_lzetap[][SIMD_VEC], const double delx_xi[][SIMD_VEC], const double delx_eta[][SIMD_VEC], const double delx_zeta[][SIMD_VEC], const int elemBC[][SIMD_VEC], const double m_vdov[][SIMD_VEC], double qq[][SIMD_VEC], double ql[][SIMD_VEC], const double elemMass[][SIMD_VEC], const double volo[][SIMD_VEC], const double vnew[][SIMD_VEC], int idx ) {
    double qlin, qquad ;
    double phixi, phieta, phizeta ;
    double delvm = 0.0, delvp =0.0;
    int bcMask = elemBC[0][idx] ;

    double norm = double(1.) / (delv_xi[0][idx]+ m_ptiny ) ;

    switch (bcMask & XI_M) {
    case 0x00004:
    case 0:         delvm = delv_xi_lxim[0][idx]; break ;
    case 0x00001: delvm = delv_xi[0][idx] ;       break ;
    case 0x00002: delvm = double(0.0) ;      break ;
    default:
        delvm = 0;
        break;
    }
    switch (bcMask & 0x00038) {
    case 0x00020:
    case 0:         delvp = delv_xi_lxip[0][idx] ; break ;
    case 0x00008: delvp = delv_xi[0][idx] ;       break ;
    case 0x00010: delvp = double(0.0) ;      break ;
    default:
        delvp = 0;
        break;
    }

    delvm = delvm * norm ;
    delvp = delvp * norm ;

    phixi = double(.5) * ( delvm + delvp ) ;

    delvm *= m_monoq_limiter_mult ;
    delvp *= m_monoq_limiter_mult ;

    if ( delvm < phixi ) phixi = delvm ;
    if ( delvp < phixi ) phixi = delvp ;
    if ( phixi < double(0.)) phixi = double(0.) ;
    if ( phixi > m_monoq_max_slope) phixi = m_monoq_max_slope;

    norm = double(1.) / ( delv_eta[0][idx] + m_ptiny ) ;

    switch (bcMask & 0x001c0) {
        case 0x00100:
        case 0:          delvm = delv_eta_letam[0][idx] ; break ;
        case 0x00040: delvm = delv_eta[0][idx] ;        break ;
        case 0x00080: delvm = double(0.0) ;        break ;
        default:
        delvm = 0;
        break;
    }
    switch (bcMask & 0x00e00) {
        case 0x00800:
        case 0:          delvp = delv_eta_letap[0][idx] ; break ;
        case 0x00200: delvp = delv_eta[0][idx] ;        break ;
        case 0x00400: delvp = double(0.0) ;        break ;
        default:
        delvp = 0;
        break;
    }

    delvm = delvm * norm ;
    delvp = delvp * norm ;

    phieta = double(.5) * ( delvm + delvp ) ;

    delvm *= m_monoq_limiter_mult ;
    delvp *= m_monoq_limiter_mult ;

    if ( delvm  < phieta ) phieta = delvm ;
    if ( delvp  < phieta ) phieta = delvp ;
    if ( phieta < double(0.)) phieta = double(0.) ;
    if ( phieta > m_monoq_max_slope)  phieta = m_monoq_max_slope;


    norm = double(1.) / ( delv_zeta[0][idx] + m_ptiny ) ;

    switch (bcMask & 0x07000) {
        case 0x04000:
        case 0:           delvm = delv_zeta_lzetam[0][idx] ; break ;
        case 0x01000: delvm = delv_zeta[0][idx] ;         break ;
        case 0x02000: delvm = double(0.0) ;          break ;
        default:
        delvm = 0;
        break;
    }
    switch (bcMask & 0x38000) {
        case 0x20000:
        case 0:           delvp = delv_zeta_lzetap[0][idx] ; break ;
        case 0x08000: delvp = delv_zeta[0][idx] ;         break ;
        case 0x10000: delvp = double(0.0) ;          break ;
        default:
        delvp = 0;
        break;
    }

    delvm = delvm * norm ;
    delvp = delvp * norm ;

    phizeta = double(.5) * ( delvm + delvp ) ;

    delvm *= m_monoq_limiter_mult ;
    delvp *= m_monoq_limiter_mult ;

    if ( delvm   < phizeta ) phizeta = delvm ;
    if ( delvp   < phizeta ) phizeta = delvp ;
    if ( phizeta < double(0.)) phizeta = double(0.);
    if ( phizeta > m_monoq_max_slope  ) phizeta = m_monoq_max_slope;

    if ( m_vdov[0][idx] > double(0.) )  {
        qlin  = double(0.) ;
        qquad = double(0.) ;
    }
    else {
        double delvxxi   = delv_xi[0][idx]   * delx_xi[0][idx]   ;
        double delvxeta  = delv_eta[0][idx]  * delx_eta[0][idx]  ;
        double delvxzeta = delv_zeta[0][idx] * delx_zeta[0][idx] ;

        if ( delvxxi   > double(0.) ) delvxxi   = double(0.) ;
        if ( delvxeta  > double(0.) ) delvxeta  = double(0.) ;
        if ( delvxzeta > double(0.) ) delvxzeta = double(0.) ;

        double rho = elemMass[0][idx] / (volo[0][idx] * vnew[0][idx]) ;

        qlin = -m_qlc_monoq * rho *
        (  delvxxi   * (double(1.) - phixi) +
            delvxeta  * (double(1.) - phieta) +
            delvxzeta * (double(1.) - phizeta)  ) ;

        qquad = m_qqc_monoq * rho *
        (  delvxxi*delvxxi     * (double(1.) - phixi*phixi) +
            delvxeta*delvxeta   * (double(1.) - phieta*phieta) +
            delvxzeta*delvxzeta * (double(1.) - phizeta*phizeta)  ) ;
    }

    qq[0][idx] = qquad ;
    ql[0][idx] = qlin  ;


}
#endif

// host stub function
void op_par_loop_CalcMonotonicQRegionForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18){

  int nargs = 19;
  op_arg args[19];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  //create aligned pointers for dats
  ALIGNED_double const double * __restrict__ ptr0 = (double *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr3 = (double *) arg3.data;
  DECLARE_PTR_ALIGNED(ptr3,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr4 = (double *) arg4.data;
  DECLARE_PTR_ALIGNED(ptr4,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr5 = (double *) arg5.data;
  DECLARE_PTR_ALIGNED(ptr5,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr6 = (double *) arg6.data;
  DECLARE_PTR_ALIGNED(ptr6,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr7 = (double *) arg7.data;
  DECLARE_PTR_ALIGNED(ptr7,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr8 = (double *) arg8.data;
  DECLARE_PTR_ALIGNED(ptr8,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr9 = (double *) arg9.data;
  DECLARE_PTR_ALIGNED(ptr9,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr10 = (double *) arg10.data;
  DECLARE_PTR_ALIGNED(ptr10,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr11 = (double *) arg11.data;
  DECLARE_PTR_ALIGNED(ptr11,double_ALIGN);
  ALIGNED_int const int * __restrict__ ptr12 = (int *) arg12.data;
  DECLARE_PTR_ALIGNED(ptr12,int_ALIGN);
  ALIGNED_double const double * __restrict__ ptr13 = (double *) arg13.data;
  DECLARE_PTR_ALIGNED(ptr13,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr14 = (double *) arg14.data;
  DECLARE_PTR_ALIGNED(ptr14,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr15 = (double *) arg15.data;
  DECLARE_PTR_ALIGNED(ptr15,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr16 = (double *) arg16.data;
  DECLARE_PTR_ALIGNED(ptr16,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr17 = (double *) arg17.data;
  DECLARE_PTR_ALIGNED(ptr17,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr18 = (double *) arg18.data;
  DECLARE_PTR_ALIGNED(ptr18,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(15);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: CalcMonotonicQRegionForElem\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      if (n<set->core_size && n>0 && n % OP_mpi_test_frequency == 0)
        op_mpi_test_all(nargs,args);
      if ((n+SIMD_VEC >= set->core_size) && (n+SIMD_VEC-set->core_size < SIMD_VEC)) {
        op_mpi_wait_all(nargs, args);
      }
      ALIGNED_double double dat0[1][SIMD_VEC];
      ALIGNED_double double dat1[1][SIMD_VEC];
      ALIGNED_double double dat2[1][SIMD_VEC];
      ALIGNED_double double dat3[1][SIMD_VEC];
      ALIGNED_double double dat4[1][SIMD_VEC];
      ALIGNED_double double dat5[1][SIMD_VEC];
      ALIGNED_double double dat6[1][SIMD_VEC];
      ALIGNED_double double dat7[1][SIMD_VEC];
      ALIGNED_double double dat8[1][SIMD_VEC];
      ALIGNED_double double dat9[1][SIMD_VEC];
      ALIGNED_double double dat10[1][SIMD_VEC];
      ALIGNED_double double dat11[1][SIMD_VEC];
      ALIGNED_int int dat12[1][SIMD_VEC];
      ALIGNED_double double dat13[1][SIMD_VEC];
      ALIGNED_double double dat14[1][SIMD_VEC];
      ALIGNED_double double dat15[1][SIMD_VEC];
      ALIGNED_double double dat16[1][SIMD_VEC];
      ALIGNED_double double dat17[1][SIMD_VEC];
      ALIGNED_double double dat18[1][SIMD_VEC];
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx0_1 = 1 * (n+i);
        int idx1_1 = 1 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx2_1 = 1 * arg2.map_data[(n+i) * arg2.map->dim + 0];
        int idx3_1 = 1 * (n+i);
        int idx4_1 = 1 * arg4.map_data[(n+i) * arg4.map->dim + 0];
        int idx5_1 = 1 * arg5.map_data[(n+i) * arg5.map->dim + 0];
        int idx6_1 = 1 * (n+i);
        int idx7_1 = 1 * arg7.map_data[(n+i) * arg7.map->dim + 0];
        int idx8_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 0];
        int idx9_1 = 1 * (n+i);
        int idx10_1 = 1 * (n+i);
        int idx11_1 = 1 * (n+i);
        int idx12_1 = 1 * (n+i);
        int idx13_1 = 1 * (n+i);
        int idx14_1 = 1 * (n+i);
        int idx15_1 = 1 * (n+i);
        int idx16_1 = 1 * (n+i);
        int idx17_1 = 1 * (n+i);
        int idx18_1 = 1 * (n+i);

        dat0[0][i] = (ptr0)[idx0_1 + 0];
        dat1[0][i] = (ptr1)[idx1_1 + 0];
        dat2[0][i] = (ptr2)[idx2_1 + 0];
        dat3[0][i] = (ptr3)[idx3_1 + 0];
        dat4[0][i] = (ptr4)[idx4_1 + 0];
        dat5[0][i] = (ptr5)[idx5_1 + 0];
        dat6[0][i] = (ptr6)[idx6_1 + 0];
        dat7[0][i] = (ptr7)[idx7_1 + 0];
        dat8[0][i] = (ptr8)[idx8_1 + 0];
        dat9[0][i] = (ptr9)[idx9_1 + 0];
        dat10[0][i] = (ptr10)[idx10_1 + 0];
        dat11[0][i] = (ptr11)[idx11_1 + 0];
        dat12[0][i] = (ptr12)[idx12_1 + 0];
        dat13[0][i] = (ptr13)[idx13_1 + 0];
        dat16[0][i] = (ptr16)[idx16_1 + 0];
        dat17[0][i] = (ptr17)[idx17_1 + 0];
        dat18[0][i] = (ptr18)[idx18_1 + 0];
      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        CalcMonotonicQRegionForElem_vec(
          dat0,
          dat1,
          dat2,
          dat3,
          dat4,
          dat5,
          dat6,
          dat7,
          dat8,
          dat9,
          dat10,
          dat11,
          dat12,
          dat13,
          dat14,
          dat15,
          dat16,
          dat17,
          dat18,
          i);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx14_1 = 1 * (n+i);
        int idx15_1 = 1 * (n+i);

        (ptr14)[idx14_1 + 0] = dat14[0][i];

        (ptr15)[idx15_1 + 0] = dat15[0][i];

      }
    }

    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map1idx;
      int map2idx;
      int map4idx;
      int map5idx;
      int map7idx;
      int map8idx;
      map1idx = arg1.map_data[n * arg1.map->dim + 0];
      map2idx = arg2.map_data[n * arg2.map->dim + 0];
      map4idx = arg4.map_data[n * arg4.map->dim + 0];
      map5idx = arg5.map_data[n * arg5.map->dim + 0];
      map7idx = arg7.map_data[n * arg7.map->dim + 0];
      map8idx = arg8.map_data[n * arg8.map->dim + 0];

      CalcMonotonicQRegionForElem(
        &(ptr0)[1 * n],
        &(ptr1)[1 * map1idx],
        &(ptr2)[1 * map2idx],
        &(ptr3)[1 * n],
        &(ptr4)[1 * map4idx],
        &(ptr5)[1 * map5idx],
        &(ptr6)[1 * n],
        &(ptr7)[1 * map7idx],
        &(ptr8)[1 * map8idx],
        &(ptr9)[1 * n],
        &(ptr10)[1 * n],
        &(ptr11)[1 * n],
        &(ptr12)[1 * n],
        &(ptr13)[1 * n],
        &(ptr14)[1 * n],
        &(ptr15)[1 * n],
        &(ptr16)[1 * n],
        &(ptr17)[1 * n],
        &(ptr18)[1 * n]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[15].name      = name;
  OP_kernels[15].count    += 1;
  OP_kernels[15].time     += wall_t2 - wall_t1;
  OP_kernels[15].transfer += (float)set->size * arg1.size;
  OP_kernels[15].transfer += (float)set->size * arg4.size;
  OP_kernels[15].transfer += (float)set->size * arg7.size;
  OP_kernels[15].transfer += (float)set->size * arg9.size;
  OP_kernels[15].transfer += (float)set->size * arg10.size;
  OP_kernels[15].transfer += (float)set->size * arg11.size;
  OP_kernels[15].transfer += (float)set->size * arg12.size;
  OP_kernels[15].transfer += (float)set->size * arg13.size;
  OP_kernels[15].transfer += (float)set->size * arg14.size;
  OP_kernels[15].transfer += (float)set->size * arg15.size;
  OP_kernels[15].transfer += (float)set->size * arg16.size;
  OP_kernels[15].transfer += (float)set->size * arg17.size;
  OP_kernels[15].transfer += (float)set->size * arg18.size;
  OP_kernels[15].transfer += (float)set->size * arg1.map->dim * 4.0f;
  OP_kernels[15].transfer += (float)set->size * arg2.map->dim * 4.0f;
  OP_kernels[15].transfer += (float)set->size * arg4.map->dim * 4.0f;
  OP_kernels[15].transfer += (float)set->size * arg5.map->dim * 4.0f;
  OP_kernels[15].transfer += (float)set->size * arg7.map->dim * 4.0f;
  OP_kernels[15].transfer += (float)set->size * arg8.map->dim * 4.0f;
}
