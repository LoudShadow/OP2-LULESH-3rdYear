//
// auto-generated by op2.py
//

//user function
// static inline
// double CalcElemVolumeSingleArg( const double x0, const double x1,
//                const double x2, const double x3,
//                const double x4, const double x5,
//                const double x6, const double x7,
//                const double y0, const double y1,
//                const double y2, const double y3,
//                const double y4, const double y5,
//                const double y6, const double y7,
//                const double z0, const double z1,
//                const double z2, const double z3,
//                const double z4, const double z5,
//                const double z6, const double z7 )
// {
//   double twelveth = double(1.0)/double(12.0);

//   double dx61 = x6 - x1;
//   double dy61 = y6 - y1;
//   double dz61 = z6 - z1;

//   double dx70 = x7 - x0;
//   double dy70 = y7 - y0;
//   double dz70 = z7 - z0;

//   double dx63 = x6 - x3;
//   double dy63 = y6 - y3;
//   double dz63 = z6 - z3;

//   double dx20 = x2 - x0;
//   double dy20 = y2 - y0;
//   double dz20 = z2 - z0;

//   double dx50 = x5 - x0;
//   double dy50 = y5 - y0;
//   double dz50 = z5 - z0;

//   double dx64 = x6 - x4;
//   double dy64 = y6 - y4;
//   double dz64 = z6 - z4;

//   double dx31 = x3 - x1;
//   double dy31 = y3 - y1;
//   double dz31 = z3 - z1;

//   double dx72 = x7 - x2;
//   double dy72 = y7 - y2;
//   double dz72 = z7 - z2;

//   double dx43 = x4 - x3;
//   double dy43 = y4 - y3;
//   double dz43 = z4 - z3;

//   double dx57 = x5 - x7;
//   double dy57 = y5 - y7;
//   double dz57 = z5 - z7;

//   double dx14 = x1 - x4;
//   double dy14 = y1 - y4;
//   double dz14 = z1 - z4;

//   double dx25 = x2 - x5;
//   double dy25 = y2 - y5;
//   double dz25 = z2 - z5;

// #define TRIPLE_PRODUCT(x1, y1, z1, x2, y2, z2, x3, y3, z3) \
//    ((x1)*((y2)*(z3) - (z2)*(y3)) + (x2)*((z1)*(y3) - (y1)*(z3)) + (x3)*((y1)*(z2) - (z1)*(y2)))

//   double volume =
//     TRIPLE_PRODUCT(dx31 + dx72, dx63, dx20,
//        dy31 + dy72, dy63, dy20,
//        dz31 + dz72, dz63, dz20) +
//     TRIPLE_PRODUCT(dx43 + dx57, dx64, dx70,
//        dy43 + dy57, dy64, dy70,
//        dz43 + dz57, dz64, dz70) +
//     TRIPLE_PRODUCT(dx14 + dx25, dx61, dx50,
//        dy14 + dy25, dy61, dy50,
//        dz14 + dz25, dz61, dz50);

// #undef TRIPLE_PRODUCT

//   volume *= twelveth;

//   return volume ;
// }

// double CalcElemVolumes( const double x[8], const double y[8], const double z[8] ){
// return CalcElemVolumeSingleArg( x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],
//                        y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7],
//                        z[0], z[1], z[2], z[3], z[4], z[5], z[6], z[7]);
// }
// #include "const.h"

// static inline //OP_FUN_PREFIX
// double AreaFacet( const double x0, const double x1,
//                  const double x2, const double x3,
//                  const double y0, const double y1,
//                  const double y2, const double y3,
//                  const double z0, const double z1,
//                  const double z2, const double z3)
// {
//    double fx = (x2 - x0) - (x3 - x1);
//    double fy = (y2 - y0) - (y3 - y1);
//    double fz = (z2 - z0) - (z3 - z1);
//    double gx = (x2 - x0) + (x3 - x1);
//    double gy = (y2 - y0) + (y3 - y1);
//    double gz = (z2 - z0) + (z3 - z1);
//    double area =
//       (fx * fx + fy * fy + fz * fz) *
//       (gx * gx + gy * gy + gz * gz) -
//       (fx * gx + fy * gy + fz * gz) *
//       (fx * gx + fy * gy + fz * gz);
//    return area ;
// }

// static inline
// double CalcElemCharacteristicLengtht( const double x[8],
//                                      const double y[8],
//                                      const double z[8],
//                                      const double volume)
// {
//    double a, charLength = double(0.0);

//    a = AreaFacet(x[0],x[1],x[2],x[3],
//                 y[0],y[1],y[2],y[3],
//                 z[0],z[1],z[2],z[3]) ;
//    charLength = std::fmax(a,charLength) ;

//    a = AreaFacet(x[4],x[5],x[6],x[7],
//                 y[4],y[5],y[6],y[7],
//                 z[4],z[5],z[6],z[7]) ;
//    charLength = std::fmax(a,charLength) ;

//    a = AreaFacet(x[0],x[1],x[5],x[4],
//                 y[0],y[1],y[5],y[4],
//                 z[0],z[1],z[5],z[4]) ;
//    charLength = std::fmax(a,charLength) ;

//    a = AreaFacet(x[1],x[2],x[6],x[5],
//                 y[1],y[2],y[6],y[5],
//                 z[1],z[2],z[6],z[5]) ;
//    charLength = std::fmax(a,charLength) ;

//    a = AreaFacet(x[2],x[3],x[7],x[6],
//                 y[2],y[3],y[7],y[6],
//                 z[2],z[3],z[7],z[6]) ;
//    charLength = std::fmax(a,charLength) ;

//    a = AreaFacet(x[3],x[0],x[4],x[7],
//                 y[3],y[0],y[4],y[7],
//                 z[3],z[0],z[4],z[7]) ;
//    charLength = std::fmax(a,charLength) ;

//    charLength = double(4.0) * volume / sqrt(charLength);

//    return charLength;
// }

// static inline
// void CalcElemShapeFunctionDerivativest( double const x[],
//                                        double const y[],
//                                        double const z[],
//                                        double b[][8],
//                                        double* const volume )
// {
//   const double x0 = x[0] ;   const double x1 = x[1] ;
//   const double x2 = x[2] ;   const double x3 = x[3] ;
//   const double x4 = x[4] ;   const double x5 = x[5] ;
//   const double x6 = x[6] ;   const double x7 = x[7] ;

//   const double y0 = y[0] ;   const double y1 = y[1] ;
//   const double y2 = y[2] ;   const double y3 = y[3] ;
//   const double y4 = y[4] ;   const double y5 = y[5] ;
//   const double y6 = y[6] ;   const double y7 = y[7] ;

//   const double z0 = z[0] ;   const double z1 = z[1] ;
//   const double z2 = z[2] ;   const double z3 = z[3] ;
//   const double z4 = z[4] ;   const double z5 = z[5] ;
//   const double z6 = z[6] ;   const double z7 = z[7] ;

//   double fjxxi, fjxet, fjxze;
//   double fjyxi, fjyet, fjyze;
//   double fjzxi, fjzet, fjzze;
//   double cjxxi, cjxet, cjxze;
//   double cjyxi, cjyet, cjyze;
//   double cjzxi, cjzet, cjzze;

//   fjxxi = double(.125) * ( (x6-x0) + (x5-x3) - (x7-x1) - (x4-x2) );
//   fjxet = double(.125) * ( (x6-x0) - (x5-x3) + (x7-x1) - (x4-x2) );
//   fjxze = double(.125) * ( (x6-x0) + (x5-x3) + (x7-x1) + (x4-x2) );

//   fjyxi = double(.125) * ( (y6-y0) + (y5-y3) - (y7-y1) - (y4-y2) );
//   fjyet = double(.125) * ( (y6-y0) - (y5-y3) + (y7-y1) - (y4-y2) );
//   fjyze = double(.125) * ( (y6-y0) + (y5-y3) + (y7-y1) + (y4-y2) );

//   fjzxi = double(.125) * ( (z6-z0) + (z5-z3) - (z7-z1) - (z4-z2) );
//   fjzet = double(.125) * ( (z6-z0) - (z5-z3) + (z7-z1) - (z4-z2) );
//   fjzze = double(.125) * ( (z6-z0) + (z5-z3) + (z7-z1) + (z4-z2) );

//   /* compute cofactors */
//   cjxxi =    (fjyet * fjzze) - (fjzet * fjyze);
//   cjxet =  - (fjyxi * fjzze) + (fjzxi * fjyze);
//   cjxze =    (fjyxi * fjzet) - (fjzxi * fjyet);

//   cjyxi =  - (fjxet * fjzze) + (fjzet * fjxze);
//   cjyet =    (fjxxi * fjzze) - (fjzxi * fjxze);
//   cjyze =  - (fjxxi * fjzet) + (fjzxi * fjxet);

//   cjzxi =    (fjxet * fjyze) - (fjyet * fjxze);
//   cjzet =  - (fjxxi * fjyze) + (fjyxi * fjxze);
//   cjzze =    (fjxxi * fjyet) - (fjyxi * fjxet);

//   /* calculate partials :
//      this need only be done for l = 0,1,2,3   since , by symmetry ,
//      (6,7,4,5) = - (0,1,2,3) .
//   */
//   b[0][0] =   -  cjxxi  -  cjxet  -  cjxze;
//   b[0][1] =      cjxxi  -  cjxet  -  cjxze;
//   b[0][2] =      cjxxi  +  cjxet  -  cjxze;
//   b[0][3] =   -  cjxxi  +  cjxet  -  cjxze;
//   b[0][4] = -b[0][2];
//   b[0][5] = -b[0][3];
//   b[0][6] = -b[0][0];
//   b[0][7] = -b[0][1];

//   b[1][0] =   -  cjyxi  -  cjyet  -  cjyze;
//   b[1][1] =      cjyxi  -  cjyet  -  cjyze;
//   b[1][2] =      cjyxi  +  cjyet  -  cjyze;
//   b[1][3] =   -  cjyxi  +  cjyet  -  cjyze;
//   b[1][4] = -b[1][2];
//   b[1][5] = -b[1][3];
//   b[1][6] = -b[1][0];
//   b[1][7] = -b[1][1];

//   b[2][0] =   -  cjzxi  -  cjzet  -  cjzze;
//   b[2][1] =      cjzxi  -  cjzet  -  cjzze;
//   b[2][2] =      cjzxi  +  cjzet  -  cjzze;
//   b[2][3] =   -  cjzxi  +  cjzet  -  cjzze;
//   b[2][4] = -b[2][2];
//   b[2][5] = -b[2][3];
//   b[2][6] = -b[2][0];
//   b[2][7] = -b[2][1];

//   /* calculate jacobian determinant (volume) */
//   *volume = double(8.) * ( fjxet * cjxet + fjyet * cjyet + fjzet * cjzet);
// }

// static inline 
// void CalcElemVelocityGradientt( const double* const xvel,
//                                 const double* const yvel,
//                                 const double* const zvel,
//                                 const double b[][8],
//                                 const double detJ,
//                                 double* const d )
// {
//   const double inv_detJ = double(1.0) / detJ ;
//   double dyddx, dxddy, dzddx, dxddz, dzddy, dyddz;
//   const double* const pfx = b[0];
//   const double* const pfy = b[1];
//   const double* const pfz = b[2];

//   d[0] = inv_detJ * ( pfx[0] * (xvel[0]-xvel[6])
//                      + pfx[1] * (xvel[1]-xvel[7])
//                      + pfx[2] * (xvel[2]-xvel[4])
//                      + pfx[3] * (xvel[3]-xvel[5]) );

//   d[1] = inv_detJ * ( pfy[0] * (yvel[0]-yvel[6])
//                      + pfy[1] * (yvel[1]-yvel[7])
//                      + pfy[2] * (yvel[2]-yvel[4])
//                      + pfy[3] * (yvel[3]-yvel[5]) );

//   d[2] = inv_detJ * ( pfz[0] * (zvel[0]-zvel[6])
//                      + pfz[1] * (zvel[1]-zvel[7])
//                      + pfz[2] * (zvel[2]-zvel[4])
//                      + pfz[3] * (zvel[3]-zvel[5]) );

//   dyddx  = inv_detJ * ( pfx[0] * (yvel[0]-yvel[6])
//                       + pfx[1] * (yvel[1]-yvel[7])
//                       + pfx[2] * (yvel[2]-yvel[4])
//                       + pfx[3] * (yvel[3]-yvel[5]) );

//   dxddy  = inv_detJ * ( pfy[0] * (xvel[0]-xvel[6])
//                       + pfy[1] * (xvel[1]-xvel[7])
//                       + pfy[2] * (xvel[2]-xvel[4])
//                       + pfy[3] * (xvel[3]-xvel[5]) );

//   dzddx  = inv_detJ * ( pfx[0] * (zvel[0]-zvel[6])
//                       + pfx[1] * (zvel[1]-zvel[7])
//                       + pfx[2] * (zvel[2]-zvel[4])
//                       + pfx[3] * (zvel[3]-zvel[5]) );

//   dxddz  = inv_detJ * ( pfz[0] * (xvel[0]-xvel[6])
//                       + pfz[1] * (xvel[1]-xvel[7])
//                       + pfz[2] * (xvel[2]-xvel[4])
//                       + pfz[3] * (xvel[3]-xvel[5]) );

//   dzddy  = inv_detJ * ( pfy[0] * (zvel[0]-zvel[6])
//                       + pfy[1] * (zvel[1]-zvel[7])
//                       + pfy[2] * (zvel[2]-zvel[4])
//                       + pfy[3] * (zvel[3]-zvel[5]) );

//   dyddz  = inv_detJ * ( pfz[0] * (yvel[0]-yvel[6])
//                       + pfz[1] * (yvel[1]-yvel[7])
//                       + pfz[2] * (yvel[2]-yvel[4])
//                       + pfz[3] * (yvel[3]-yvel[5]) );
//   d[5]  = double( .5) * ( dxddy + dyddx );
//   d[4]  = double( .5) * ( dxddz + dzddx );
//   d[3]  = double( .5) * ( dzddy + dyddz );
// }

inline void CalcKinematicsForElem(
                                const double *p_x0, const double *p_x1, const double *p_x2, const double *p_x3, const double *p_x4, const double *p_x5, const double *p_x6, const double *p_x7,
                                const double *p_y0, const double *p_y1, const double *p_y2, const double *p_y3, const double *p_y4, const double *p_y5, const double *p_y6, const double *p_y7,
                                const double *p_z0, const double *p_z1, const double *p_z2, const double *p_z3, const double *p_z4, const double *p_z5, const double *p_z6, const double *p_z7,
                                const double *p_xd0, const double *p_xd1, const double *p_xd2, const double *p_xd3, const double *p_xd4, const double *p_xd5, const double *p_xd6, const double *p_xd7,
                                const double *p_yd0, const double *p_yd1, const double *p_yd2, const double *p_yd3, const double *p_yd4, const double *p_yd5, const double *p_yd6, const double *p_yd7,
                                const double *p_zd0, const double *p_zd1, const double *p_zd2, const double *p_zd3, const double *p_zd4, const double *p_zd5, const double *p_zd6, const double *p_zd7,
                                double *dxx, double *dyy, double *dzz,
                                double *vnew,
                                const double *volo,
                                double *delv,
                                const double *v,
                                double *arealg,
                                const double *deltaTime

){
   
   double B[3][8] ; /** shape function derivatives */
   double D[6] ;
   double x_local[8] ;
   double y_local[8] ;
   double z_local[8] ;
   double detJ = double(0.0) ;

   double volume ;
   double relativeVolume ;

   x_local[0] = p_x0[0];
   x_local[1] = p_x1[0];
   x_local[2] = p_x2[0];
   x_local[3] = p_x3[0];
   x_local[4] = p_x4[0];
   x_local[5] = p_x5[0];
   x_local[6] = p_x6[0];
   x_local[7] = p_x7[0];

   y_local[0] = p_y0[0];
   y_local[1] = p_y1[0];
   y_local[2] = p_y2[0];
   y_local[3] = p_y3[0];
   y_local[4] = p_y4[0];
   y_local[5] = p_y5[0];
   y_local[6] = p_y6[0];
   y_local[7] = p_y7[0];

   z_local[0] = p_z0[0];
   z_local[1] = p_z1[0];
   z_local[2] = p_z2[0];
   z_local[3] = p_z3[0];
   z_local[4] = p_z4[0];
   z_local[5] = p_z5[0];
   z_local[6] = p_z6[0];
   z_local[7] = p_z7[0];

   // Calc Elem Volume

   double dx61 = p_x6[0] - p_x1[0];
   double dy61 = p_y6[0] - p_y1[0];
   double dz61 = p_z6[0] - p_z1[0];

   double dx70 = p_x7[0] - p_x0[0];
   double dy70 = p_y7[0] - p_y0[0];
   double dz70 = p_z7[0] - p_z0[0];

   double dx63 = p_x6[0] - p_x3[0];
   double dy63 = p_y6[0] - p_y3[0];
   double dz63 = p_z6[0] - p_z3[0];

   double dx20 = p_x2[0] - p_x0[0];
   double dy20 = p_y2[0] - p_y0[0];
   double dz20 = p_z2[0] - p_z0[0];

   double dx50 = p_x5[0] - p_x0[0];
   double dy50 = p_y5[0] - p_y0[0];
   double dz50 = p_z5[0] - p_z0[0];

   double dx64 = p_x6[0] - p_x4[0];
   double dy64 = p_y6[0] - p_y4[0];
   double dz64 = p_z6[0] - p_z4[0];

   double dx31 = p_x3[0] - p_x1[0];
   double dy31 = p_y3[0] - p_y1[0];
   double dz31 = p_z3[0] - p_z1[0];

   double dx72 = p_x7[0] - p_x2[0];
   double dy72 = p_y7[0] - p_y2[0];
   double dz72 = p_z7[0] - p_z2[0];

   double dx43 = p_x4[0] - p_x3[0];
   double dy43 = p_y4[0] - p_y3[0];
   double dz43 = p_z4[0] - p_z3[0];

   double dx57 = p_x5[0] - p_x7[0];
   double dy57 = p_y5[0] - p_y7[0];
   double dz57 = p_z5[0] - p_z7[0];

   double dx14 = p_x1[0] - p_x4[0];
   double dy14 = p_y1[0] - p_y4[0];
   double dz14 = p_z1[0] - p_z4[0];

   double dx25 = p_x2[0] - p_x5[0];
   double dy25 = p_y2[0] - p_y5[0];
   double dz25 = p_z2[0] - p_z5[0];

   #define TRIPLE_PRODUCT(x1, y1, z1, x2, y2, z2, x3, y3, z3) \
      ((x1)*((y2)*(z3) - (z2)*(y3)) + (x2)*((z1)*(y3) - (y1)*(z3)) + (x3)*((y1)*(z2) - (z1)*(y2)))

   double temp_volume =
      TRIPLE_PRODUCT(dx31 + dx72, dx63, dx20,
         dy31 + dy72, dy63, dy20,
         dz31 + dz72, dz63, dz20) +
      TRIPLE_PRODUCT(dx43 + dx57, dx64, dx70,
         dy43 + dy57, dy64, dy70,
         dz43 + dz57, dz64, dz70) +
      TRIPLE_PRODUCT(dx14 + dx25, dx61, dx50,
         dy14 + dy25, dy61, dy50,
         dz14 + dz25, dz61, dz50);

      #undef TRIPLE_PRODUCT
   temp_volume *= m_twelfth;

   volume = temp_volume;
   // End Calc Elem Volume


   // volume = CalcElemVolumes(x_local, y_local, z_local );
   relativeVolume = volume / volo[0] ;
   vnew[0] = relativeVolume ;
   delv[0] = relativeVolume - v[0] ;


   // arealg[0] = CalcElemCharacteristicLengtht(x_local, y_local, z_local,
   //                                        volume);
   // Start CalcElemCharacteristicLength function
   double a, charLength = double(0.0);
   double fx,fy,fz,gx,gy,gz,area;
   // a = AreaFacet(x_local[0],x_local[1],x_local[2],x_local[3],
   //             y_local[0],y_local[1],y_local[2],y_local[3],
   //             z_local[0],z_local[1],z_local[2],z_local[3]) ;
   fx = (x_local[2] - x_local[0]) - (x_local[3] - x_local[1]);
   fy = (y_local[2] - y_local[0]) - (y_local[3] - y_local[1]);
   fz = (z_local[2] - z_local[0]) - (z_local[3] - z_local[1]);
   gx = (x_local[2] - x_local[0]) + (x_local[3] - x_local[1]);
   gy = (y_local[2] - y_local[0]) + (y_local[3] - y_local[1]);
   gz = (z_local[2] - z_local[0]) + (z_local[3] - z_local[1]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;

   // a = AreaFacet(x_local[4],x_local[5],x_local[6],x_local[7],
   //              y_local[4],y_local[5],y_local[6],y_local[7],
   //              z_local[4],z_local[5],z_local[6],z_local[7]) ;
   fx = (x_local[6] - x_local[4]) - (x_local[7] - x_local[5]);
   fy = (y_local[6] - y_local[4]) - (y_local[7] - y_local[5]);
   fz = (z_local[6] - z_local[4]) - (z_local[7] - z_local[5]);
   gx = (x_local[6] - x_local[4]) + (x_local[7] - x_local[5]);
   gy = (y_local[6] - y_local[4]) + (y_local[7] - y_local[5]);
   gz = (z_local[6] - z_local[4]) + (z_local[7] - z_local[5]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;

   // a = AreaFacet(x_local[0],x_local[1],x_local[5],x_local[4],
   //              y_local[0],y_local[1],y_local[5],y_local[4],
   //              z_local[0],z_local[1],z_local[5],z_local[4]) ;
   fx = (x_local[5] - x_local[0]) - (x_local[4] - x_local[1]);
   fy = (y_local[5] - y_local[0]) - (y_local[4] - y_local[1]);
   fz = (z_local[5] - z_local[0]) - (z_local[4] - z_local[1]);
   gx = (x_local[5] - x_local[0]) + (x_local[4] - x_local[1]);
   gy = (y_local[5] - y_local[0]) + (y_local[4] - y_local[1]);
   gz = (z_local[5] - z_local[0]) + (z_local[4] - z_local[1]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;

   // a = AreaFacet(x_local[1],x_local[2],x_local[6],x_local[5],
   //              y_local[1],y_local[2],y_local[6],y_local[5],
   //              z_local[1],z_local[2],z_local[6],z_local[5]) ;
   fx = (x_local[6] - x_local[1]) - (x_local[5] - x_local[2]);
   fy = (y_local[6] - y_local[1]) - (y_local[5] - y_local[2]);
   fz = (z_local[6] - z_local[1]) - (z_local[5] - z_local[2]);
   gx = (x_local[6] - x_local[1]) + (x_local[5] - x_local[2]);
   gy = (y_local[6] - y_local[1]) + (y_local[5] - y_local[2]);
   gz = (z_local[6] - z_local[1]) + (z_local[5] - z_local[2]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;

   // a = AreaFacet(x_local[2],x_local[3],x_local[7],x_local[6],
   //              y_local[2],y_local[3],y_local[7],y_local[6],
   //              z_local[2],z_local[3],z_local[7],z_local[6]) ;
   fx = (x_local[7] - x_local[2]) - (x_local[6] - x_local[3]);
   fy = (y_local[7] - y_local[2]) - (y_local[6] - y_local[3]);
   fz = (z_local[7] - z_local[2]) - (z_local[6] - z_local[3]);
   gx = (x_local[7] - x_local[2]) + (x_local[6] - x_local[3]);
   gy = (y_local[7] - y_local[2]) + (y_local[6] - y_local[3]);
   gz = (z_local[7] - z_local[2]) + (z_local[6] - z_local[3]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;

   // a = AreaFacet(x_local[3],x_local[0],x_local[4],x_local[7],
   //              y_local[3],y_local[0],y_local[4],y_local[7],
   //              z_local[3],z_local[0],z_local[4],z_local[7]) ;
   fx = (x_local[4] - x_local[3]) - (x_local[7] - x_local[0]);
   fy = (y_local[4] - y_local[3]) - (y_local[7] - y_local[0]);
   fz = (z_local[4] - z_local[3]) - (z_local[7] - z_local[0]);
   gx = (x_local[4] - x_local[3]) + (x_local[7] - x_local[0]);
   gy = (y_local[4] - y_local[3]) + (y_local[7] - y_local[0]);
   gz = (z_local[4] - z_local[3]) + (z_local[7] - z_local[0]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;

   charLength = double(4.0) * volume / sqrt(charLength);

   //End Function
   arealg[0] = charLength;

   double dt2 = double(0.5) * (*deltaTime);

   x_local[0] -= dt2 * p_xd0[0];
   y_local[0] -= dt2 * p_yd0[0];
   z_local[0] -= dt2 * p_zd0[0];

   x_local[1] -= dt2 * p_xd1[0];
   y_local[1] -= dt2 * p_yd1[0];
   z_local[1] -= dt2 * p_zd1[0];

   x_local[2] -= dt2 * p_xd2[0];
   y_local[2] -= dt2 * p_yd2[0];
   z_local[2] -= dt2 * p_zd2[0];

   x_local[3] -= dt2 * p_xd3[0];
   y_local[3] -= dt2 * p_yd3[0];
   z_local[3] -= dt2 * p_zd3[0];

   x_local[4] -= dt2 * p_xd4[0];
   y_local[4] -= dt2 * p_yd4[0];
   z_local[4] -= dt2 * p_zd4[0];

   x_local[5] -= dt2 * p_xd5[0];
   y_local[5] -= dt2 * p_yd5[0];
   z_local[5] -= dt2 * p_zd5[0];

   x_local[6] -= dt2 * p_xd6[0];
   y_local[6] -= dt2 * p_yd6[0];
   z_local[6] -= dt2 * p_zd6[0];

   x_local[7] -= dt2 * p_xd7[0];
   y_local[7] -= dt2 * p_yd7[0];
   z_local[7] -= dt2 * p_zd7[0];

   // CalcElemShapeFunctionDerivativest( x_local, y_local, z_local,
   //                                  B, &detJ );
   // Start CalcElemShapeFunctionDerivativest function
//      const double x0 = x_local[0] ;   const double x1 = x_local[1] ;
//   const double x2 = x_local[2] ;   const double x3 = x_local[3] ;
//   const double x4 = x_local[4] ;   const double x5 = x_local[5] ;
//   const double x6 = x_local[6] ;   const double x7 = x_local[7] ;

//   const double y0 = y_local[0] ;   const double y1 = y_local[1] ;
//   const double y2 = y_local[2] ;   const double y3 = y_local[3] ;
//   const double y4 = y_local[4] ;   const double y5 = y_local[5] ;
//   const double y6 = y_local[6] ;   const double y7 = y_local[7] ;

//   const double z0 = z_local[0] ;   const double z1 = z_local[1] ;
//   const double z2 = z_local[2] ;   const double z3 = z_local[3] ;
//   const double z4 = z_local[4] ;   const double z5 = z_local[5] ;
//   const double z6 = z_local[6] ;   const double z7 = z_local[7] ;

  double fjxxi, fjxet, fjxze;
  double fjyxi, fjyet, fjyze;
  double fjzxi, fjzet, fjzze;
  double cjxxi, cjxet, cjxze;
  double cjyxi, cjyet, cjyze;
  double cjzxi, cjzet, cjzze;

   fjxxi = double(.125) * ( (x_local[6]-x_local[0]) + (x_local[5]-x_local[3]) - (x_local[7]-x_local[1]) - (x_local[4]-x_local[2]) );
   fjxet = double(.125) * ( (x_local[6]-x_local[0]) - (x_local[5]-x_local[3]) + (x_local[7]-x_local[1]) - (x_local[4]-x_local[2]) );
   fjxze = double(.125) * ( (x_local[6]-x_local[0]) + (x_local[5]-x_local[3]) + (x_local[7]-x_local[1]) + (x_local[4]-x_local[2]) );

   fjyxi = double(.125) * ( (y_local[6]-y_local[0]) + (y_local[5]-y_local[3]) - (y_local[7]-y_local[1]) - (y_local[4]-y_local[2]) );
   fjyet = double(.125) * ( (y_local[6]-y_local[0]) - (y_local[5]-y_local[3]) + (y_local[7]-y_local[1]) - (y_local[4]-y_local[2]) );
   fjyze = double(.125) * ( (y_local[6]-y_local[0]) + (y_local[5]-y_local[3]) + (y_local[7]-y_local[1]) + (y_local[4]-y_local[2]) );

   fjzxi = double(.125) * ( (z_local[6]-z_local[0]) + (z_local[5]-z_local[3]) - (z_local[7]-z_local[1]) - (z_local[4]-z_local[2]) );
   fjzet = double(.125) * ( (z_local[6]-z_local[0]) - (z_local[5]-z_local[3]) + (z_local[7]-z_local[1]) - (z_local[4]-z_local[2]) );
   fjzze = double(.125) * ( (z_local[6]-z_local[0]) + (z_local[5]-z_local[3]) + (z_local[7]-z_local[1]) + (z_local[4]-z_local[2]) );


  /* compute cofactors */
  cjxxi =    (fjyet * fjzze) - (fjzet * fjyze);
  cjxet =  - (fjyxi * fjzze) + (fjzxi * fjyze);
  cjxze =    (fjyxi * fjzet) - (fjzxi * fjyet);

  cjyxi =  - (fjxet * fjzze) + (fjzet * fjxze);
  cjyet =    (fjxxi * fjzze) - (fjzxi * fjxze);
  cjyze =  - (fjxxi * fjzet) + (fjzxi * fjxet);

  cjzxi =    (fjxet * fjyze) - (fjyet * fjxze);
  cjzet =  - (fjxxi * fjyze) + (fjyxi * fjxze);
  cjzze =    (fjxxi * fjyet) - (fjyxi * fjxet);

  /* calculate partials :
     this need only be done for l = 0,1,2,3   since , by symmetry ,
     (6,7,4,5) = - (0,1,2,3) .
  */
  B[0][0] =   -  cjxxi  -  cjxet  -  cjxze;
  B[0][1] =      cjxxi  -  cjxet  -  cjxze;
  B[0][2] =      cjxxi  +  cjxet  -  cjxze;
  B[0][3] =   -  cjxxi  +  cjxet  -  cjxze;
  B[0][4] = -B[0][2];
  B[0][5] = -B[0][3];
  B[0][6] = -B[0][0];
  B[0][7] = -B[0][1];

  B[1][0] =   -  cjyxi  -  cjyet  -  cjyze;
  B[1][1] =      cjyxi  -  cjyet  -  cjyze;
  B[1][2] =      cjyxi  +  cjyet  -  cjyze;
  B[1][3] =   -  cjyxi  +  cjyet  -  cjyze;
  B[1][4] = -B[1][2];
  B[1][5] = -B[1][3];
  B[1][6] = -B[1][0];
  B[1][7] = -B[1][1];

  B[2][0] =   -  cjzxi  -  cjzet  -  cjzze;
  B[2][1] =      cjzxi  -  cjzet  -  cjzze;
  B[2][2] =      cjzxi  +  cjzet  -  cjzze;
  B[2][3] =   -  cjzxi  +  cjzet  -  cjzze;
  B[2][4] = -B[2][2];
  B[2][5] = -B[2][3];
  B[2][6] = -B[2][0];
  B[2][7] = -B[2][1];

  /* calculate jacobian determinant (volume) */
  detJ = double(8.) * ( fjxet * cjxet + fjyet * cjyet + fjzet * cjzet);


   // CalcElemVelocityGradientt( xd_local, yd_local, zd_local,
   //                            B, detJ, D );
   const double inv_detJ = double(1.0) / detJ ;
   double dyddx, dxddy, dzddx, dxddz, dzddy, dyddz;
   const double* const pfx = B[0];
   const double* const pfy = B[1];
   const double* const pfz = B[2];

   D[0] = inv_detJ * ( pfx[0] * (p_xd0[0]-p_xd6[0])
                        + pfx[1] * (p_xd1[0]-p_xd7[0])
                        + pfx[2] * (p_xd2[0]-p_xd4[0])
                        + pfx[3] * (p_xd3[0]-p_xd5[0]) );

   D[1] = inv_detJ * ( pfy[0] * (p_yd0[0]-p_yd6[0])
                        + pfy[1] * (p_yd1[0]-p_yd7[0])
                        + pfy[2] * (p_yd2[0]-p_yd4[0])
                        + pfy[3] * (p_yd3[0]-p_yd5[0]) );

   D[2] = inv_detJ * ( pfz[0] * (p_zd0[0]-p_zd6[0])
                        + pfz[1] * (p_zd1[0]-p_zd7[0])
                        + pfz[2] * (p_zd2[0]-p_zd4[0])
                        + pfz[3] * (p_zd3[0]-p_zd5[0]) );

   dyddx  = inv_detJ * ( pfx[0] * (p_yd0[0]-p_yd6[0])
                        + pfx[1] * (p_yd1[0]-p_yd7[0])
                        + pfx[2] * (p_yd2[0]-p_yd4[0])
                        + pfx[3] * (p_yd3[0]-p_yd5[0]) );

   dxddy  = inv_detJ * ( pfy[0] * (p_xd0[0]-p_xd6[0])
                        + pfy[1] * (p_xd1[0]-p_xd7[0])
                        + pfy[2] * (p_xd2[0]-p_xd4[0])
                        + pfy[3] * (p_xd3[0]-p_xd5[0]) );

   dzddx  = inv_detJ * ( pfx[0] * (p_zd0[0]-p_zd6[0])
                        + pfx[1] * (p_zd1[0]-p_zd7[0])
                        + pfx[2] * (p_zd2[0]-p_zd4[0])
                        + pfx[3] * (p_zd3[0]-p_zd5[0]) );

   dxddz  = inv_detJ * ( pfz[0] * (p_xd0[0]-p_xd6[0])
                        + pfz[1] * (p_xd1[0]-p_xd7[0])
                        + pfz[2] * (p_xd2[0]-p_xd4[0])
                        + pfz[3] * (p_xd3[0]-p_xd5[0]) );

   dzddy  = inv_detJ * ( pfy[0] * (p_zd0[0]-p_zd6[0])
                        + pfy[1] * (p_zd1[0]-p_zd7[0])
                        + pfy[2] * (p_zd2[0]-p_zd4[0])
                        + pfy[3] * (p_zd3[0]-p_zd5[0]) );

   dyddz  = inv_detJ * ( pfz[0] * (p_yd0[0]-p_yd6[0])
                        + pfz[1] * (p_yd1[0]-p_yd7[0])
                        + pfz[2] * (p_yd2[0]-p_yd4[0])
                        + pfz[3] * (p_yd3[0]-p_yd5[0]) );
   D[5]  = double( .5) * ( dxddy + dyddx );
   D[4]  = double( .5) * ( dxddz + dzddx );
   D[3]  = double( .5) * ( dzddy + dyddz );
   //ENd Function
   dxx[0] = D[0];
   dyy[0] = D[1];
   dzz[0] = D[2];
}
#ifdef VECTORIZE
//user function -- modified for vectorisation
#if defined __clang__ || defined __GNUC__
__attribute__((always_inline))
#endif
inline void CalcKinematicsForElem_vec( const double p_x0[][SIMD_VEC], const double p_x1[][SIMD_VEC], const double p_x2[][SIMD_VEC], const double p_x3[][SIMD_VEC], const double p_x4[][SIMD_VEC], const double p_x5[][SIMD_VEC], const double p_x6[][SIMD_VEC], const double p_x7[][SIMD_VEC], const double p_y0[][SIMD_VEC], const double p_y1[][SIMD_VEC], const double p_y2[][SIMD_VEC], const double p_y3[][SIMD_VEC], const double p_y4[][SIMD_VEC], const double p_y5[][SIMD_VEC], const double p_y6[][SIMD_VEC], const double p_y7[][SIMD_VEC], const double p_z0[][SIMD_VEC], const double p_z1[][SIMD_VEC], const double p_z2[][SIMD_VEC], const double p_z3[][SIMD_VEC], const double p_z4[][SIMD_VEC], const double p_z5[][SIMD_VEC], const double p_z6[][SIMD_VEC], const double p_z7[][SIMD_VEC], const double p_xd0[][SIMD_VEC], const double p_xd1[][SIMD_VEC], const double p_xd2[][SIMD_VEC], const double p_xd3[][SIMD_VEC], const double p_xd4[][SIMD_VEC], const double p_xd5[][SIMD_VEC], const double p_xd6[][SIMD_VEC], const double p_xd7[][SIMD_VEC], const double p_yd0[][SIMD_VEC], const double p_yd1[][SIMD_VEC], const double p_yd2[][SIMD_VEC], const double p_yd3[][SIMD_VEC], const double p_yd4[][SIMD_VEC], const double p_yd5[][SIMD_VEC], const double p_yd6[][SIMD_VEC], const double p_yd7[][SIMD_VEC], const double p_zd0[][SIMD_VEC], const double p_zd1[][SIMD_VEC], const double p_zd2[][SIMD_VEC], const double p_zd3[][SIMD_VEC], const double p_zd4[][SIMD_VEC], const double p_zd5[][SIMD_VEC], const double p_zd6[][SIMD_VEC], const double p_zd7[][SIMD_VEC], double dxx[][SIMD_VEC], double dyy[][SIMD_VEC], double dzz[][SIMD_VEC], double vnew[][SIMD_VEC], const double volo[][SIMD_VEC], double delv[][SIMD_VEC], const double v[][SIMD_VEC], double arealg[][SIMD_VEC], const double *deltaTime, int idx ) {

   double B[3][8] ;
   double D[6] ;
   double x_local[8] ;
   double y_local[8] ;
   double z_local[8] ;
   double detJ = double(0.0) ;

   double volume ;
   double relativeVolume ;

   x_local[0] = p_x0[0][idx];
   x_local[1] = p_x1[0][idx];
   x_local[2] = p_x2[0][idx];
   x_local[3] = p_x3[0][idx];
   x_local[4] = p_x4[0][idx];
   x_local[5] = p_x5[0][idx];
   x_local[6] = p_x6[0][idx];
   x_local[7] = p_x7[0][idx];

   y_local[0] = p_y0[0][idx];
   y_local[1] = p_y1[0][idx];
   y_local[2] = p_y2[0][idx];
   y_local[3] = p_y3[0][idx];
   y_local[4] = p_y4[0][idx];
   y_local[5] = p_y5[0][idx];
   y_local[6] = p_y6[0][idx];
   y_local[7] = p_y7[0][idx];

   z_local[0] = p_z0[0][idx];
   z_local[1] = p_z1[0][idx];
   z_local[2] = p_z2[0][idx];
   z_local[3] = p_z3[0][idx];
   z_local[4] = p_z4[0][idx];
   z_local[5] = p_z5[0][idx];
   z_local[6] = p_z6[0][idx];
   z_local[7] = p_z7[0][idx];


   double dx61 = p_x6[0][idx] - p_x1[0][idx];
   double dy61 = p_y6[0][idx] - p_y1[0][idx];
   double dz61 = p_z6[0][idx] - p_z1[0][idx];

   double dx70 = p_x7[0][idx] - p_x0[0][idx];
   double dy70 = p_y7[0][idx] - p_y0[0][idx];
   double dz70 = p_z7[0][idx] - p_z0[0][idx];

   double dx63 = p_x6[0][idx] - p_x3[0][idx];
   double dy63 = p_y6[0][idx] - p_y3[0][idx];
   double dz63 = p_z6[0][idx] - p_z3[0][idx];

   double dx20 = p_x2[0][idx] - p_x0[0][idx];
   double dy20 = p_y2[0][idx] - p_y0[0][idx];
   double dz20 = p_z2[0][idx] - p_z0[0][idx];

   double dx50 = p_x5[0][idx] - p_x0[0][idx];
   double dy50 = p_y5[0][idx] - p_y0[0][idx];
   double dz50 = p_z5[0][idx] - p_z0[0][idx];

   double dx64 = p_x6[0][idx] - p_x4[0][idx];
   double dy64 = p_y6[0][idx] - p_y4[0][idx];
   double dz64 = p_z6[0][idx] - p_z4[0][idx];

   double dx31 = p_x3[0][idx] - p_x1[0][idx];
   double dy31 = p_y3[0][idx] - p_y1[0][idx];
   double dz31 = p_z3[0][idx] - p_z1[0][idx];

   double dx72 = p_x7[0][idx] - p_x2[0][idx];
   double dy72 = p_y7[0][idx] - p_y2[0][idx];
   double dz72 = p_z7[0][idx] - p_z2[0][idx];

   double dx43 = p_x4[0][idx] - p_x3[0][idx];
   double dy43 = p_y4[0][idx] - p_y3[0][idx];
   double dz43 = p_z4[0][idx] - p_z3[0][idx];

   double dx57 = p_x5[0][idx] - p_x7[0][idx];
   double dy57 = p_y5[0][idx] - p_y7[0][idx];
   double dz57 = p_z5[0][idx] - p_z7[0][idx];

   double dx14 = p_x1[0][idx] - p_x4[0][idx];
   double dy14 = p_y1[0][idx] - p_y4[0][idx];
   double dz14 = p_z1[0][idx] - p_z4[0][idx];

   double dx25 = p_x2[0][idx] - p_x5[0][idx];
   double dy25 = p_y2[0][idx] - p_y5[0][idx];
   double dz25 = p_z2[0][idx] - p_z5[0][idx];

   #define TRIPLE_PRODUCT(x1, y1, z1, x2, y2, z2, x3, y3, z3) \
      ((x1)*((y2)*(z3) - (z2)*(y3)) + (x2)*((z1)*(y3) - (y1)*(z3)) + (x3)*((y1)*(z2) - (z1)*(y2)))

   double temp_volume =
      TRIPLE_PRODUCT(dx31 + dx72, dx63, dx20,
         dy31 + dy72, dy63, dy20,
         dz31 + dz72, dz63, dz20) +
      TRIPLE_PRODUCT(dx43 + dx57, dx64, dx70,
         dy43 + dy57, dy64, dy70,
         dz43 + dz57, dz64, dz70) +
      TRIPLE_PRODUCT(dx14 + dx25, dx61, dx50,
         dy14 + dy25, dy61, dy50,
         dz14 + dz25, dz61, dz50);

      #undef TRIPLE_PRODUCT
   temp_volume *= m_twelfth;

   volume = temp_volume;



   relativeVolume = volume / volo[0][idx] ;
   vnew[0][idx] = relativeVolume ;
   delv[0][idx] = relativeVolume - v[0][idx] ;




   double a, charLength = double(0.0);
   double fx,fy,fz,gx,gy,gz,area;



   fx = (x_local[2] - x_local[0]) - (x_local[3] - x_local[1]);
   fy = (y_local[2] - y_local[0]) - (y_local[3] - y_local[1]);
   fz = (z_local[2] - z_local[0]) - (z_local[3] - z_local[1]);
   gx = (x_local[2] - x_local[0]) + (x_local[3] - x_local[1]);
   gy = (y_local[2] - y_local[0]) + (y_local[3] - y_local[1]);
   gz = (z_local[2] - z_local[0]) + (z_local[3] - z_local[1]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[6] - x_local[4]) - (x_local[7] - x_local[5]);
   fy = (y_local[6] - y_local[4]) - (y_local[7] - y_local[5]);
   fz = (z_local[6] - z_local[4]) - (z_local[7] - z_local[5]);
   gx = (x_local[6] - x_local[4]) + (x_local[7] - x_local[5]);
   gy = (y_local[6] - y_local[4]) + (y_local[7] - y_local[5]);
   gz = (z_local[6] - z_local[4]) + (z_local[7] - z_local[5]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[5] - x_local[0]) - (x_local[4] - x_local[1]);
   fy = (y_local[5] - y_local[0]) - (y_local[4] - y_local[1]);
   fz = (z_local[5] - z_local[0]) - (z_local[4] - z_local[1]);
   gx = (x_local[5] - x_local[0]) + (x_local[4] - x_local[1]);
   gy = (y_local[5] - y_local[0]) + (y_local[4] - y_local[1]);
   gz = (z_local[5] - z_local[0]) + (z_local[4] - z_local[1]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[6] - x_local[1]) - (x_local[5] - x_local[2]);
   fy = (y_local[6] - y_local[1]) - (y_local[5] - y_local[2]);
   fz = (z_local[6] - z_local[1]) - (z_local[5] - z_local[2]);
   gx = (x_local[6] - x_local[1]) + (x_local[5] - x_local[2]);
   gy = (y_local[6] - y_local[1]) + (y_local[5] - y_local[2]);
   gz = (z_local[6] - z_local[1]) + (z_local[5] - z_local[2]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[7] - x_local[2]) - (x_local[6] - x_local[3]);
   fy = (y_local[7] - y_local[2]) - (y_local[6] - y_local[3]);
   fz = (z_local[7] - z_local[2]) - (z_local[6] - z_local[3]);
   gx = (x_local[7] - x_local[2]) + (x_local[6] - x_local[3]);
   gy = (y_local[7] - y_local[2]) + (y_local[6] - y_local[3]);
   gz = (z_local[7] - z_local[2]) + (z_local[6] - z_local[3]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[4] - x_local[3]) - (x_local[7] - x_local[0]);
   fy = (y_local[4] - y_local[3]) - (y_local[7] - y_local[0]);
   fz = (z_local[4] - z_local[3]) - (z_local[7] - z_local[0]);
   gx = (x_local[4] - x_local[3]) + (x_local[7] - x_local[0]);
   gy = (y_local[4] - y_local[3]) + (y_local[7] - y_local[0]);
   gz = (z_local[4] - z_local[3]) + (z_local[7] - z_local[0]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;

   charLength = double(4.0) * volume / sqrt(charLength);

   arealg[0][idx] = charLength;

   double dt2 = double(0.5) * (*deltaTime);

   x_local[0] -= dt2 * p_xd0[0][idx];
   y_local[0] -= dt2 * p_yd0[0][idx];
   z_local[0] -= dt2 * p_zd0[0][idx];

   x_local[1] -= dt2 * p_xd1[0][idx];
   y_local[1] -= dt2 * p_yd1[0][idx];
   z_local[1] -= dt2 * p_zd1[0][idx];

   x_local[2] -= dt2 * p_xd2[0][idx];
   y_local[2] -= dt2 * p_yd2[0][idx];
   z_local[2] -= dt2 * p_zd2[0][idx];

   x_local[3] -= dt2 * p_xd3[0][idx];
   y_local[3] -= dt2 * p_yd3[0][idx];
   z_local[3] -= dt2 * p_zd3[0][idx];

   x_local[4] -= dt2 * p_xd4[0][idx];
   y_local[4] -= dt2 * p_yd4[0][idx];
   z_local[4] -= dt2 * p_zd4[0][idx];

   x_local[5] -= dt2 * p_xd5[0][idx];
   y_local[5] -= dt2 * p_yd5[0][idx];
   z_local[5] -= dt2 * p_zd5[0][idx];

   x_local[6] -= dt2 * p_xd6[0][idx];
   y_local[6] -= dt2 * p_yd6[0][idx];
   z_local[6] -= dt2 * p_zd6[0][idx];

   x_local[7] -= dt2 * p_xd7[0][idx];
   y_local[7] -= dt2 * p_yd7[0][idx];
   z_local[7] -= dt2 * p_zd7[0][idx];











  double fjxxi, fjxet, fjxze;
  double fjyxi, fjyet, fjyze;
  double fjzxi, fjzet, fjzze;
  double cjxxi, cjxet, cjxze;
  double cjyxi, cjyet, cjyze;
  double cjzxi, cjzet, cjzze;

   fjxxi = double(.125) * ( (x_local[6]-x_local[0]) + (x_local[5]-x_local[3]) - (x_local[7]-x_local[1]) - (x_local[4]-x_local[2]) );
   fjxet = double(.125) * ( (x_local[6]-x_local[0]) - (x_local[5]-x_local[3]) + (x_local[7]-x_local[1]) - (x_local[4]-x_local[2]) );
   fjxze = double(.125) * ( (x_local[6]-x_local[0]) + (x_local[5]-x_local[3]) + (x_local[7]-x_local[1]) + (x_local[4]-x_local[2]) );

   fjyxi = double(.125) * ( (y_local[6]-y_local[0]) + (y_local[5]-y_local[3]) - (y_local[7]-y_local[1]) - (y_local[4]-y_local[2]) );
   fjyet = double(.125) * ( (y_local[6]-y_local[0]) - (y_local[5]-y_local[3]) + (y_local[7]-y_local[1]) - (y_local[4]-y_local[2]) );
   fjyze = double(.125) * ( (y_local[6]-y_local[0]) + (y_local[5]-y_local[3]) + (y_local[7]-y_local[1]) + (y_local[4]-y_local[2]) );

   fjzxi = double(.125) * ( (z_local[6]-z_local[0]) + (z_local[5]-z_local[3]) - (z_local[7]-z_local[1]) - (z_local[4]-z_local[2]) );
   fjzet = double(.125) * ( (z_local[6]-z_local[0]) - (z_local[5]-z_local[3]) + (z_local[7]-z_local[1]) - (z_local[4]-z_local[2]) );
   fjzze = double(.125) * ( (z_local[6]-z_local[0]) + (z_local[5]-z_local[3]) + (z_local[7]-z_local[1]) + (z_local[4]-z_local[2]) );


  cjxxi =    (fjyet * fjzze) - (fjzet * fjyze);
  cjxet =  - (fjyxi * fjzze) + (fjzxi * fjyze);
  cjxze =    (fjyxi * fjzet) - (fjzxi * fjyet);

  cjyxi =  - (fjxet * fjzze) + (fjzet * fjxze);
  cjyet =    (fjxxi * fjzze) - (fjzxi * fjxze);
  cjyze =  - (fjxxi * fjzet) + (fjzxi * fjxet);

  cjzxi =    (fjxet * fjyze) - (fjyet * fjxze);
  cjzet =  - (fjxxi * fjyze) + (fjyxi * fjxze);
  cjzze =    (fjxxi * fjyet) - (fjyxi * fjxet);

  B[0][0] =   -  cjxxi  -  cjxet  -  cjxze;
  B[0][1] =      cjxxi  -  cjxet  -  cjxze;
  B[0][2] =      cjxxi  +  cjxet  -  cjxze;
  B[0][3] =   -  cjxxi  +  cjxet  -  cjxze;
  B[0][4] = -B[0][2];
  B[0][5] = -B[0][3];
  B[0][6] = -B[0][0];
  B[0][7] = -B[0][1];

  B[1][0] =   -  cjyxi  -  cjyet  -  cjyze;
  B[1][1] =      cjyxi  -  cjyet  -  cjyze;
  B[1][2] =      cjyxi  +  cjyet  -  cjyze;
  B[1][3] =   -  cjyxi  +  cjyet  -  cjyze;
  B[1][4] = -B[1][2];
  B[1][5] = -B[1][3];
  B[1][6] = -B[1][0];
  B[1][7] = -B[1][1];

  B[2][0] =   -  cjzxi  -  cjzet  -  cjzze;
  B[2][1] =      cjzxi  -  cjzet  -  cjzze;
  B[2][2] =      cjzxi  +  cjzet  -  cjzze;
  B[2][3] =   -  cjzxi  +  cjzet  -  cjzze;
  B[2][4] = -B[2][2];
  B[2][5] = -B[2][3];
  B[2][6] = -B[2][0];
  B[2][7] = -B[2][1];

  detJ = double(8.) * ( fjxet * cjxet + fjyet * cjyet + fjzet * cjzet);



   const double inv_detJ = double(1.0) / detJ ;
   double dyddx, dxddy, dzddx, dxddz, dzddy, dyddz;
   const double* const pfx = B[0];
   const double* const pfy = B[1];
   const double* const pfz = B[2];

   D[0] = inv_detJ * ( pfx[0] * (p_xd0[0][idx]-p_xd6[0][idx])
                        + pfx[1] * (p_xd1[0][idx]-p_xd7[0][idx])
                        + pfx[2] * (p_xd2[0][idx]-p_xd4[0][idx])
                        + pfx[3] * (p_xd3[0][idx]-p_xd5[0][idx]) );

   D[1] = inv_detJ * ( pfy[0] * (p_yd0[0][idx]-p_yd6[0][idx])
                        + pfy[1] * (p_yd1[0][idx]-p_yd7[0][idx])
                        + pfy[2] * (p_yd2[0][idx]-p_yd4[0][idx])
                        + pfy[3] * (p_yd3[0][idx]-p_yd5[0][idx]) );

   D[2] = inv_detJ * ( pfz[0] * (p_zd0[0][idx]-p_zd6[0][idx])
                        + pfz[1] * (p_zd1[0][idx]-p_zd7[0][idx])
                        + pfz[2] * (p_zd2[0][idx]-p_zd4[0][idx])
                        + pfz[3] * (p_zd3[0][idx]-p_zd5[0][idx]) );

   dyddx  = inv_detJ * ( pfx[0] * (p_yd0[0][idx]-p_yd6[0][idx])
                        + pfx[1] * (p_yd1[0][idx]-p_yd7[0][idx])
                        + pfx[2] * (p_yd2[0][idx]-p_yd4[0][idx])
                        + pfx[3] * (p_yd3[0][idx]-p_yd5[0][idx]) );

   dxddy  = inv_detJ * ( pfy[0] * (p_xd0[0][idx]-p_xd6[0][idx])
                        + pfy[1] * (p_xd1[0][idx]-p_xd7[0][idx])
                        + pfy[2] * (p_xd2[0][idx]-p_xd4[0][idx])
                        + pfy[3] * (p_xd3[0][idx]-p_xd5[0][idx]) );

   dzddx  = inv_detJ * ( pfx[0] * (p_zd0[0][idx]-p_zd6[0][idx])
                        + pfx[1] * (p_zd1[0][idx]-p_zd7[0][idx])
                        + pfx[2] * (p_zd2[0][idx]-p_zd4[0][idx])
                        + pfx[3] * (p_zd3[0][idx]-p_zd5[0][idx]) );

   dxddz  = inv_detJ * ( pfz[0] * (p_xd0[0][idx]-p_xd6[0][idx])
                        + pfz[1] * (p_xd1[0][idx]-p_xd7[0][idx])
                        + pfz[2] * (p_xd2[0][idx]-p_xd4[0][idx])
                        + pfz[3] * (p_xd3[0][idx]-p_xd5[0][idx]) );

   dzddy  = inv_detJ * ( pfy[0] * (p_zd0[0][idx]-p_zd6[0][idx])
                        + pfy[1] * (p_zd1[0][idx]-p_zd7[0][idx])
                        + pfy[2] * (p_zd2[0][idx]-p_zd4[0][idx])
                        + pfy[3] * (p_zd3[0][idx]-p_zd5[0][idx]) );

   dyddz  = inv_detJ * ( pfz[0] * (p_yd0[0][idx]-p_yd6[0][idx])
                        + pfz[1] * (p_yd1[0][idx]-p_yd7[0][idx])
                        + pfz[2] * (p_yd2[0][idx]-p_yd4[0][idx])
                        + pfz[3] * (p_yd3[0][idx]-p_yd5[0][idx]) );
   D[5]  = double( .5) * ( dxddy + dyddx );
   D[4]  = double( .5) * ( dxddz + dzddx );
   D[3]  = double( .5) * ( dzddy + dyddz );

   dxx[0][idx] = D[0];
   dyy[0][idx] = D[1];
   dzz[0][idx] = D[2];

}
#endif

// host stub function
void op_par_loop_CalcKinematicsForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56){

  int nargs = 57;
  op_arg args[57];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;
  args[33] = arg33;
  args[34] = arg34;
  args[35] = arg35;
  args[36] = arg36;
  args[37] = arg37;
  args[38] = arg38;
  args[39] = arg39;
  args[40] = arg40;
  args[41] = arg41;
  args[42] = arg42;
  args[43] = arg43;
  args[44] = arg44;
  args[45] = arg45;
  args[46] = arg46;
  args[47] = arg47;
  args[48] = arg48;
  args[49] = arg49;
  args[50] = arg50;
  args[51] = arg51;
  args[52] = arg52;
  args[53] = arg53;
  args[54] = arg54;
  args[55] = arg55;
  args[56] = arg56;
  //create aligned pointers for dats
  ALIGNED_double const double * __restrict__ ptr0 = (double *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr3 = (double *) arg3.data;
  DECLARE_PTR_ALIGNED(ptr3,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr4 = (double *) arg4.data;
  DECLARE_PTR_ALIGNED(ptr4,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr5 = (double *) arg5.data;
  DECLARE_PTR_ALIGNED(ptr5,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr6 = (double *) arg6.data;
  DECLARE_PTR_ALIGNED(ptr6,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr7 = (double *) arg7.data;
  DECLARE_PTR_ALIGNED(ptr7,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr8 = (double *) arg8.data;
  DECLARE_PTR_ALIGNED(ptr8,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr9 = (double *) arg9.data;
  DECLARE_PTR_ALIGNED(ptr9,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr10 = (double *) arg10.data;
  DECLARE_PTR_ALIGNED(ptr10,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr11 = (double *) arg11.data;
  DECLARE_PTR_ALIGNED(ptr11,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr12 = (double *) arg12.data;
  DECLARE_PTR_ALIGNED(ptr12,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr13 = (double *) arg13.data;
  DECLARE_PTR_ALIGNED(ptr13,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr14 = (double *) arg14.data;
  DECLARE_PTR_ALIGNED(ptr14,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr15 = (double *) arg15.data;
  DECLARE_PTR_ALIGNED(ptr15,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr16 = (double *) arg16.data;
  DECLARE_PTR_ALIGNED(ptr16,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr17 = (double *) arg17.data;
  DECLARE_PTR_ALIGNED(ptr17,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr18 = (double *) arg18.data;
  DECLARE_PTR_ALIGNED(ptr18,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr19 = (double *) arg19.data;
  DECLARE_PTR_ALIGNED(ptr19,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr20 = (double *) arg20.data;
  DECLARE_PTR_ALIGNED(ptr20,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr21 = (double *) arg21.data;
  DECLARE_PTR_ALIGNED(ptr21,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr22 = (double *) arg22.data;
  DECLARE_PTR_ALIGNED(ptr22,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr23 = (double *) arg23.data;
  DECLARE_PTR_ALIGNED(ptr23,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr24 = (double *) arg24.data;
  DECLARE_PTR_ALIGNED(ptr24,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr25 = (double *) arg25.data;
  DECLARE_PTR_ALIGNED(ptr25,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr26 = (double *) arg26.data;
  DECLARE_PTR_ALIGNED(ptr26,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr27 = (double *) arg27.data;
  DECLARE_PTR_ALIGNED(ptr27,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr28 = (double *) arg28.data;
  DECLARE_PTR_ALIGNED(ptr28,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr29 = (double *) arg29.data;
  DECLARE_PTR_ALIGNED(ptr29,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr30 = (double *) arg30.data;
  DECLARE_PTR_ALIGNED(ptr30,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr31 = (double *) arg31.data;
  DECLARE_PTR_ALIGNED(ptr31,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr32 = (double *) arg32.data;
  DECLARE_PTR_ALIGNED(ptr32,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr33 = (double *) arg33.data;
  DECLARE_PTR_ALIGNED(ptr33,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr34 = (double *) arg34.data;
  DECLARE_PTR_ALIGNED(ptr34,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr35 = (double *) arg35.data;
  DECLARE_PTR_ALIGNED(ptr35,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr36 = (double *) arg36.data;
  DECLARE_PTR_ALIGNED(ptr36,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr37 = (double *) arg37.data;
  DECLARE_PTR_ALIGNED(ptr37,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr38 = (double *) arg38.data;
  DECLARE_PTR_ALIGNED(ptr38,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr39 = (double *) arg39.data;
  DECLARE_PTR_ALIGNED(ptr39,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr40 = (double *) arg40.data;
  DECLARE_PTR_ALIGNED(ptr40,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr41 = (double *) arg41.data;
  DECLARE_PTR_ALIGNED(ptr41,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr42 = (double *) arg42.data;
  DECLARE_PTR_ALIGNED(ptr42,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr43 = (double *) arg43.data;
  DECLARE_PTR_ALIGNED(ptr43,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr44 = (double *) arg44.data;
  DECLARE_PTR_ALIGNED(ptr44,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr45 = (double *) arg45.data;
  DECLARE_PTR_ALIGNED(ptr45,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr46 = (double *) arg46.data;
  DECLARE_PTR_ALIGNED(ptr46,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr47 = (double *) arg47.data;
  DECLARE_PTR_ALIGNED(ptr47,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr48 = (double *) arg48.data;
  DECLARE_PTR_ALIGNED(ptr48,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr49 = (double *) arg49.data;
  DECLARE_PTR_ALIGNED(ptr49,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr50 = (double *) arg50.data;
  DECLARE_PTR_ALIGNED(ptr50,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr51 = (double *) arg51.data;
  DECLARE_PTR_ALIGNED(ptr51,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr52 = (double *) arg52.data;
  DECLARE_PTR_ALIGNED(ptr52,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr53 = (double *) arg53.data;
  DECLARE_PTR_ALIGNED(ptr53,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr54 = (double *) arg54.data;
  DECLARE_PTR_ALIGNED(ptr54,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr55 = (double *) arg55.data;
  DECLARE_PTR_ALIGNED(ptr55,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(12);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: CalcKinematicsForElem\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      double dat56[SIMD_VEC];
      for ( int i=0; i<SIMD_VEC; i++ ){
        dat56[i] = *((double*)arg56.data);
      }
      if (n<set->core_size && n>0 && n % OP_mpi_test_frequency == 0)
        op_mpi_test_all(nargs,args);
      if ((n+SIMD_VEC >= set->core_size) && (n+SIMD_VEC-set->core_size < SIMD_VEC)) {
        op_mpi_wait_all(nargs, args);
      }
      ALIGNED_double double dat0[1][SIMD_VEC];
      ALIGNED_double double dat1[1][SIMD_VEC];
      ALIGNED_double double dat2[1][SIMD_VEC];
      ALIGNED_double double dat3[1][SIMD_VEC];
      ALIGNED_double double dat4[1][SIMD_VEC];
      ALIGNED_double double dat5[1][SIMD_VEC];
      ALIGNED_double double dat6[1][SIMD_VEC];
      ALIGNED_double double dat7[1][SIMD_VEC];
      ALIGNED_double double dat8[1][SIMD_VEC];
      ALIGNED_double double dat9[1][SIMD_VEC];
      ALIGNED_double double dat10[1][SIMD_VEC];
      ALIGNED_double double dat11[1][SIMD_VEC];
      ALIGNED_double double dat12[1][SIMD_VEC];
      ALIGNED_double double dat13[1][SIMD_VEC];
      ALIGNED_double double dat14[1][SIMD_VEC];
      ALIGNED_double double dat15[1][SIMD_VEC];
      ALIGNED_double double dat16[1][SIMD_VEC];
      ALIGNED_double double dat17[1][SIMD_VEC];
      ALIGNED_double double dat18[1][SIMD_VEC];
      ALIGNED_double double dat19[1][SIMD_VEC];
      ALIGNED_double double dat20[1][SIMD_VEC];
      ALIGNED_double double dat21[1][SIMD_VEC];
      ALIGNED_double double dat22[1][SIMD_VEC];
      ALIGNED_double double dat23[1][SIMD_VEC];
      ALIGNED_double double dat24[1][SIMD_VEC];
      ALIGNED_double double dat25[1][SIMD_VEC];
      ALIGNED_double double dat26[1][SIMD_VEC];
      ALIGNED_double double dat27[1][SIMD_VEC];
      ALIGNED_double double dat28[1][SIMD_VEC];
      ALIGNED_double double dat29[1][SIMD_VEC];
      ALIGNED_double double dat30[1][SIMD_VEC];
      ALIGNED_double double dat31[1][SIMD_VEC];
      ALIGNED_double double dat32[1][SIMD_VEC];
      ALIGNED_double double dat33[1][SIMD_VEC];
      ALIGNED_double double dat34[1][SIMD_VEC];
      ALIGNED_double double dat35[1][SIMD_VEC];
      ALIGNED_double double dat36[1][SIMD_VEC];
      ALIGNED_double double dat37[1][SIMD_VEC];
      ALIGNED_double double dat38[1][SIMD_VEC];
      ALIGNED_double double dat39[1][SIMD_VEC];
      ALIGNED_double double dat40[1][SIMD_VEC];
      ALIGNED_double double dat41[1][SIMD_VEC];
      ALIGNED_double double dat42[1][SIMD_VEC];
      ALIGNED_double double dat43[1][SIMD_VEC];
      ALIGNED_double double dat44[1][SIMD_VEC];
      ALIGNED_double double dat45[1][SIMD_VEC];
      ALIGNED_double double dat46[1][SIMD_VEC];
      ALIGNED_double double dat47[1][SIMD_VEC];
      ALIGNED_double double dat48[1][SIMD_VEC];
      ALIGNED_double double dat49[1][SIMD_VEC];
      ALIGNED_double double dat50[1][SIMD_VEC];
      ALIGNED_double double dat51[1][SIMD_VEC];
      ALIGNED_double double dat52[1][SIMD_VEC];
      ALIGNED_double double dat53[1][SIMD_VEC];
      ALIGNED_double double dat54[1][SIMD_VEC];
      ALIGNED_double double dat55[1][SIMD_VEC];
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx0_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 0];
        int idx1_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 1];
        int idx2_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 2];
        int idx3_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 3];
        int idx4_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 4];
        int idx5_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 5];
        int idx6_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 6];
        int idx7_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 7];
        int idx8_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 0];
        int idx9_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 1];
        int idx10_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 2];
        int idx11_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 3];
        int idx12_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 4];
        int idx13_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 5];
        int idx14_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 6];
        int idx15_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 7];
        int idx16_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 0];
        int idx17_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 1];
        int idx18_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 2];
        int idx19_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 3];
        int idx20_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 4];
        int idx21_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 5];
        int idx22_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 6];
        int idx23_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 7];
        int idx24_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 0];
        int idx25_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 1];
        int idx26_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 2];
        int idx27_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 3];
        int idx28_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 4];
        int idx29_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 5];
        int idx30_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 6];
        int idx31_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 7];
        int idx32_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 0];
        int idx33_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 1];
        int idx34_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 2];
        int idx35_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 3];
        int idx36_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 4];
        int idx37_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 5];
        int idx38_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 6];
        int idx39_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 7];
        int idx40_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 0];
        int idx41_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 1];
        int idx42_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 2];
        int idx43_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 3];
        int idx44_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 4];
        int idx45_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 5];
        int idx46_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 6];
        int idx47_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 7];
        int idx48_1 = 1 * (n+i);
        int idx49_1 = 1 * (n+i);
        int idx50_1 = 1 * (n+i);
        int idx51_1 = 1 * (n+i);
        int idx52_1 = 1 * (n+i);
        int idx53_1 = 1 * (n+i);
        int idx54_1 = 1 * (n+i);
        int idx55_1 = 1 * (n+i);

        dat0[0][i] = (ptr0)[idx0_1 + 0];
        dat1[0][i] = (ptr1)[idx1_1 + 0];
        dat2[0][i] = (ptr2)[idx2_1 + 0];
        dat3[0][i] = (ptr3)[idx3_1 + 0];
        dat4[0][i] = (ptr4)[idx4_1 + 0];
        dat5[0][i] = (ptr5)[idx5_1 + 0];
        dat6[0][i] = (ptr6)[idx6_1 + 0];
        dat7[0][i] = (ptr7)[idx7_1 + 0];
        dat8[0][i] = (ptr8)[idx8_1 + 0];
        dat9[0][i] = (ptr9)[idx9_1 + 0];
        dat10[0][i] = (ptr10)[idx10_1 + 0];
        dat11[0][i] = (ptr11)[idx11_1 + 0];
        dat12[0][i] = (ptr12)[idx12_1 + 0];
        dat13[0][i] = (ptr13)[idx13_1 + 0];
        dat14[0][i] = (ptr14)[idx14_1 + 0];
        dat15[0][i] = (ptr15)[idx15_1 + 0];
        dat16[0][i] = (ptr16)[idx16_1 + 0];
        dat17[0][i] = (ptr17)[idx17_1 + 0];
        dat18[0][i] = (ptr18)[idx18_1 + 0];
        dat19[0][i] = (ptr19)[idx19_1 + 0];
        dat20[0][i] = (ptr20)[idx20_1 + 0];
        dat21[0][i] = (ptr21)[idx21_1 + 0];
        dat22[0][i] = (ptr22)[idx22_1 + 0];
        dat23[0][i] = (ptr23)[idx23_1 + 0];
        dat24[0][i] = (ptr24)[idx24_1 + 0];
        dat25[0][i] = (ptr25)[idx25_1 + 0];
        dat26[0][i] = (ptr26)[idx26_1 + 0];
        dat27[0][i] = (ptr27)[idx27_1 + 0];
        dat28[0][i] = (ptr28)[idx28_1 + 0];
        dat29[0][i] = (ptr29)[idx29_1 + 0];
        dat30[0][i] = (ptr30)[idx30_1 + 0];
        dat31[0][i] = (ptr31)[idx31_1 + 0];
        dat32[0][i] = (ptr32)[idx32_1 + 0];
        dat33[0][i] = (ptr33)[idx33_1 + 0];
        dat34[0][i] = (ptr34)[idx34_1 + 0];
        dat35[0][i] = (ptr35)[idx35_1 + 0];
        dat36[0][i] = (ptr36)[idx36_1 + 0];
        dat37[0][i] = (ptr37)[idx37_1 + 0];
        dat38[0][i] = (ptr38)[idx38_1 + 0];
        dat39[0][i] = (ptr39)[idx39_1 + 0];
        dat40[0][i] = (ptr40)[idx40_1 + 0];
        dat41[0][i] = (ptr41)[idx41_1 + 0];
        dat42[0][i] = (ptr42)[idx42_1 + 0];
        dat43[0][i] = (ptr43)[idx43_1 + 0];
        dat44[0][i] = (ptr44)[idx44_1 + 0];
        dat45[0][i] = (ptr45)[idx45_1 + 0];
        dat46[0][i] = (ptr46)[idx46_1 + 0];
        dat47[0][i] = (ptr47)[idx47_1 + 0];
        dat52[0][i] = (ptr52)[idx52_1 + 0];
        dat54[0][i] = (ptr54)[idx54_1 + 0];
      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        CalcKinematicsForElem_vec(
          dat0,
          dat1,
          dat2,
          dat3,
          dat4,
          dat5,
          dat6,
          dat7,
          dat8,
          dat9,
          dat10,
          dat11,
          dat12,
          dat13,
          dat14,
          dat15,
          dat16,
          dat17,
          dat18,
          dat19,
          dat20,
          dat21,
          dat22,
          dat23,
          dat24,
          dat25,
          dat26,
          dat27,
          dat28,
          dat29,
          dat30,
          dat31,
          dat32,
          dat33,
          dat34,
          dat35,
          dat36,
          dat37,
          dat38,
          dat39,
          dat40,
          dat41,
          dat42,
          dat43,
          dat44,
          dat45,
          dat46,
          dat47,
          dat48,
          dat49,
          dat50,
          dat51,
          dat52,
          dat53,
          dat54,
          dat55,
          (double*)arg56.data,
          i);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx48_1 = 1 * (n+i);
        int idx49_1 = 1 * (n+i);
        int idx50_1 = 1 * (n+i);
        int idx51_1 = 1 * (n+i);
        int idx53_1 = 1 * (n+i);
        int idx55_1 = 1 * (n+i);

        (ptr48)[idx48_1 + 0] = dat48[0][i];

        (ptr49)[idx49_1 + 0] = dat49[0][i];

        (ptr50)[idx50_1 + 0] = dat50[0][i];

        (ptr51)[idx51_1 + 0] = dat51[0][i];

        (ptr53)[idx53_1 + 0] = dat53[0][i];

        (ptr55)[idx55_1 + 0] = dat55[0][i];

      }
      for ( int i=0; i<SIMD_VEC; i++ ){
      }
    }

    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map0idx;
      int map1idx;
      int map2idx;
      int map3idx;
      int map4idx;
      int map5idx;
      int map6idx;
      int map7idx;
      map0idx = arg0.map_data[n * arg0.map->dim + 0];
      map1idx = arg0.map_data[n * arg0.map->dim + 1];
      map2idx = arg0.map_data[n * arg0.map->dim + 2];
      map3idx = arg0.map_data[n * arg0.map->dim + 3];
      map4idx = arg0.map_data[n * arg0.map->dim + 4];
      map5idx = arg0.map_data[n * arg0.map->dim + 5];
      map6idx = arg0.map_data[n * arg0.map->dim + 6];
      map7idx = arg0.map_data[n * arg0.map->dim + 7];

      CalcKinematicsForElem(
        &(ptr0)[1 * map0idx],
        &(ptr1)[1 * map1idx],
        &(ptr2)[1 * map2idx],
        &(ptr3)[1 * map3idx],
        &(ptr4)[1 * map4idx],
        &(ptr5)[1 * map5idx],
        &(ptr6)[1 * map6idx],
        &(ptr7)[1 * map7idx],
        &(ptr8)[1 * map0idx],
        &(ptr9)[1 * map1idx],
        &(ptr10)[1 * map2idx],
        &(ptr11)[1 * map3idx],
        &(ptr12)[1 * map4idx],
        &(ptr13)[1 * map5idx],
        &(ptr14)[1 * map6idx],
        &(ptr15)[1 * map7idx],
        &(ptr16)[1 * map0idx],
        &(ptr17)[1 * map1idx],
        &(ptr18)[1 * map2idx],
        &(ptr19)[1 * map3idx],
        &(ptr20)[1 * map4idx],
        &(ptr21)[1 * map5idx],
        &(ptr22)[1 * map6idx],
        &(ptr23)[1 * map7idx],
        &(ptr24)[1 * map0idx],
        &(ptr25)[1 * map1idx],
        &(ptr26)[1 * map2idx],
        &(ptr27)[1 * map3idx],
        &(ptr28)[1 * map4idx],
        &(ptr29)[1 * map5idx],
        &(ptr30)[1 * map6idx],
        &(ptr31)[1 * map7idx],
        &(ptr32)[1 * map0idx],
        &(ptr33)[1 * map1idx],
        &(ptr34)[1 * map2idx],
        &(ptr35)[1 * map3idx],
        &(ptr36)[1 * map4idx],
        &(ptr37)[1 * map5idx],
        &(ptr38)[1 * map6idx],
        &(ptr39)[1 * map7idx],
        &(ptr40)[1 * map0idx],
        &(ptr41)[1 * map1idx],
        &(ptr42)[1 * map2idx],
        &(ptr43)[1 * map3idx],
        &(ptr44)[1 * map4idx],
        &(ptr45)[1 * map5idx],
        &(ptr46)[1 * map6idx],
        &(ptr47)[1 * map7idx],
        &(ptr48)[1 * n],
        &(ptr49)[1 * n],
        &(ptr50)[1 * n],
        &(ptr51)[1 * n],
        &(ptr52)[1 * n],
        &(ptr53)[1 * n],
        &(ptr54)[1 * n],
        &(ptr55)[1 * n],
        (double*)arg56.data);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[12].name      = name;
  OP_kernels[12].count    += 1;
  OP_kernels[12].time     += wall_t2 - wall_t1;
  OP_kernels[12].transfer += (float)set->size * arg0.size;
  OP_kernels[12].transfer += (float)set->size * arg8.size;
  OP_kernels[12].transfer += (float)set->size * arg16.size;
  OP_kernels[12].transfer += (float)set->size * arg24.size;
  OP_kernels[12].transfer += (float)set->size * arg32.size;
  OP_kernels[12].transfer += (float)set->size * arg40.size;
  OP_kernels[12].transfer += (float)set->size * arg48.size;
  OP_kernels[12].transfer += (float)set->size * arg49.size;
  OP_kernels[12].transfer += (float)set->size * arg50.size;
  OP_kernels[12].transfer += (float)set->size * arg51.size;
  OP_kernels[12].transfer += (float)set->size * arg52.size;
  OP_kernels[12].transfer += (float)set->size * arg53.size;
  OP_kernels[12].transfer += (float)set->size * arg54.size;
  OP_kernels[12].transfer += (float)set->size * arg55.size;
  OP_kernels[12].transfer += (float)set->size * arg56.size;
  OP_kernels[12].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
