//
// auto-generated by op2.py
//

//user function
// static inline
// void VoluDert(const double x0, const double x1, const double x2,
//              const double x3, const double x4, const double x5,
//              const double y0, const double y1, const double y2,
//              const double y3, const double y4, const double y5,
//              const double z0, const double z1, const double z2,
//              const double z3, const double z4, const double z5,
//              double* dvdx, double* dvdy, double* dvdz)
// {
//    *dvdx =
//       (y1 + y2) * (z0 + z1) - (y0 + y1) * (z1 + z2) +
//       (y0 + y4) * (z3 + z4) - (y3 + y4) * (z0 + z4) -
//       (y2 + y5) * (z3 + z5) + (y3 + y5) * (z2 + z5);
//    *dvdy =
//       - (x1 + x2) * (z0 + z1) + (x0 + x1) * (z1 + z2) -
//       (x0 + x4) * (z3 + z4) + (x3 + x4) * (z0 + z4) +
//       (x2 + x5) * (z3 + z5) - (x3 + x5) * (z2 + z5);

//    *dvdz =
//       - (y1 + y2) * (x0 + x1) + (y0 + y1) * (x1 + x2) -
//       (y0 + y4) * (x3 + x4) + (y3 + y4) * (x0 + x4) +
//       (y2 + y5) * (x3 + x5) - (y3 + y5) * (x2 + x5);

//    *dvdx *= m_twelfth;
//    *dvdy *= m_twelfth;
//    *dvdz *= m_twelfth;
// }

inline void CalcVolumeDerivatives(
    const double *p_x0, const double *p_x1, const double *p_x2, const double *p_x3, const double *p_x4, const double *p_x5, const double *p_x6, const double *p_x7,
    const double *p_y0, const double *p_y1, const double *p_y2, const double *p_y3, const double *p_y4, const double *p_y5, const double *p_y6, const double *p_y7,
    const double *p_z0, const double *p_z1, const double *p_z2, const double *p_z3, const double *p_z4, const double *p_z5, const double *p_z6, const double *p_z7,
    double *p_dvdx,
    double *p_dvdy,
    double *p_dvdz,
    double *p_x8n,
    double *p_y8n,
    double *p_z8n,
    const double *p_v, double *p_determ, const double *p_volo
){

        // double  p_x8[0],  p_y8[0],  p_z8[0] ;
        // double pfx[8], pfy[8], pfz[8] ;

        // Formerly its own function "VolumeDer", moved to be inside this function for CUDA to work
        // VoluDert(p_x1[0], p_x2[0], p_x3[0], p_x4[0], p_x5[0], p_x7[0],
        //         p_y1[0], p_y2[0], p_y3[0], p_y4[0], p_y5[0], p_y7[0],
        //         p_z1[0], p_z2[0], p_z3[0], p_z4[0], p_z5[0], p_z7[0],
        //         &p_dvdx[0], &p_dvdy[0], &p_dvdz[0]);
        p_dvdx[0] =
        (p_y2[0] + p_y3[0]) * (p_z1[0] + p_z2[0]) - (p_y1[0] + p_y2[0]) * (p_z2[0] + p_z3[0]) +
        (p_y1[0] + p_y5[0]) * (p_z4[0] + p_z5[0]) - (p_y4[0] + p_y5[0]) * (p_z1[0] + p_z5[0]) -
        (p_y3[0] + p_y7[0]) * (p_z4[0] + p_z7[0]) + (p_y4[0] + p_y7[0]) * (p_z3[0] + p_z7[0]);
        p_dvdy[0] =
        - (p_x2[0] + p_x3[0]) * (p_z1[0] + p_z2[0]) + (p_x1[0] + p_x2[0]) * (p_z2[0] + p_z3[0]) -
        (p_x1[0] + p_x5[0]) * (p_z4[0] + p_z5[0]) + (p_x4[0] + p_x5[0]) * (p_z1[0] + p_z5[0]) +
        (p_x3[0] + p_x7[0]) * (p_z4[0] + p_z7[0]) - (p_x4[0] + p_x7[0]) * (p_z3[0] + p_z7[0]);

        p_dvdz[0] =
        - (p_y2[0] + p_y3[0]) * (p_x1[0] + p_x2[0]) + (p_y1[0] + p_y2[0]) * (p_x2[0] + p_x3[0]) -
        (p_y1[0] + p_y5[0]) * (p_x4[0] + p_x5[0]) + (p_y4[0] + p_y5[0]) * (p_x1[0] + p_x5[0]) +
        (p_y3[0] + p_y7[0]) * (p_x4[0] + p_x7[0]) - (p_y4[0] + p_y7[0]) * (p_x3[0] + p_x7[0]);

        p_dvdx[0] *= m_twelfth;
        p_dvdy[0] *= m_twelfth;
        p_dvdz[0] *= m_twelfth;
                
        // VoluDert(p_x0[0], p_x1[0], p_x2[0], p_x7[0], p_x4[0], p_x6[0],
        //         p_y0[0], p_y1[0], p_y2[0], p_y7[0], p_y4[0], p_y6[0],
        //         p_z0[0], p_z1[0], p_z2[0], p_z7[0], p_z4[0], p_z6[0],
        //         &p_dvdx[3], &p_dvdy[3], &p_dvdz[3]);
        p_dvdx[3] =
        (p_y1[0] + p_y2[0]) * (p_z0[0] + p_z1[0]) - (p_y0[0] + p_y1[0]) * (p_z1[0] + p_z2[0]) +
        (p_y0[0] + p_y4[0]) * (p_z7[0] + p_z4[0]) - (p_y7[0] + p_y4[0]) * (p_z0[0] + p_z4[0]) -
        (p_y2[0] + p_y6[0]) * (p_z7[0] + p_z6[0]) + (p_y7[0] + p_y6[0]) * (p_z2[0] + p_z6[0]);
        p_dvdy[3] =
        - (p_x1[0] + p_x2[0]) * (p_z0[0] + p_z1[0]) + (p_x0[0] + p_x1[0]) * (p_z1[0] + p_z2[0]) -
        (p_x0[0] + p_x4[0]) * (p_z7[0] + p_z4[0]) + (p_x7[0] + p_x4[0]) * (p_z0[0] + p_z4[0]) +
        (p_x2[0] + p_x6[0]) * (p_z7[0] + p_z6[0]) - (p_x7[0] + p_x6[0]) * (p_z2[0] + p_z6[0]);
        p_dvdz[3] =
        - (p_y1[0] + p_y2[0]) * (p_x0[0] + p_x1[0]) + (p_y0[0] + p_y1[0]) * (p_x1[0] + p_x2[0]) -
        (p_y0[0] + p_y4[0]) * (p_x7[0] + p_x4[0]) + (p_y7[0] + p_y4[0]) * (p_x0[0] + p_x4[0]) +
        (p_y2[0] + p_y6[0]) * (p_x7[0] + p_x6[0]) - (p_y7[0] + p_y6[0]) * (p_x2[0] + p_x6[0]);

        p_dvdx[3] *= m_twelfth;
        p_dvdy[3] *= m_twelfth;
        p_dvdz[3] *= m_twelfth;
                
        // VoluDert(p_x3[0], p_x0[0], p_x1[0], p_x6[0], p_x7[0], p_x5[0],
        //         p_y3[0], p_y0[0], p_y1[0], p_y6[0], p_y7[0], p_y5[0],
        //         p_z3[0], p_z0[0], p_z1[0], p_z6[0], p_z7[0], p_z5[0],
        //         &p_dvdx[2], &p_dvdy[2], &p_dvdz[2]);
        p_dvdx[2] =
        (p_y0[0] + p_y1[0]) * (p_z3[0] + p_z0[0]) - (p_y3[0] + p_y0[0]) * (p_z0[0] + p_z1[0]) +
        (p_y3[0] + p_y7[0]) * (p_z6[0] + p_z7[0]) - (p_y6[0] + p_y7[0]) * (p_z3[0] + p_z7[0]) -
        (p_y1[0] + p_y5[0]) * (p_z6[0] + p_z5[0]) + (p_y6[0] + p_y5[0]) * (p_z1[0] + p_z5[0]);
        p_dvdy[2] =
        - (p_x0[0] + p_x1[0]) * (p_z3[0] + p_z0[0]) + (p_x3[0] + p_x0[0]) * (p_z0[0] + p_z1[0]) -
        (p_x3[0] + p_x7[0]) * (p_z6[0] + p_z7[0]) + (p_x6[0] + p_x7[0]) * (p_z3[0] + p_z7[0]) +
        (p_x1[0] + p_x5[0]) * (p_z6[0] + p_z5[0]) - (p_x6[0] + p_x5[0]) * (p_z1[0] + p_z5[0]);

        p_dvdz[2] =
        - (p_y0[0] + p_y1[0]) * (p_x3[0] + p_x0[0]) + (p_y3[0] + p_y0[0]) * (p_x0[0] + p_x1[0]) -
        (p_y3[0] + p_y7[0]) * (p_x6[0] + p_x7[0]) + (p_y6[0] + p_y7[0]) * (p_x3[0] + p_x7[0]) +
        (p_y1[0] + p_y5[0]) * (p_x6[0] + p_x5[0]) - (p_y6[0] + p_y5[0]) * (p_x1[0] + p_x5[0]);

        p_dvdx[2] *= m_twelfth;
        p_dvdy[2] *= m_twelfth;
        p_dvdz[2] *= m_twelfth;

        // VoluDert(p_x2[0], p_x3[0], p_x0[0], p_x5[0], p_x6[0], p_x4[0],
        //         p_y2[0], p_y3[0], p_y0[0], p_y5[0], p_y6[0], p_y4[0],
        //         p_z2[0], p_z3[0], p_z0[0], p_z5[0], p_z6[0], p_z4[0],
        //         &p_dvdx[1], &p_dvdy[1], &p_dvdz[1]);
        p_dvdx[1] =
        (p_y3[0] + p_y0[0]) * (p_z2[0] + p_z3[0]) - (p_y2[0] + p_y3[0]) * (p_z3[0] + p_z0[0]) +
        (p_y2[0] + p_y6[0]) * (p_z5[0] + p_z6[0]) - (p_y5[0] + p_y6[0]) * (p_z2[0] + p_z6[0]) -
        (p_y0[0] + p_y4[0]) * (p_z5[0] + p_z4[0]) + (p_y5[0] + p_y4[0]) * (p_z0[0] + p_z4[0]);
        p_dvdy[1] =
        - (p_x3[0] + p_x0[0]) * (p_z2[0] + p_z3[0]) + (p_x2[0] + p_x3[0]) * (p_z3[0] + p_z0[0]) -
        (p_x2[0] + p_x6[0]) * (p_z5[0] + p_z6[0]) + (p_x5[0] + p_x6[0]) * (p_z2[0] + p_z6[0]) +
        (p_x0[0] + p_x4[0]) * (p_z5[0] + p_z4[0]) - (p_x5[0] + p_x4[0]) * (p_z0[0] + p_z4[0]);
        p_dvdz[1] =
        - (p_y3[0] + p_y0[0]) * (p_x2[0] + p_x3[0]) + (p_y2[0] + p_y3[0]) * (p_x3[0] + p_x0[0]) -
        (p_y2[0] + p_y6[0]) * (p_x5[0] + p_x6[0]) + (p_y5[0] + p_y6[0]) * (p_x2[0] + p_x6[0]) +
        (p_y0[0] + p_y4[0]) * (p_x5[0] + p_x4[0]) - (p_y5[0] + p_y4[0]) * (p_x0[0] + p_x4[0]);

        p_dvdx[1] *= m_twelfth;
        p_dvdy[1] *= m_twelfth;
        p_dvdz[1] *= m_twelfth;

        // VoluDert(p_x7[0], p_x6[0], p_x5[0], p_x0[0], p_x3[0], p_x1[0],
        //         p_y7[0], p_y6[0], p_y5[0], p_y0[0], p_y3[0], p_y1[0],
        //         p_z7[0], p_z6[0], p_z5[0], p_z0[0], p_z3[0], p_z1[0],
        //         &p_dvdx[4], &p_dvdy[4], &p_dvdz[4]);
        p_dvdx[4] =
        (p_y6[0] + p_y5[0]) * (p_z7[0] + p_z6[0]) - (p_y7[0] + p_y6[0]) * (p_z6[0] + p_z5[0]) +
        (p_y7[0] + p_y3[0]) * (p_z0[0] + p_z3[0]) - (p_y0[0] + p_y3[0]) * (p_z7[0] + p_z3[0]) -
        (p_y5[0] + p_y1[0]) * (p_z0[0] + p_z1[0]) + (p_y0[0] + p_y1[0]) * (p_z5[0] + p_z1[0]);
        p_dvdy[4] =
        - (p_x6[0] + p_x5[0]) * (p_z7[0] + p_z6[0]) + (p_x7[0] + p_x6[0]) * (p_z6[0] + p_z5[0]) -
        (p_x7[0] + p_x3[0]) * (p_z0[0] + p_z3[0]) + (p_x0[0] + p_x3[0]) * (p_z7[0] + p_z3[0]) +
        (p_x5[0] + p_x1[0]) * (p_z0[0] + p_z1[0]) - (p_x0[0] + p_x1[0]) * (p_z5[0] + p_z1[0]);

        p_dvdz[4] =
        - (p_y6[0] + p_y5[0]) * (p_x7[0] + p_x6[0]) + (p_y7[0] + p_y6[0]) * (p_x6[0] + p_x5[0]) -
        (p_y7[0] + p_y3[0]) * (p_x0[0] + p_x3[0]) + (p_y0[0] + p_y3[0]) * (p_x7[0] + p_x3[0]) +
        (p_y5[0] + p_y1[0]) * (p_x0[0] + p_x1[0]) - (p_y0[0] + p_y1[0]) * (p_x5[0] + p_x1[0]);

        p_dvdx[4] *= m_twelfth;
        p_dvdy[4] *= m_twelfth;
        p_dvdz[4] *= m_twelfth;

        // VoluDert(p_x4[0], p_x7[0], p_x6[0], p_x1[0], p_x0[0], p_x2[0],
        //         p_y4[0], p_y7[0], p_y6[0], p_y1[0], p_y0[0], p_y2[0],
        //         p_z4[0], p_z7[0], p_z6[0], p_z1[0], p_z0[0], p_z2[0],
        //         &p_dvdx[5], &p_dvdy[5], &p_dvdz[5]);
        p_dvdx[5] =
        (p_y7[0] + p_y6[0]) * (p_z4[0] + p_z7[0]) - (p_y4[0] + p_y7[0]) * (p_z7[0] + p_z6[0]) +
        (p_y4[0] + p_y0[0]) * (p_z1[0] + p_z0[0]) - (p_y1[0] + p_y0[0]) * (p_z4[0] + p_z0[0]) -
        (p_y6[0] + p_y2[0]) * (p_z1[0] + p_z2[0]) + (p_y1[0] + p_y2[0]) * (p_z6[0] + p_z2[0]);
        p_dvdy[5] =
        - (p_x7[0] + p_x6[0]) * (p_z4[0] + p_z7[0]) + (p_x4[0] + p_x7[0]) * (p_z7[0] + p_z6[0]) -
        (p_x4[0] + p_x0[0]) * (p_z1[0] + p_z0[0]) + (p_x1[0] + p_x0[0]) * (p_z4[0] + p_z0[0]) +
        (p_x6[0] + p_x2[0]) * (p_z1[0] + p_z2[0]) - (p_x1[0] + p_x2[0]) * (p_z6[0] + p_z2[0]);

        p_dvdz[5] =
        - (p_y7[0] + p_y6[0]) * (p_x4[0] + p_x7[0]) + (p_y4[0] + p_y7[0]) * (p_x7[0] + p_x6[0]) -
        (p_y4[0] + p_y0[0]) * (p_x1[0] + p_x0[0]) + (p_y1[0] + p_y0[0]) * (p_x4[0] + p_x0[0]) +
        (p_y6[0] + p_y2[0]) * (p_x1[0] + p_x2[0]) - (p_y1[0] + p_y2[0]) * (p_x6[0] + p_x2[0]);

        p_dvdx[5] *= m_twelfth;
        p_dvdy[5] *= m_twelfth;
        p_dvdz[5] *= m_twelfth;

        // VoluDert(p_x5[0], p_x4[0], p_x7[0], p_x2[0], p_x1[0], p_x3[0],
        //         p_y5[0], p_y4[0], p_y7[0], p_y2[0], p_y1[0], p_y3[0],
        //         p_z5[0], p_z4[0], p_z7[0], p_z2[0], p_z1[0], p_z3[0],
        //         &p_dvdx[6], &p_dvdy[6], &p_dvdz[6]);

        p_dvdx[6] =
        (p_y4[0] + p_y7[0]) * (p_z5[0] + p_z4[0]) - (p_y5[0] + p_y4[0]) * (p_z4[0] + p_z7[0]) +
        (p_y5[0] + p_y1[0]) * (p_z2[0] + p_z1[0]) - (p_y2[0] + p_y1[0]) * (p_z5[0] + p_z1[0]) -
        (p_y7[0] + p_y3[0]) * (p_z2[0] + p_z3[0]) + (p_y2[0] + p_y3[0]) * (p_z7[0] + p_z3[0]);
        p_dvdy[6] =
        - (p_x4[0] + p_x7[0]) * (p_z5[0] + p_z4[0]) + (p_x5[0] + p_x4[0]) * (p_z4[0] + p_z7[0]) -
        (p_x5[0] + p_x1[0]) * (p_z2[0] + p_z1[0]) + (p_x2[0] + p_x1[0]) * (p_z5[0] + p_z1[0]) +
        (p_x7[0] + p_x3[0]) * (p_z2[0] + p_z3[0]) - (p_x2[0] + p_x3[0]) * (p_z7[0] + p_z3[0]);

        p_dvdz[6] =
        - (p_y4[0] + p_y7[0]) * (p_x5[0] + p_x4[0]) + (p_y5[0] + p_y4[0]) * (p_x4[0] + p_x7[0]) -
        (p_y5[0] + p_y1[0]) * (p_x2[0] + p_x1[0]) + (p_y2[0] + p_y1[0]) * (p_x5[0] + p_x1[0]) +
        (p_y7[0] + p_y3[0]) * (p_x2[0] + p_x3[0]) - (p_y2[0] + p_y3[0]) * (p_x7[0] + p_x3[0]);
        p_dvdx[6] *= m_twelfth;
        p_dvdy[6] *= m_twelfth;
        p_dvdz[6] *= m_twelfth;

        // VoluDert(p_x6[0], p_x5[0], p_x4[0], p_x3[0], p_x2[0], p_x0[0],
        //         p_y6[0], p_y5[0], p_y4[0], p_y3[0], p_y2[0], p_y0[0],
        //         p_z6[0], p_z5[0], p_z4[0], p_z3[0], p_z2[0], p_z0[0],
        //         &p_dvdx[7], &p_dvdy[7], &p_dvdz[7]);
        p_dvdx[7] =
        (p_y5[0] + p_y4[0]) * (p_z6[0] + p_z5[0]) - (p_y6[0] + p_y5[0]) * (p_z5[0] + p_z4[0]) +
        (p_y6[0] + p_y2[0]) * (p_z3[0] + p_z2[0]) - (p_y3[0] + p_y2[0]) * (p_z6[0] + p_z2[0]) -
        (p_y4[0] + p_y0[0]) * (p_z3[0] + p_z0[0]) + (p_y3[0] + p_y0[0]) * (p_z4[0] + p_z0[0]);
        p_dvdy[7] =
        - (p_x5[0] + p_x4[0]) * (p_z6[0] + p_z5[0]) + (p_x6[0] + p_x5[0]) * (p_z5[0] + p_z4[0]) -
        (p_x6[0] + p_x2[0]) * (p_z3[0] + p_z2[0]) + (p_x3[0] + p_x2[0]) * (p_z6[0] + p_z2[0]) +
        (p_x4[0] + p_x0[0]) * (p_z3[0] + p_z0[0]) - (p_x3[0] + p_x0[0]) * (p_z4[0] + p_z0[0]);

        p_dvdz[7] =
        - (p_y5[0] + p_y4[0]) * (p_x6[0] + p_x5[0]) + (p_y6[0] + p_y5[0]) * (p_x5[0] + p_x4[0]) -
        (p_y6[0] + p_y2[0]) * (p_x3[0] + p_x2[0]) + (p_y3[0] + p_y2[0]) * (p_x6[0] + p_x2[0]) +
        (p_y4[0] + p_y0[0]) * (p_x3[0] + p_x0[0]) - (p_y3[0] + p_y0[0]) * (p_x4[0] + p_x0[0]);
        p_dvdx[7] *= m_twelfth;
        p_dvdy[7] *= m_twelfth;
        p_dvdz[7] *= m_twelfth;
                /* load into temporary storage for FB Hour Glass control */
        // for(int ii=0;ii<8;++ii){
        //         // int jj=8*i+ii;
        //         // p_dvdx[ii] = pfx[ii];
        //         // p_dvdy[ii] = pfy[ii];
        //         // p_dvdz[ii] = pfz[ii];
        //         p_x8n[ii]  = p_x[0]];
        //         p_y8n[ii]  = p_yi[0]];
        //         p_z8n[ii]  = p_zi[0]];
        //         // std::cout<< p_dvdx[ii] << "\n";
        // }
        p_x8n[0] = p_x0[0];
        p_y8n[0] = p_y0[0];
        p_z8n[0] = p_z0[0];

        p_x8n[1] = p_x1[0];
        p_y8n[1] = p_y1[0];
        p_z8n[1] = p_z1[0];

        p_x8n[2] = p_x2[0];
        p_y8n[2] = p_y2[0];
        p_z8n[2] = p_z2[0];

        p_x8n[3] = p_x3[0];
        p_y8n[3] = p_y3[0];
        p_z8n[3] = p_z3[0];

        p_x8n[4] = p_x4[0];
        p_y8n[4] = p_y4[0];
        p_z8n[4] = p_z4[0];

        p_x8n[5] = p_x5[0];
        p_y8n[5] = p_y5[0];
        p_z8n[5] = p_z5[0];

        p_x8n[6] = p_x6[0];
        p_y8n[6] = p_y6[0];
        p_z8n[6] = p_z6[0];

        p_x8n[7] = p_x7[0];
        p_y8n[7] = p_y7[0];
        p_z8n[7] = p_z7[0];

        p_determ[0] = p_volo[0] * p_v[0];

        if(p_v[0] <= 0.0){
                // exit(-1); // Volume Error
        }
}
#ifdef VECTORIZE
//user function -- modified for vectorisation
#if defined __clang__ || defined __GNUC__
__attribute__((always_inline))
#endif
inline void CalcVolumeDerivatives_vec( const double p_x0[][SIMD_VEC], const double p_x1[][SIMD_VEC], const double p_x2[][SIMD_VEC], const double p_x3[][SIMD_VEC], const double p_x4[][SIMD_VEC], const double p_x5[][SIMD_VEC], const double p_x6[][SIMD_VEC], const double p_x7[][SIMD_VEC], const double p_y0[][SIMD_VEC], const double p_y1[][SIMD_VEC], const double p_y2[][SIMD_VEC], const double p_y3[][SIMD_VEC], const double p_y4[][SIMD_VEC], const double p_y5[][SIMD_VEC], const double p_y6[][SIMD_VEC], const double p_y7[][SIMD_VEC], const double p_z0[][SIMD_VEC], const double p_z1[][SIMD_VEC], const double p_z2[][SIMD_VEC], const double p_z3[][SIMD_VEC], const double p_z4[][SIMD_VEC], const double p_z5[][SIMD_VEC], const double p_z6[][SIMD_VEC], const double p_z7[][SIMD_VEC], double p_dvdx[][SIMD_VEC], double p_dvdy[][SIMD_VEC], double p_dvdz[][SIMD_VEC], double p_x8n[][SIMD_VEC], double p_y8n[][SIMD_VEC], double p_z8n[][SIMD_VEC], const double p_v[][SIMD_VEC], double p_determ[][SIMD_VEC], const double p_volo[][SIMD_VEC], int idx ) {







        p_dvdx[0][idx] =
        (p_y2[0][idx] + p_y3[0][idx]) * (p_z1[0][idx] + p_z2[0][idx]) - (p_y1[0][idx] + p_y2[0][idx]) * (p_z2[0][idx] + p_z3[0][idx]) +
        (p_y1[0][idx] + p_y5[0][idx]) * (p_z4[0][idx] + p_z5[0][idx]) - (p_y4[0][idx] + p_y5[0][idx]) * (p_z1[0][idx] + p_z5[0][idx]) -
        (p_y3[0][idx] + p_y7[0][idx]) * (p_z4[0][idx] + p_z7[0][idx]) + (p_y4[0][idx] + p_y7[0][idx]) * (p_z3[0][idx] + p_z7[0][idx]);
        p_dvdy[0][idx] =
        - (p_x2[0][idx] + p_x3[0][idx]) * (p_z1[0][idx] + p_z2[0][idx]) + (p_x1[0][idx] + p_x2[0][idx]) * (p_z2[0][idx] + p_z3[0][idx]) -
        (p_x1[0][idx] + p_x5[0][idx]) * (p_z4[0][idx] + p_z5[0][idx]) + (p_x4[0][idx] + p_x5[0][idx]) * (p_z1[0][idx] + p_z5[0][idx]) +
        (p_x3[0][idx] + p_x7[0][idx]) * (p_z4[0][idx] + p_z7[0][idx]) - (p_x4[0][idx] + p_x7[0][idx]) * (p_z3[0][idx] + p_z7[0][idx]);

        p_dvdz[0][idx] =
        - (p_y2[0][idx] + p_y3[0][idx]) * (p_x1[0][idx] + p_x2[0][idx]) + (p_y1[0][idx] + p_y2[0][idx]) * (p_x2[0][idx] + p_x3[0][idx]) -
        (p_y1[0][idx] + p_y5[0][idx]) * (p_x4[0][idx] + p_x5[0][idx]) + (p_y4[0][idx] + p_y5[0][idx]) * (p_x1[0][idx] + p_x5[0][idx]) +
        (p_y3[0][idx] + p_y7[0][idx]) * (p_x4[0][idx] + p_x7[0][idx]) - (p_y4[0][idx] + p_y7[0][idx]) * (p_x3[0][idx] + p_x7[0][idx]);

        p_dvdx[0][idx] *= m_twelfth;
        p_dvdy[0][idx] *= m_twelfth;
        p_dvdz[0][idx] *= m_twelfth;





        p_dvdx[3][idx] =
        (p_y1[0][idx] + p_y2[0][idx]) * (p_z0[0][idx] + p_z1[0][idx]) - (p_y0[0][idx] + p_y1[0][idx]) * (p_z1[0][idx] + p_z2[0][idx]) +
        (p_y0[0][idx] + p_y4[0][idx]) * (p_z7[0][idx] + p_z4[0][idx]) - (p_y7[0][idx] + p_y4[0][idx]) * (p_z0[0][idx] + p_z4[0][idx]) -
        (p_y2[0][idx] + p_y6[0][idx]) * (p_z7[0][idx] + p_z6[0][idx]) + (p_y7[0][idx] + p_y6[0][idx]) * (p_z2[0][idx] + p_z6[0][idx]);
        p_dvdy[3][idx] =
        - (p_x1[0][idx] + p_x2[0][idx]) * (p_z0[0][idx] + p_z1[0][idx]) + (p_x0[0][idx] + p_x1[0][idx]) * (p_z1[0][idx] + p_z2[0][idx]) -
        (p_x0[0][idx] + p_x4[0][idx]) * (p_z7[0][idx] + p_z4[0][idx]) + (p_x7[0][idx] + p_x4[0][idx]) * (p_z0[0][idx] + p_z4[0][idx]) +
        (p_x2[0][idx] + p_x6[0][idx]) * (p_z7[0][idx] + p_z6[0][idx]) - (p_x7[0][idx] + p_x6[0][idx]) * (p_z2[0][idx] + p_z6[0][idx]);
        p_dvdz[3][idx] =
        - (p_y1[0][idx] + p_y2[0][idx]) * (p_x0[0][idx] + p_x1[0][idx]) + (p_y0[0][idx] + p_y1[0][idx]) * (p_x1[0][idx] + p_x2[0][idx]) -
        (p_y0[0][idx] + p_y4[0][idx]) * (p_x7[0][idx] + p_x4[0][idx]) + (p_y7[0][idx] + p_y4[0][idx]) * (p_x0[0][idx] + p_x4[0][idx]) +
        (p_y2[0][idx] + p_y6[0][idx]) * (p_x7[0][idx] + p_x6[0][idx]) - (p_y7[0][idx] + p_y6[0][idx]) * (p_x2[0][idx] + p_x6[0][idx]);

        p_dvdx[3][idx] *= m_twelfth;
        p_dvdy[3][idx] *= m_twelfth;
        p_dvdz[3][idx] *= m_twelfth;





        p_dvdx[2][idx] =
        (p_y0[0][idx] + p_y1[0][idx]) * (p_z3[0][idx] + p_z0[0][idx]) - (p_y3[0][idx] + p_y0[0][idx]) * (p_z0[0][idx] + p_z1[0][idx]) +
        (p_y3[0][idx] + p_y7[0][idx]) * (p_z6[0][idx] + p_z7[0][idx]) - (p_y6[0][idx] + p_y7[0][idx]) * (p_z3[0][idx] + p_z7[0][idx]) -
        (p_y1[0][idx] + p_y5[0][idx]) * (p_z6[0][idx] + p_z5[0][idx]) + (p_y6[0][idx] + p_y5[0][idx]) * (p_z1[0][idx] + p_z5[0][idx]);
        p_dvdy[2][idx] =
        - (p_x0[0][idx] + p_x1[0][idx]) * (p_z3[0][idx] + p_z0[0][idx]) + (p_x3[0][idx] + p_x0[0][idx]) * (p_z0[0][idx] + p_z1[0][idx]) -
        (p_x3[0][idx] + p_x7[0][idx]) * (p_z6[0][idx] + p_z7[0][idx]) + (p_x6[0][idx] + p_x7[0][idx]) * (p_z3[0][idx] + p_z7[0][idx]) +
        (p_x1[0][idx] + p_x5[0][idx]) * (p_z6[0][idx] + p_z5[0][idx]) - (p_x6[0][idx] + p_x5[0][idx]) * (p_z1[0][idx] + p_z5[0][idx]);

        p_dvdz[2][idx] =
        - (p_y0[0][idx] + p_y1[0][idx]) * (p_x3[0][idx] + p_x0[0][idx]) + (p_y3[0][idx] + p_y0[0][idx]) * (p_x0[0][idx] + p_x1[0][idx]) -
        (p_y3[0][idx] + p_y7[0][idx]) * (p_x6[0][idx] + p_x7[0][idx]) + (p_y6[0][idx] + p_y7[0][idx]) * (p_x3[0][idx] + p_x7[0][idx]) +
        (p_y1[0][idx] + p_y5[0][idx]) * (p_x6[0][idx] + p_x5[0][idx]) - (p_y6[0][idx] + p_y5[0][idx]) * (p_x1[0][idx] + p_x5[0][idx]);

        p_dvdx[2][idx] *= m_twelfth;
        p_dvdy[2][idx] *= m_twelfth;
        p_dvdz[2][idx] *= m_twelfth;




        p_dvdx[1][idx] =
        (p_y3[0][idx] + p_y0[0][idx]) * (p_z2[0][idx] + p_z3[0][idx]) - (p_y2[0][idx] + p_y3[0][idx]) * (p_z3[0][idx] + p_z0[0][idx]) +
        (p_y2[0][idx] + p_y6[0][idx]) * (p_z5[0][idx] + p_z6[0][idx]) - (p_y5[0][idx] + p_y6[0][idx]) * (p_z2[0][idx] + p_z6[0][idx]) -
        (p_y0[0][idx] + p_y4[0][idx]) * (p_z5[0][idx] + p_z4[0][idx]) + (p_y5[0][idx] + p_y4[0][idx]) * (p_z0[0][idx] + p_z4[0][idx]);
        p_dvdy[1][idx] =
        - (p_x3[0][idx] + p_x0[0][idx]) * (p_z2[0][idx] + p_z3[0][idx]) + (p_x2[0][idx] + p_x3[0][idx]) * (p_z3[0][idx] + p_z0[0][idx]) -
        (p_x2[0][idx] + p_x6[0][idx]) * (p_z5[0][idx] + p_z6[0][idx]) + (p_x5[0][idx] + p_x6[0][idx]) * (p_z2[0][idx] + p_z6[0][idx]) +
        (p_x0[0][idx] + p_x4[0][idx]) * (p_z5[0][idx] + p_z4[0][idx]) - (p_x5[0][idx] + p_x4[0][idx]) * (p_z0[0][idx] + p_z4[0][idx]);
        p_dvdz[1][idx] =
        - (p_y3[0][idx] + p_y0[0][idx]) * (p_x2[0][idx] + p_x3[0][idx]) + (p_y2[0][idx] + p_y3[0][idx]) * (p_x3[0][idx] + p_x0[0][idx]) -
        (p_y2[0][idx] + p_y6[0][idx]) * (p_x5[0][idx] + p_x6[0][idx]) + (p_y5[0][idx] + p_y6[0][idx]) * (p_x2[0][idx] + p_x6[0][idx]) +
        (p_y0[0][idx] + p_y4[0][idx]) * (p_x5[0][idx] + p_x4[0][idx]) - (p_y5[0][idx] + p_y4[0][idx]) * (p_x0[0][idx] + p_x4[0][idx]);

        p_dvdx[1][idx] *= m_twelfth;
        p_dvdy[1][idx] *= m_twelfth;
        p_dvdz[1][idx] *= m_twelfth;




        p_dvdx[4][idx] =
        (p_y6[0][idx] + p_y5[0][idx]) * (p_z7[0][idx] + p_z6[0][idx]) - (p_y7[0][idx] + p_y6[0][idx]) * (p_z6[0][idx] + p_z5[0][idx]) +
        (p_y7[0][idx] + p_y3[0][idx]) * (p_z0[0][idx] + p_z3[0][idx]) - (p_y0[0][idx] + p_y3[0][idx]) * (p_z7[0][idx] + p_z3[0][idx]) -
        (p_y5[0][idx] + p_y1[0][idx]) * (p_z0[0][idx] + p_z1[0][idx]) + (p_y0[0][idx] + p_y1[0][idx]) * (p_z5[0][idx] + p_z1[0][idx]);
        p_dvdy[4][idx] =
        - (p_x6[0][idx] + p_x5[0][idx]) * (p_z7[0][idx] + p_z6[0][idx]) + (p_x7[0][idx] + p_x6[0][idx]) * (p_z6[0][idx] + p_z5[0][idx]) -
        (p_x7[0][idx] + p_x3[0][idx]) * (p_z0[0][idx] + p_z3[0][idx]) + (p_x0[0][idx] + p_x3[0][idx]) * (p_z7[0][idx] + p_z3[0][idx]) +
        (p_x5[0][idx] + p_x1[0][idx]) * (p_z0[0][idx] + p_z1[0][idx]) - (p_x0[0][idx] + p_x1[0][idx]) * (p_z5[0][idx] + p_z1[0][idx]);

        p_dvdz[4][idx] =
        - (p_y6[0][idx] + p_y5[0][idx]) * (p_x7[0][idx] + p_x6[0][idx]) + (p_y7[0][idx] + p_y6[0][idx]) * (p_x6[0][idx] + p_x5[0][idx]) -
        (p_y7[0][idx] + p_y3[0][idx]) * (p_x0[0][idx] + p_x3[0][idx]) + (p_y0[0][idx] + p_y3[0][idx]) * (p_x7[0][idx] + p_x3[0][idx]) +
        (p_y5[0][idx] + p_y1[0][idx]) * (p_x0[0][idx] + p_x1[0][idx]) - (p_y0[0][idx] + p_y1[0][idx]) * (p_x5[0][idx] + p_x1[0][idx]);

        p_dvdx[4][idx] *= m_twelfth;
        p_dvdy[4][idx] *= m_twelfth;
        p_dvdz[4][idx] *= m_twelfth;




        p_dvdx[5][idx] =
        (p_y7[0][idx] + p_y6[0][idx]) * (p_z4[0][idx] + p_z7[0][idx]) - (p_y4[0][idx] + p_y7[0][idx]) * (p_z7[0][idx] + p_z6[0][idx]) +
        (p_y4[0][idx] + p_y0[0][idx]) * (p_z1[0][idx] + p_z0[0][idx]) - (p_y1[0][idx] + p_y0[0][idx]) * (p_z4[0][idx] + p_z0[0][idx]) -
        (p_y6[0][idx] + p_y2[0][idx]) * (p_z1[0][idx] + p_z2[0][idx]) + (p_y1[0][idx] + p_y2[0][idx]) * (p_z6[0][idx] + p_z2[0][idx]);
        p_dvdy[5][idx] =
        - (p_x7[0][idx] + p_x6[0][idx]) * (p_z4[0][idx] + p_z7[0][idx]) + (p_x4[0][idx] + p_x7[0][idx]) * (p_z7[0][idx] + p_z6[0][idx]) -
        (p_x4[0][idx] + p_x0[0][idx]) * (p_z1[0][idx] + p_z0[0][idx]) + (p_x1[0][idx] + p_x0[0][idx]) * (p_z4[0][idx] + p_z0[0][idx]) +
        (p_x6[0][idx] + p_x2[0][idx]) * (p_z1[0][idx] + p_z2[0][idx]) - (p_x1[0][idx] + p_x2[0][idx]) * (p_z6[0][idx] + p_z2[0][idx]);

        p_dvdz[5][idx] =
        - (p_y7[0][idx] + p_y6[0][idx]) * (p_x4[0][idx] + p_x7[0][idx]) + (p_y4[0][idx] + p_y7[0][idx]) * (p_x7[0][idx] + p_x6[0][idx]) -
        (p_y4[0][idx] + p_y0[0][idx]) * (p_x1[0][idx] + p_x0[0][idx]) + (p_y1[0][idx] + p_y0[0][idx]) * (p_x4[0][idx] + p_x0[0][idx]) +
        (p_y6[0][idx] + p_y2[0][idx]) * (p_x1[0][idx] + p_x2[0][idx]) - (p_y1[0][idx] + p_y2[0][idx]) * (p_x6[0][idx] + p_x2[0][idx]);

        p_dvdx[5][idx] *= m_twelfth;
        p_dvdy[5][idx] *= m_twelfth;
        p_dvdz[5][idx] *= m_twelfth;





        p_dvdx[6][idx] =
        (p_y4[0][idx] + p_y7[0][idx]) * (p_z5[0][idx] + p_z4[0][idx]) - (p_y5[0][idx] + p_y4[0][idx]) * (p_z4[0][idx] + p_z7[0][idx]) +
        (p_y5[0][idx] + p_y1[0][idx]) * (p_z2[0][idx] + p_z1[0][idx]) - (p_y2[0][idx] + p_y1[0][idx]) * (p_z5[0][idx] + p_z1[0][idx]) -
        (p_y7[0][idx] + p_y3[0][idx]) * (p_z2[0][idx] + p_z3[0][idx]) + (p_y2[0][idx] + p_y3[0][idx]) * (p_z7[0][idx] + p_z3[0][idx]);
        p_dvdy[6][idx] =
        - (p_x4[0][idx] + p_x7[0][idx]) * (p_z5[0][idx] + p_z4[0][idx]) + (p_x5[0][idx] + p_x4[0][idx]) * (p_z4[0][idx] + p_z7[0][idx]) -
        (p_x5[0][idx] + p_x1[0][idx]) * (p_z2[0][idx] + p_z1[0][idx]) + (p_x2[0][idx] + p_x1[0][idx]) * (p_z5[0][idx] + p_z1[0][idx]) +
        (p_x7[0][idx] + p_x3[0][idx]) * (p_z2[0][idx] + p_z3[0][idx]) - (p_x2[0][idx] + p_x3[0][idx]) * (p_z7[0][idx] + p_z3[0][idx]);

        p_dvdz[6][idx] =
        - (p_y4[0][idx] + p_y7[0][idx]) * (p_x5[0][idx] + p_x4[0][idx]) + (p_y5[0][idx] + p_y4[0][idx]) * (p_x4[0][idx] + p_x7[0][idx]) -
        (p_y5[0][idx] + p_y1[0][idx]) * (p_x2[0][idx] + p_x1[0][idx]) + (p_y2[0][idx] + p_y1[0][idx]) * (p_x5[0][idx] + p_x1[0][idx]) +
        (p_y7[0][idx] + p_y3[0][idx]) * (p_x2[0][idx] + p_x3[0][idx]) - (p_y2[0][idx] + p_y3[0][idx]) * (p_x7[0][idx] + p_x3[0][idx]);
        p_dvdx[6][idx] *= m_twelfth;
        p_dvdy[6][idx] *= m_twelfth;
        p_dvdz[6][idx] *= m_twelfth;




        p_dvdx[7][idx] =
        (p_y5[0][idx] + p_y4[0][idx]) * (p_z6[0][idx] + p_z5[0][idx]) - (p_y6[0][idx] + p_y5[0][idx]) * (p_z5[0][idx] + p_z4[0][idx]) +
        (p_y6[0][idx] + p_y2[0][idx]) * (p_z3[0][idx] + p_z2[0][idx]) - (p_y3[0][idx] + p_y2[0][idx]) * (p_z6[0][idx] + p_z2[0][idx]) -
        (p_y4[0][idx] + p_y0[0][idx]) * (p_z3[0][idx] + p_z0[0][idx]) + (p_y3[0][idx] + p_y0[0][idx]) * (p_z4[0][idx] + p_z0[0][idx]);
        p_dvdy[7][idx] =
        - (p_x5[0][idx] + p_x4[0][idx]) * (p_z6[0][idx] + p_z5[0][idx]) + (p_x6[0][idx] + p_x5[0][idx]) * (p_z5[0][idx] + p_z4[0][idx]) -
        (p_x6[0][idx] + p_x2[0][idx]) * (p_z3[0][idx] + p_z2[0][idx]) + (p_x3[0][idx] + p_x2[0][idx]) * (p_z6[0][idx] + p_z2[0][idx]) +
        (p_x4[0][idx] + p_x0[0][idx]) * (p_z3[0][idx] + p_z0[0][idx]) - (p_x3[0][idx] + p_x0[0][idx]) * (p_z4[0][idx] + p_z0[0][idx]);

        p_dvdz[7][idx] =
        - (p_y5[0][idx] + p_y4[0][idx]) * (p_x6[0][idx] + p_x5[0][idx]) + (p_y6[0][idx] + p_y5[0][idx]) * (p_x5[0][idx] + p_x4[0][idx]) -
        (p_y6[0][idx] + p_y2[0][idx]) * (p_x3[0][idx] + p_x2[0][idx]) + (p_y3[0][idx] + p_y2[0][idx]) * (p_x6[0][idx] + p_x2[0][idx]) +
        (p_y4[0][idx] + p_y0[0][idx]) * (p_x3[0][idx] + p_x0[0][idx]) - (p_y3[0][idx] + p_y0[0][idx]) * (p_x4[0][idx] + p_x0[0][idx]);
        p_dvdx[7][idx] *= m_twelfth;
        p_dvdy[7][idx] *= m_twelfth;
        p_dvdz[7][idx] *= m_twelfth;











        p_x8n[0][idx] = p_x0[0][idx];
        p_y8n[0][idx] = p_y0[0][idx];
        p_z8n[0][idx] = p_z0[0][idx];

        p_x8n[1][idx] = p_x1[0][idx];
        p_y8n[1][idx] = p_y1[0][idx];
        p_z8n[1][idx] = p_z1[0][idx];

        p_x8n[2][idx] = p_x2[0][idx];
        p_y8n[2][idx] = p_y2[0][idx];
        p_z8n[2][idx] = p_z2[0][idx];

        p_x8n[3][idx] = p_x3[0][idx];
        p_y8n[3][idx] = p_y3[0][idx];
        p_z8n[3][idx] = p_z3[0][idx];

        p_x8n[4][idx] = p_x4[0][idx];
        p_y8n[4][idx] = p_y4[0][idx];
        p_z8n[4][idx] = p_z4[0][idx];

        p_x8n[5][idx] = p_x5[0][idx];
        p_y8n[5][idx] = p_y5[0][idx];
        p_z8n[5][idx] = p_z5[0][idx];

        p_x8n[6][idx] = p_x6[0][idx];
        p_y8n[6][idx] = p_y6[0][idx];
        p_z8n[6][idx] = p_z6[0][idx];

        p_x8n[7][idx] = p_x7[0][idx];
        p_y8n[7][idx] = p_y7[0][idx];
        p_z8n[7][idx] = p_z7[0][idx];

        p_determ[0][idx] = p_volo[0][idx] * p_v[0][idx];

        if(p_v[0][idx] <= 0.0){

        }

}
#endif

// host stub function
void op_par_loop_CalcVolumeDerivatives(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32){

  int nargs = 33;
  op_arg args[33];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;
  //create aligned pointers for dats
  ALIGNED_double const double * __restrict__ ptr0 = (double *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr3 = (double *) arg3.data;
  DECLARE_PTR_ALIGNED(ptr3,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr4 = (double *) arg4.data;
  DECLARE_PTR_ALIGNED(ptr4,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr5 = (double *) arg5.data;
  DECLARE_PTR_ALIGNED(ptr5,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr6 = (double *) arg6.data;
  DECLARE_PTR_ALIGNED(ptr6,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr7 = (double *) arg7.data;
  DECLARE_PTR_ALIGNED(ptr7,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr8 = (double *) arg8.data;
  DECLARE_PTR_ALIGNED(ptr8,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr9 = (double *) arg9.data;
  DECLARE_PTR_ALIGNED(ptr9,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr10 = (double *) arg10.data;
  DECLARE_PTR_ALIGNED(ptr10,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr11 = (double *) arg11.data;
  DECLARE_PTR_ALIGNED(ptr11,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr12 = (double *) arg12.data;
  DECLARE_PTR_ALIGNED(ptr12,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr13 = (double *) arg13.data;
  DECLARE_PTR_ALIGNED(ptr13,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr14 = (double *) arg14.data;
  DECLARE_PTR_ALIGNED(ptr14,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr15 = (double *) arg15.data;
  DECLARE_PTR_ALIGNED(ptr15,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr16 = (double *) arg16.data;
  DECLARE_PTR_ALIGNED(ptr16,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr17 = (double *) arg17.data;
  DECLARE_PTR_ALIGNED(ptr17,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr18 = (double *) arg18.data;
  DECLARE_PTR_ALIGNED(ptr18,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr19 = (double *) arg19.data;
  DECLARE_PTR_ALIGNED(ptr19,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr20 = (double *) arg20.data;
  DECLARE_PTR_ALIGNED(ptr20,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr21 = (double *) arg21.data;
  DECLARE_PTR_ALIGNED(ptr21,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr22 = (double *) arg22.data;
  DECLARE_PTR_ALIGNED(ptr22,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr23 = (double *) arg23.data;
  DECLARE_PTR_ALIGNED(ptr23,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr24 = (double *) arg24.data;
  DECLARE_PTR_ALIGNED(ptr24,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr25 = (double *) arg25.data;
  DECLARE_PTR_ALIGNED(ptr25,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr26 = (double *) arg26.data;
  DECLARE_PTR_ALIGNED(ptr26,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr27 = (double *) arg27.data;
  DECLARE_PTR_ALIGNED(ptr27,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr28 = (double *) arg28.data;
  DECLARE_PTR_ALIGNED(ptr28,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr29 = (double *) arg29.data;
  DECLARE_PTR_ALIGNED(ptr29,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr30 = (double *) arg30.data;
  DECLARE_PTR_ALIGNED(ptr30,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr31 = (double *) arg31.data;
  DECLARE_PTR_ALIGNED(ptr31,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr32 = (double *) arg32.data;
  DECLARE_PTR_ALIGNED(ptr32,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: CalcVolumeDerivatives\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      if (n<set->core_size && n>0 && n % OP_mpi_test_frequency == 0)
        op_mpi_test_all(nargs,args);
      if ((n+SIMD_VEC >= set->core_size) && (n+SIMD_VEC-set->core_size < SIMD_VEC)) {
        op_mpi_wait_all(nargs, args);
      }
      ALIGNED_double double dat0[1][SIMD_VEC];
      ALIGNED_double double dat1[1][SIMD_VEC];
      ALIGNED_double double dat2[1][SIMD_VEC];
      ALIGNED_double double dat3[1][SIMD_VEC];
      ALIGNED_double double dat4[1][SIMD_VEC];
      ALIGNED_double double dat5[1][SIMD_VEC];
      ALIGNED_double double dat6[1][SIMD_VEC];
      ALIGNED_double double dat7[1][SIMD_VEC];
      ALIGNED_double double dat8[1][SIMD_VEC];
      ALIGNED_double double dat9[1][SIMD_VEC];
      ALIGNED_double double dat10[1][SIMD_VEC];
      ALIGNED_double double dat11[1][SIMD_VEC];
      ALIGNED_double double dat12[1][SIMD_VEC];
      ALIGNED_double double dat13[1][SIMD_VEC];
      ALIGNED_double double dat14[1][SIMD_VEC];
      ALIGNED_double double dat15[1][SIMD_VEC];
      ALIGNED_double double dat16[1][SIMD_VEC];
      ALIGNED_double double dat17[1][SIMD_VEC];
      ALIGNED_double double dat18[1][SIMD_VEC];
      ALIGNED_double double dat19[1][SIMD_VEC];
      ALIGNED_double double dat20[1][SIMD_VEC];
      ALIGNED_double double dat21[1][SIMD_VEC];
      ALIGNED_double double dat22[1][SIMD_VEC];
      ALIGNED_double double dat23[1][SIMD_VEC];
      ALIGNED_double double dat24[8][SIMD_VEC];
      ALIGNED_double double dat25[8][SIMD_VEC];
      ALIGNED_double double dat26[8][SIMD_VEC];
      ALIGNED_double double dat27[8][SIMD_VEC];
      ALIGNED_double double dat28[8][SIMD_VEC];
      ALIGNED_double double dat29[8][SIMD_VEC];
      ALIGNED_double double dat30[1][SIMD_VEC];
      ALIGNED_double double dat31[1][SIMD_VEC];
      ALIGNED_double double dat32[1][SIMD_VEC];
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx0_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 0];
        int idx1_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 1];
        int idx2_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 2];
        int idx3_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 3];
        int idx4_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 4];
        int idx5_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 5];
        int idx6_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 6];
        int idx7_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 7];
        int idx8_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 0];
        int idx9_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 1];
        int idx10_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 2];
        int idx11_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 3];
        int idx12_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 4];
        int idx13_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 5];
        int idx14_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 6];
        int idx15_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 7];
        int idx16_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 0];
        int idx17_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 1];
        int idx18_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 2];
        int idx19_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 3];
        int idx20_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 4];
        int idx21_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 5];
        int idx22_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 6];
        int idx23_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 7];
        int idx24_8 = 8 * (n+i);
        int idx25_8 = 8 * (n+i);
        int idx26_8 = 8 * (n+i);
        int idx27_8 = 8 * (n+i);
        int idx28_8 = 8 * (n+i);
        int idx29_8 = 8 * (n+i);
        int idx30_1 = 1 * (n+i);
        int idx31_1 = 1 * (n+i);
        int idx32_1 = 1 * (n+i);

        dat0[0][i] = (ptr0)[idx0_1 + 0];
        dat1[0][i] = (ptr1)[idx1_1 + 0];
        dat2[0][i] = (ptr2)[idx2_1 + 0];
        dat3[0][i] = (ptr3)[idx3_1 + 0];
        dat4[0][i] = (ptr4)[idx4_1 + 0];
        dat5[0][i] = (ptr5)[idx5_1 + 0];
        dat6[0][i] = (ptr6)[idx6_1 + 0];
        dat7[0][i] = (ptr7)[idx7_1 + 0];
        dat8[0][i] = (ptr8)[idx8_1 + 0];
        dat9[0][i] = (ptr9)[idx9_1 + 0];
        dat10[0][i] = (ptr10)[idx10_1 + 0];
        dat11[0][i] = (ptr11)[idx11_1 + 0];
        dat12[0][i] = (ptr12)[idx12_1 + 0];
        dat13[0][i] = (ptr13)[idx13_1 + 0];
        dat14[0][i] = (ptr14)[idx14_1 + 0];
        dat15[0][i] = (ptr15)[idx15_1 + 0];
        dat16[0][i] = (ptr16)[idx16_1 + 0];
        dat17[0][i] = (ptr17)[idx17_1 + 0];
        dat18[0][i] = (ptr18)[idx18_1 + 0];
        dat19[0][i] = (ptr19)[idx19_1 + 0];
        dat20[0][i] = (ptr20)[idx20_1 + 0];
        dat21[0][i] = (ptr21)[idx21_1 + 0];
        dat22[0][i] = (ptr22)[idx22_1 + 0];
        dat23[0][i] = (ptr23)[idx23_1 + 0];
        dat30[0][i] = (ptr30)[idx30_1 + 0];
        dat32[0][i] = (ptr32)[idx32_1 + 0];
      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        CalcVolumeDerivatives_vec(
          dat0,
          dat1,
          dat2,
          dat3,
          dat4,
          dat5,
          dat6,
          dat7,
          dat8,
          dat9,
          dat10,
          dat11,
          dat12,
          dat13,
          dat14,
          dat15,
          dat16,
          dat17,
          dat18,
          dat19,
          dat20,
          dat21,
          dat22,
          dat23,
          dat24,
          dat25,
          dat26,
          dat27,
          dat28,
          dat29,
          dat30,
          dat31,
          dat32,
          i);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx24_8 = 8 * (n+i);
        int idx25_8 = 8 * (n+i);
        int idx26_8 = 8 * (n+i);
        int idx27_8 = 8 * (n+i);
        int idx28_8 = 8 * (n+i);
        int idx29_8 = 8 * (n+i);
        int idx31_1 = 1 * (n+i);

        (ptr24)[idx24_8 + 0] = dat24[0][i];
        (ptr24)[idx24_8 + 1] = dat24[1][i];
        (ptr24)[idx24_8 + 2] = dat24[2][i];
        (ptr24)[idx24_8 + 3] = dat24[3][i];
        (ptr24)[idx24_8 + 4] = dat24[4][i];
        (ptr24)[idx24_8 + 5] = dat24[5][i];
        (ptr24)[idx24_8 + 6] = dat24[6][i];
        (ptr24)[idx24_8 + 7] = dat24[7][i];

        (ptr25)[idx25_8 + 0] = dat25[0][i];
        (ptr25)[idx25_8 + 1] = dat25[1][i];
        (ptr25)[idx25_8 + 2] = dat25[2][i];
        (ptr25)[idx25_8 + 3] = dat25[3][i];
        (ptr25)[idx25_8 + 4] = dat25[4][i];
        (ptr25)[idx25_8 + 5] = dat25[5][i];
        (ptr25)[idx25_8 + 6] = dat25[6][i];
        (ptr25)[idx25_8 + 7] = dat25[7][i];

        (ptr26)[idx26_8 + 0] = dat26[0][i];
        (ptr26)[idx26_8 + 1] = dat26[1][i];
        (ptr26)[idx26_8 + 2] = dat26[2][i];
        (ptr26)[idx26_8 + 3] = dat26[3][i];
        (ptr26)[idx26_8 + 4] = dat26[4][i];
        (ptr26)[idx26_8 + 5] = dat26[5][i];
        (ptr26)[idx26_8 + 6] = dat26[6][i];
        (ptr26)[idx26_8 + 7] = dat26[7][i];

        (ptr27)[idx27_8 + 0] = dat27[0][i];
        (ptr27)[idx27_8 + 1] = dat27[1][i];
        (ptr27)[idx27_8 + 2] = dat27[2][i];
        (ptr27)[idx27_8 + 3] = dat27[3][i];
        (ptr27)[idx27_8 + 4] = dat27[4][i];
        (ptr27)[idx27_8 + 5] = dat27[5][i];
        (ptr27)[idx27_8 + 6] = dat27[6][i];
        (ptr27)[idx27_8 + 7] = dat27[7][i];

        (ptr28)[idx28_8 + 0] = dat28[0][i];
        (ptr28)[idx28_8 + 1] = dat28[1][i];
        (ptr28)[idx28_8 + 2] = dat28[2][i];
        (ptr28)[idx28_8 + 3] = dat28[3][i];
        (ptr28)[idx28_8 + 4] = dat28[4][i];
        (ptr28)[idx28_8 + 5] = dat28[5][i];
        (ptr28)[idx28_8 + 6] = dat28[6][i];
        (ptr28)[idx28_8 + 7] = dat28[7][i];

        (ptr29)[idx29_8 + 0] = dat29[0][i];
        (ptr29)[idx29_8 + 1] = dat29[1][i];
        (ptr29)[idx29_8 + 2] = dat29[2][i];
        (ptr29)[idx29_8 + 3] = dat29[3][i];
        (ptr29)[idx29_8 + 4] = dat29[4][i];
        (ptr29)[idx29_8 + 5] = dat29[5][i];
        (ptr29)[idx29_8 + 6] = dat29[6][i];
        (ptr29)[idx29_8 + 7] = dat29[7][i];

        (ptr31)[idx31_1 + 0] = dat31[0][i];

      }
    }

    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map0idx;
      int map1idx;
      int map2idx;
      int map3idx;
      int map4idx;
      int map5idx;
      int map6idx;
      int map7idx;
      map0idx = arg0.map_data[n * arg0.map->dim + 0];
      map1idx = arg0.map_data[n * arg0.map->dim + 1];
      map2idx = arg0.map_data[n * arg0.map->dim + 2];
      map3idx = arg0.map_data[n * arg0.map->dim + 3];
      map4idx = arg0.map_data[n * arg0.map->dim + 4];
      map5idx = arg0.map_data[n * arg0.map->dim + 5];
      map6idx = arg0.map_data[n * arg0.map->dim + 6];
      map7idx = arg0.map_data[n * arg0.map->dim + 7];

      CalcVolumeDerivatives(
        &(ptr0)[1 * map0idx],
        &(ptr1)[1 * map1idx],
        &(ptr2)[1 * map2idx],
        &(ptr3)[1 * map3idx],
        &(ptr4)[1 * map4idx],
        &(ptr5)[1 * map5idx],
        &(ptr6)[1 * map6idx],
        &(ptr7)[1 * map7idx],
        &(ptr8)[1 * map0idx],
        &(ptr9)[1 * map1idx],
        &(ptr10)[1 * map2idx],
        &(ptr11)[1 * map3idx],
        &(ptr12)[1 * map4idx],
        &(ptr13)[1 * map5idx],
        &(ptr14)[1 * map6idx],
        &(ptr15)[1 * map7idx],
        &(ptr16)[1 * map0idx],
        &(ptr17)[1 * map1idx],
        &(ptr18)[1 * map2idx],
        &(ptr19)[1 * map3idx],
        &(ptr20)[1 * map4idx],
        &(ptr21)[1 * map5idx],
        &(ptr22)[1 * map6idx],
        &(ptr23)[1 * map7idx],
        &(ptr24)[8 * n],
        &(ptr25)[8 * n],
        &(ptr26)[8 * n],
        &(ptr27)[8 * n],
        &(ptr28)[8 * n],
        &(ptr29)[8 * n],
        &(ptr30)[1 * n],
        &(ptr31)[1 * n],
        &(ptr32)[1 * n]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
  OP_kernels[3].transfer += (float)set->size * arg0.size;
  OP_kernels[3].transfer += (float)set->size * arg8.size;
  OP_kernels[3].transfer += (float)set->size * arg16.size;
  OP_kernels[3].transfer += (float)set->size * arg24.size;
  OP_kernels[3].transfer += (float)set->size * arg25.size;
  OP_kernels[3].transfer += (float)set->size * arg26.size;
  OP_kernels[3].transfer += (float)set->size * arg27.size;
  OP_kernels[3].transfer += (float)set->size * arg28.size;
  OP_kernels[3].transfer += (float)set->size * arg29.size;
  OP_kernels[3].transfer += (float)set->size * arg30.size;
  OP_kernels[3].transfer += (float)set->size * arg31.size;
  OP_kernels[3].transfer += (float)set->size * arg32.size;
  OP_kernels[3].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
