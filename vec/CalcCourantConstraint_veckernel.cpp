//
// auto-generated by op2.py
//

//user function
inline void CalcCourantConstraint(const double *ss, const double *vdov, const double *arealg, double *dtcourant){
    
    double dtf = ss[0] * ss[0];

    if ( vdov[0] < double(0.) ) {

        dtf = dtf
            + m_qqc2 * arealg[0] * arealg[0]
            * vdov[0] * vdov[0] ;
    }

    dtf = sqrt(dtf) ;

    dtf = arealg[0] / dtf ;

/* determine minimum timestep with its corresponding elem */
    if (vdov[0] != double(0.)) {
        if ( dtf < (*dtcourant) ) {
        (*dtcourant) = dtf ;
        // courant_elem = indx ;
        }
    }
}

// host stub function
void op_par_loop_CalcCourantConstraint(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  int nargs = 4;
  op_arg args[4];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  //create aligned pointers for dats
  ALIGNED_double const double * __restrict__ ptr0 = (double *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(38);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  CalcCourantConstraint");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      double dat3[SIMD_VEC];
      for ( int i=0; i<SIMD_VEC; i++ ){
        dat3[i] = INFINITY;
      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        CalcCourantConstraint(
          &(ptr0)[1 * (n+i)],
          &(ptr1)[1 * (n+i)],
          &(ptr2)[1 * (n+i)],
          &dat3[i]);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        *(double*)arg3.data = MIN(*(double*)arg3.data,dat3[i]);
      }
    }
    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      CalcCourantConstraint(
        &(ptr0)[1*n],
        &(ptr1)[1*n],
        &(ptr2)[1*n],
        (double*)arg3.data);
    }
  }

  // combine reduction data
  op_mpi_reduce(&arg3,(double*)arg3.data);
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[38].name      = name;
  OP_kernels[38].count    += 1;
  OP_kernels[38].time     += wall_t2 - wall_t1;
  OP_kernels[38].transfer += (float)set->size * arg0.size;
  OP_kernels[38].transfer += (float)set->size * arg1.size;
  OP_kernels[38].transfer += (float)set->size * arg2.size;
}
