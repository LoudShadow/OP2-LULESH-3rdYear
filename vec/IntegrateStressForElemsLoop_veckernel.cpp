//
// auto-generated by op2.py
//

//user function

inline void IntegrateStressForElemsLoop(
                                        const double *p_x0, const double *p_x1, const double *p_x2, const double *p_x3, const double *p_x4, const double *p_x5, const double *p_x6, const double *p_x7,
                                        const double *p_y0, const double *p_y1, const double *p_y2, const double *p_y3, const double *p_y4, const double *p_y5, const double *p_y6, const double *p_y7,
                                        const double *p_z0, const double *p_z1, const double *p_z2, const double *p_z3, const double *p_z4, const double *p_z5, const double *p_z6, const double *p_z7,
                                        double *p_fx0, double *p_fx1, double *p_fx2, double *p_fx3, double *p_fx4, double *p_fx5, double *p_fx6, double *p_fx7,
                                        double *p_fy0, double *p_fy1, double *p_fy2, double *p_fy3, double *p_fy4, double *p_fy5, double *p_fy6, double *p_fy7,
                                        double *p_fz0, double *p_fz1, double *p_fz2, double *p_fz3, double *p_fz4, double *p_fz5, double *p_fz6, double *p_fz7,
                                        double *volume,
                                        const double *sigxx, const double *sigyy, const double *sigzz){
    double b[3][8] ;// shape function derivatives

    double fx_local[8] ;
    double fy_local[8] ;
    double fz_local[8] ;

    //CalcElemShapeFunctionDerivatives
    double fjxxi, fjxet, fjxze;
    double fjyxi, fjyet, fjyze;
    double fjzxi, fjzet, fjzze;
    double cjxxi, cjxet, cjxze;
    double cjyxi, cjyet, cjyze;
    double cjzxi, cjzet, cjzze;

    fjxxi = double(.125) * ( (p_x6[0]-p_x0[0]) + (p_x5[0]-p_x3[0]) - (p_x7[0]-p_x1[0]) - (p_x4[0]-p_x2[0]) );
    fjxet = double(.125) * ( (p_x6[0]-p_x0[0]) - (p_x5[0]-p_x3[0]) + (p_x7[0]-p_x1[0]) - (p_x4[0]-p_x2[0]) );
    fjxze = double(.125) * ( (p_x6[0]-p_x0[0]) + (p_x5[0]-p_x3[0]) + (p_x7[0]-p_x1[0]) + (p_x4[0]-p_x2[0]) );

    fjyxi = double(.125) * ( (p_y6[0]-p_y0[0]) + (p_y5[0]-p_y3[0]) - (p_y7[0]-p_y1[0]) - (p_y4[0]-p_y2[0]) );
    fjyet = double(.125) * ( (p_y6[0]-p_y0[0]) - (p_y5[0]-p_y3[0]) + (p_y7[0]-p_y1[0]) - (p_y4[0]-p_y2[0]) );
    fjyze = double(.125) * ( (p_y6[0]-p_y0[0]) + (p_y5[0]-p_y3[0]) + (p_y7[0]-p_y1[0]) + (p_y4[0]-p_y2[0]) );

    fjzxi = double(.125) * ( (p_z6[0]-p_z0[0]) + (p_z5[0]-p_z3[0]) - (p_z7[0]-p_z1[0]) - (p_z4[0]-p_z2[0]) );
    fjzet = double(.125) * ( (p_z6[0]-p_z0[0]) - (p_z5[0]-p_z3[0]) + (p_z7[0]-p_z1[0]) - (p_z4[0]-p_z2[0]) );
    fjzze = double(.125) * ( (p_z6[0]-p_z0[0]) + (p_z5[0]-p_z3[0]) + (p_z7[0]-p_z1[0]) + (p_z4[0]-p_z2[0]) );

    /* compute cofactors */
    cjxxi =    (fjyet * fjzze) - (fjzet * fjyze);
    cjxet =  - (fjyxi * fjzze) + (fjzxi * fjyze);
    cjxze =    (fjyxi * fjzet) - (fjzxi * fjyet);

    cjyxi =  - (fjxet * fjzze) + (fjzet * fjxze);
    cjyet =    (fjxxi * fjzze) - (fjzxi * fjxze);
    cjyze =  - (fjxxi * fjzet) + (fjzxi * fjxet);

    cjzxi =    (fjxet * fjyze) - (fjyet * fjxze);
    cjzet =  - (fjxxi * fjyze) + (fjyxi * fjxze);
    cjzze =    (fjxxi * fjyet) - (fjyxi * fjxet);

    /* calculate partials :
        this need only be done for l = 0,1,2,3   since , by symmetry ,
        (6,7,4,5) = - (0,1,2,3) .
    */
    b[0][0] =   -  cjxxi  -  cjxet  -  cjxze;
    b[0][1] =      cjxxi  -  cjxet  -  cjxze;
    b[0][2] =      cjxxi  +  cjxet  -  cjxze;
    b[0][3] =   -  cjxxi  +  cjxet  -  cjxze;
    b[0][4] = -b[0][2];
    b[0][5] = -b[0][3];
    b[0][6] = -b[0][0];
    b[0][7] = -b[0][1];

    b[1][0] =   -  cjyxi  -  cjyet  -  cjyze;
    b[1][1] =      cjyxi  -  cjyet  -  cjyze;
    b[1][2] =      cjyxi  +  cjyet  -  cjyze;
    b[1][3] =   -  cjyxi  +  cjyet  -  cjyze;
    b[1][4] = -b[1][2];
    b[1][5] = -b[1][3];
    b[1][6] = -b[1][0];
    b[1][7] = -b[1][1];

    b[2][0] =   -  cjzxi  -  cjzet  -  cjzze;
    b[2][1] =      cjzxi  -  cjzet  -  cjzze;
    b[2][2] =      cjzxi  +  cjzet  -  cjzze;
    b[2][3] =   -  cjzxi  +  cjzet  -  cjzze;
    b[2][4] = -b[2][2];
    b[2][5] = -b[2][3];
    b[2][6] = -b[2][0];
    b[2][7] = -b[2][1];

    /* calculate jacobian determinant (volume) */
    volume[0] = double(8.) * ( fjxet * cjxet + fjyet * cjyet + fjzet * cjzet);
    // std::cout << "Volume: " << *volume << "\n";

    for (int i = 0 ; i < 8 ; ++i) {
      b[0][i] = double(0.0);
      b[1][i] = double(0.0);
      b[2][i] = double(0.0);
    }

    //Start Sum ElemFace Normals
    double bisectX0, bisectY0, bisectZ0, bisectX1, bisectY1, bisectZ1;
    double areaX, areaY, areaZ;

    /* evaluate face one: nodes 0, 1, 2, 3 */
    // SumElemFaceNormalt(&b[0][0], &b[1][0], &b[2][0],
    //                 &b[0][1], &b[1][1], &b[2][1],
    //                 &b[0][2], &b[1][2], &b[2][2],
    //                 &b[0][3], &b[1][3], &b[2][3],
    //                 p_x0[0], p_y0[0], p_z0[0], p_x1[0], p_y1[0], p_z1[0],
    //                 p_x2[0], p_y2[0], p_z2[0], p_x3[0], p_y3[0], p_z3[0]);
    bisectX0 = double(0.5) * (p_x3[0] + p_x2[0] - p_x1[0] - p_x0[0]);
    bisectY0 = double(0.5) * (p_y3[0] + p_y2[0] - p_y1[0] - p_y0[0]);
    bisectZ0 = double(0.5) * (p_z3[0] + p_z2[0] - p_z1[0] - p_z0[0]);
    bisectX1 = double(0.5) * (p_x2[0] + p_x1[0] - p_x3[0] - p_x0[0]);
    bisectY1 = double(0.5) * (p_y2[0] + p_y1[0] - p_y3[0] - p_y0[0]);
    bisectZ1 = double(0.5) * (p_z2[0] + p_z1[0] - p_z3[0] - p_z0[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][0] += areaX;
    b[0][1] += areaX;
    b[0][2] += areaX;
    b[0][3] += areaX;

    b[1][0] += areaY;
    b[1][1] += areaY;
    b[1][2] += areaY;
    b[1][3] += areaY;

    b[2][0] += areaZ;
    b[2][1] += areaZ;
    b[2][2] += areaZ;
    b[2][3] += areaZ;
    /* evaluate face two: nodes 0, 4, 5, 1 */
    // SumElemFaceNormalt(&b[0][0], &b[1][0], &b[2][0],
    //                 &b[0][4], &b[1][4], &b[2][4],
    //                 &b[0][5], &b[1][5], &b[2][5],
    //                 &b[0][1], &b[1][1], &b[2][1],
    //                 p_x0[0], p_y0[0], p_z0[0], p_x4[0], p_y4[0], p_z4[0],
    //                 p_x5[0], p_y5[0], p_z5[0], p_x1[0], p_y1[0], p_z1[0]);
    bisectX0 = double(0.5) * (p_x1[0] + p_x5[0] - p_x4[0] - p_x0[0]);
    bisectY0 = double(0.5) * (p_y1[0] + p_y5[0] - p_y4[0] - p_y0[0]);
    bisectZ0 = double(0.5) * (p_z1[0] + p_z5[0] - p_z4[0] - p_z0[0]);
    bisectX1 = double(0.5) * (p_x5[0] + p_x4[0] - p_x1[0] - p_x0[0]);
    bisectY1 = double(0.5) * (p_y5[0] + p_y4[0] - p_y1[0] - p_y0[0]);
    bisectZ1 = double(0.5) * (p_z5[0] + p_z4[0] - p_z1[0] - p_z0[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][0] += areaX;
    b[0][4] += areaX;
    b[0][5] += areaX;
    b[0][1] += areaX;

    b[1][0] += areaY;
    b[1][4] += areaY;
    b[1][5] += areaY;
    b[1][1] += areaY;

    b[2][0] += areaZ;
    b[2][4] += areaZ;
    b[2][5] += areaZ;
    b[2][1] += areaZ;
    /* evaluate face three: nodes 1, 5, 6, 2 */
    // SumElemFaceNormalt(&b[0][1], &b[1][1], &b[2][1],
    //                 &b[0][5], &b[1][5], &b[2][5],
    //                 &b[0][6], &b[1][6], &b[2][6],
    //                 &b[0][2], &b[1][2], &b[2][2],
    //                 p_x1[0], p_y1[0], p_z1[0], p_x5[0], p_y5[0], p_z5[0],
    //                 p_x6[0], p_y6[0], p_z6[0], p_x2[0], p_y2[0], p_z2[0]);
    bisectX0 = double(0.5) * (p_x2[0] + p_x6[0] - p_x5[0] - p_x1[0]);
    bisectY0 = double(0.5) * (p_y2[0] + p_y6[0] - p_y5[0] - p_y1[0]);
    bisectZ0 = double(0.5) * (p_z2[0] + p_z6[0] - p_z5[0] - p_z1[0]);
    bisectX1 = double(0.5) * (p_x6[0] + p_x5[0] - p_x2[0] - p_x1[0]);
    bisectY1 = double(0.5) * (p_y6[0] + p_y5[0] - p_y2[0] - p_y1[0]);
    bisectZ1 = double(0.5) * (p_z6[0] + p_z5[0] - p_z2[0] - p_z1[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][1] += areaX;
    b[0][5] += areaX;
    b[0][6] += areaX;
    b[0][2] += areaX;

    b[1][1] += areaY;
    b[1][5] += areaY;
    b[1][6] += areaY;
    b[1][2] += areaY;

    b[2][1] += areaZ;
    b[2][5] += areaZ;
    b[2][6] += areaZ;
    b[2][2] += areaZ;
    /* evaluate face four: nodes 2, 6, 7, 3 */
    // SumElemFaceNormalt(&b[0][2], &b[1][2], &b[2][2],
    //                 &b[0][6], &b[1][6], &b[2][6],
    //                 &b[0][7], &b[1][7], &b[2][7],
    //                 &b[0][3], &b[1][3], &b[2][3],
    //                 p_x2[0], p_y2[0], p_z2[0], p_x6[0], p_y6[0], p_z6[0],
    //                 p_x7[0], p_y7[0], p_z7[0], p_x3[0], p_y3[0], p_z3[0]);
    bisectX0 = double(0.5) * (p_x3[0] + p_x7[0] - p_x6[0] - p_x2[0]);
    bisectY0 = double(0.5) * (p_y3[0] + p_y7[0] - p_y6[0] - p_y2[0]);
    bisectZ0 = double(0.5) * (p_z3[0] + p_z7[0] - p_z6[0] - p_z2[0]);
    bisectX1 = double(0.5) * (p_x7[0] + p_x6[0] - p_x3[0] - p_x2[0]);
    bisectY1 = double(0.5) * (p_y7[0] + p_y6[0] - p_y3[0] - p_y2[0]);
    bisectZ1 = double(0.5) * (p_z7[0] + p_z6[0] - p_z3[0] - p_z2[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][2] += areaX;
    b[0][6] += areaX;
    b[0][7] += areaX;
    b[0][3] += areaX;

    b[1][2] += areaY;
    b[1][6] += areaY;
    b[1][7] += areaY;
    b[1][3] += areaY;

    b[2][2] += areaZ;
    b[2][6] += areaZ;
    b[2][7] += areaZ;
    b[2][3] += areaZ;
    /* evaluate face five: nodes 3, 7, 4, 0 */
    // SumElemFaceNormalt(&b[0][3], &b[1][3], &b[2][3],
    //                 &b[0][7], &b[1][7], &b[2][7],
    //                 &b[0][4], &b[1][4], &b[2][4],
    //                 &b[0][0], &b[1][0], &b[2][0],
    //                 p_x3[0], p_y3[0], p_z3[0], p_x7[0], p_y7[0], p_z7[0],
    //                 p_x4[0], p_y4[0], p_z4[0], p_x0[0], p_y0[0], p_z0[0]);
    bisectX0 = double(0.5) * (p_x0[0] + p_x4[0] - p_x7[0] - p_x3[0]);
    bisectY0 = double(0.5) * (p_y0[0] + p_y4[0] - p_y7[0] - p_y3[0]);
    bisectZ0 = double(0.5) * (p_z0[0] + p_z4[0] - p_z7[0] - p_z3[0]);
    bisectX1 = double(0.5) * (p_x4[0] + p_x7[0] - p_x0[0] - p_x3[0]);
    bisectY1 = double(0.5) * (p_y4[0] + p_y7[0] - p_y0[0] - p_y3[0]);
    bisectZ1 = double(0.5) * (p_z4[0] + p_z7[0] - p_z0[0] - p_z3[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][3] += areaX;
    b[0][7] += areaX;
    b[0][4] += areaX;
    b[0][0] += areaX;

    b[1][3] += areaY;
    b[1][7] += areaY;
    b[1][4] += areaY;
    b[1][0] += areaY;

    b[2][3] += areaZ;
    b[2][7] += areaZ;
    b[2][4] += areaZ;
    b[2][0] += areaZ;
    /* evaluate face six: nodes 4, 7, 6, 5 */
    // SumElemFaceNormalt(&b[0][4], &b[1][4], &b[2][4],
    //                 &b[0][7], &b[1][7], &b[2][7],
    //                 &b[0][6], &b[1][6], &b[2][6],
    //                 &b[0][5], &b[1][5], &b[2][5],
    //                 p_x4[0], p_y4[0], p_z4[0], p_x7[0], p_y7[0], p_z7[0],
    //                 p_x6[0], p_y6[0], p_z6[0], p_x5[0], p_y5[0], p_z5[0]);
    bisectX0 = double(0.5) * (p_x5[0] + p_x6[0] - p_x7[0] - p_x4[0]);
    bisectY0 = double(0.5) * (p_y5[0] + p_y6[0] - p_y7[0] - p_y4[0]);
    bisectZ0 = double(0.5) * (p_z5[0] + p_z6[0] - p_z7[0] - p_z4[0]);
    bisectX1 = double(0.5) * (p_x6[0] + p_x7[0] - p_x5[0] - p_x4[0]);
    bisectY1 = double(0.5) * (p_y6[0] + p_y7[0] - p_y5[0] - p_y4[0]);
    bisectZ1 = double(0.5) * (p_z6[0] + p_z7[0] - p_z5[0] - p_z4[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][4] += areaX;
    b[0][7] += areaX;
    b[0][6] += areaX;
    b[0][5] += areaX;

    b[1][4] += areaY;
    b[1][7] += areaY;
    b[1][6] += areaY;
    b[1][5] += areaY;

    b[2][4] += areaZ;
    b[2][7] += areaZ;
    b[2][6] += areaZ;
    b[2][5] += areaZ;

    // for(int i = 0; i < 8; i++) {
    //     fx_local[i] = -( t_sigxx[0] * b[0][i] );
    //     fy_local[i] = -( t_sigxx[1] * b[1][i]  );
    //     fz_local[i] = -( t_sigxx[2] * b[2][i] );
    // }

    for(int i = 0; i < 8; i++) {
        fx_local[i] = -( sigxx[0] * b[0][i] );
        fy_local[i] = -( sigyy[0] * b[1][i]  );
        fz_local[i] = -( sigzz[0] * b[2][i] );
    }
    // for( int lnode=0 ; lnode<8 ; ++lnode ) {
    //     int gnode = elemToNode[lnode];
    //     //  domain.fx(gnode) += fx_local[lnode];
    //     //  domain.fy(gnode) += fy_local[lnode];
    //     //  domain.fz(gnode) += fz_local[lnode];
    //     m_fx[gnode] += x_local[lnode];
    //     m_fy[gnode] += y_local[lnode];
    //     m_fz[gnode] += z_local[lnode];
    //    }
    p_fx0[0] += fx_local[0];
    p_fx1[0] += fx_local[1];
    p_fx2[0] += fx_local[2];
    p_fx3[0] += fx_local[3];
    p_fx4[0] += fx_local[4];
    p_fx5[0] += fx_local[5];
    p_fx6[0] += fx_local[6];
    p_fx7[0] += fx_local[7];

    p_fy0[0] += fy_local[0];
    p_fy1[0] += fy_local[1];
    p_fy2[0] += fy_local[2];
    p_fy3[0] += fy_local[3];
    p_fy4[0] += fy_local[4];
    p_fy5[0] += fy_local[5];
    p_fy6[0] += fy_local[6];
    p_fy7[0] += fy_local[7];

    p_fz0[0] += fz_local[0];
    p_fz1[0] += fz_local[1];
    p_fz2[0] += fz_local[2];
    p_fz3[0] += fz_local[3];
    p_fz4[0] += fz_local[4];
    p_fz5[0] += fz_local[5];
    p_fz6[0] += fz_local[6];
    p_fz7[0] += fz_local[7];
}
#ifdef VECTORIZE
//user function -- modified for vectorisation
#if defined __clang__ || defined __GNUC__
__attribute__((always_inline))
#endif
inline void IntegrateStressForElemsLoop_vec( const double p_x0[][SIMD_VEC], const double p_x1[][SIMD_VEC], const double p_x2[][SIMD_VEC], const double p_x3[][SIMD_VEC], const double p_x4[][SIMD_VEC], const double p_x5[][SIMD_VEC], const double p_x6[][SIMD_VEC], const double p_x7[][SIMD_VEC], const double p_y0[][SIMD_VEC], const double p_y1[][SIMD_VEC], const double p_y2[][SIMD_VEC], const double p_y3[][SIMD_VEC], const double p_y4[][SIMD_VEC], const double p_y5[][SIMD_VEC], const double p_y6[][SIMD_VEC], const double p_y7[][SIMD_VEC], const double p_z0[][SIMD_VEC], const double p_z1[][SIMD_VEC], const double p_z2[][SIMD_VEC], const double p_z3[][SIMD_VEC], const double p_z4[][SIMD_VEC], const double p_z5[][SIMD_VEC], const double p_z6[][SIMD_VEC], const double p_z7[][SIMD_VEC], double p_fx0[][SIMD_VEC], double p_fx1[][SIMD_VEC], double p_fx2[][SIMD_VEC], double p_fx3[][SIMD_VEC], double p_fx4[][SIMD_VEC], double p_fx5[][SIMD_VEC], double p_fx6[][SIMD_VEC], double p_fx7[][SIMD_VEC], double p_fy0[][SIMD_VEC], double p_fy1[][SIMD_VEC], double p_fy2[][SIMD_VEC], double p_fy3[][SIMD_VEC], double p_fy4[][SIMD_VEC], double p_fy5[][SIMD_VEC], double p_fy6[][SIMD_VEC], double p_fy7[][SIMD_VEC], double p_fz0[][SIMD_VEC], double p_fz1[][SIMD_VEC], double p_fz2[][SIMD_VEC], double p_fz3[][SIMD_VEC], double p_fz4[][SIMD_VEC], double p_fz5[][SIMD_VEC], double p_fz6[][SIMD_VEC], double p_fz7[][SIMD_VEC], double volume[][SIMD_VEC], const double sigxx[][SIMD_VEC], const double sigyy[][SIMD_VEC], const double sigzz[][SIMD_VEC], int idx ) {
    double b[3][8] ;

    double fx_local[8] ;
    double fy_local[8] ;
    double fz_local[8] ;

    double fjxxi, fjxet, fjxze;
    double fjyxi, fjyet, fjyze;
    double fjzxi, fjzet, fjzze;
    double cjxxi, cjxet, cjxze;
    double cjyxi, cjyet, cjyze;
    double cjzxi, cjzet, cjzze;

    fjxxi = double(.125) * ( (p_x6[0][idx]-p_x0[0][idx]) + (p_x5[0][idx]-p_x3[0][idx]) - (p_x7[0][idx]-p_x1[0][idx]) - (p_x4[0][idx]-p_x2[0][idx]) );
    fjxet = double(.125) * ( (p_x6[0][idx]-p_x0[0][idx]) - (p_x5[0][idx]-p_x3[0][idx]) + (p_x7[0][idx]-p_x1[0][idx]) - (p_x4[0][idx]-p_x2[0][idx]) );
    fjxze = double(.125) * ( (p_x6[0][idx]-p_x0[0][idx]) + (p_x5[0][idx]-p_x3[0][idx]) + (p_x7[0][idx]-p_x1[0][idx]) + (p_x4[0][idx]-p_x2[0][idx]) );

    fjyxi = double(.125) * ( (p_y6[0][idx]-p_y0[0][idx]) + (p_y5[0][idx]-p_y3[0][idx]) - (p_y7[0][idx]-p_y1[0][idx]) - (p_y4[0][idx]-p_y2[0][idx]) );
    fjyet = double(.125) * ( (p_y6[0][idx]-p_y0[0][idx]) - (p_y5[0][idx]-p_y3[0][idx]) + (p_y7[0][idx]-p_y1[0][idx]) - (p_y4[0][idx]-p_y2[0][idx]) );
    fjyze = double(.125) * ( (p_y6[0][idx]-p_y0[0][idx]) + (p_y5[0][idx]-p_y3[0][idx]) + (p_y7[0][idx]-p_y1[0][idx]) + (p_y4[0][idx]-p_y2[0][idx]) );

    fjzxi = double(.125) * ( (p_z6[0][idx]-p_z0[0][idx]) + (p_z5[0][idx]-p_z3[0][idx]) - (p_z7[0][idx]-p_z1[0][idx]) - (p_z4[0][idx]-p_z2[0][idx]) );
    fjzet = double(.125) * ( (p_z6[0][idx]-p_z0[0][idx]) - (p_z5[0][idx]-p_z3[0][idx]) + (p_z7[0][idx]-p_z1[0][idx]) - (p_z4[0][idx]-p_z2[0][idx]) );
    fjzze = double(.125) * ( (p_z6[0][idx]-p_z0[0][idx]) + (p_z5[0][idx]-p_z3[0][idx]) + (p_z7[0][idx]-p_z1[0][idx]) + (p_z4[0][idx]-p_z2[0][idx]) );

    cjxxi =    (fjyet * fjzze) - (fjzet * fjyze);
    cjxet =  - (fjyxi * fjzze) + (fjzxi * fjyze);
    cjxze =    (fjyxi * fjzet) - (fjzxi * fjyet);

    cjyxi =  - (fjxet * fjzze) + (fjzet * fjxze);
    cjyet =    (fjxxi * fjzze) - (fjzxi * fjxze);
    cjyze =  - (fjxxi * fjzet) + (fjzxi * fjxet);

    cjzxi =    (fjxet * fjyze) - (fjyet * fjxze);
    cjzet =  - (fjxxi * fjyze) + (fjyxi * fjxze);
    cjzze =    (fjxxi * fjyet) - (fjyxi * fjxet);

    b[0][0] =   -  cjxxi  -  cjxet  -  cjxze;
    b[0][1] =      cjxxi  -  cjxet  -  cjxze;
    b[0][2] =      cjxxi  +  cjxet  -  cjxze;
    b[0][3] =   -  cjxxi  +  cjxet  -  cjxze;
    b[0][4] = -b[0][2];
    b[0][5] = -b[0][3];
    b[0][6] = -b[0][0];
    b[0][7] = -b[0][1];

    b[1][0] =   -  cjyxi  -  cjyet  -  cjyze;
    b[1][1] =      cjyxi  -  cjyet  -  cjyze;
    b[1][2] =      cjyxi  +  cjyet  -  cjyze;
    b[1][3] =   -  cjyxi  +  cjyet  -  cjyze;
    b[1][4] = -b[1][2];
    b[1][5] = -b[1][3];
    b[1][6] = -b[1][0];
    b[1][7] = -b[1][1];

    b[2][0] =   -  cjzxi  -  cjzet  -  cjzze;
    b[2][1] =      cjzxi  -  cjzet  -  cjzze;
    b[2][2] =      cjzxi  +  cjzet  -  cjzze;
    b[2][3] =   -  cjzxi  +  cjzet  -  cjzze;
    b[2][4] = -b[2][2];
    b[2][5] = -b[2][3];
    b[2][6] = -b[2][0];
    b[2][7] = -b[2][1];

    volume[0][idx] = double(8.) * ( fjxet * cjxet + fjyet * cjyet + fjzet * cjzet);


    for (int i = 0 ; i < 8 ; ++i) {
      b[0][i] = double(0.0);
      b[1][i] = double(0.0);
      b[2][i] = double(0.0);
    }

    double bisectX0, bisectY0, bisectZ0, bisectX1, bisectY1, bisectZ1;
    double areaX, areaY, areaZ;







    bisectX0 = double(0.5) * (p_x3[0][idx] + p_x2[0][idx] - p_x1[0][idx] - p_x0[0][idx]);
    bisectY0 = double(0.5) * (p_y3[0][idx] + p_y2[0][idx] - p_y1[0][idx] - p_y0[0][idx]);
    bisectZ0 = double(0.5) * (p_z3[0][idx] + p_z2[0][idx] - p_z1[0][idx] - p_z0[0][idx]);
    bisectX1 = double(0.5) * (p_x2[0][idx] + p_x1[0][idx] - p_x3[0][idx] - p_x0[0][idx]);
    bisectY1 = double(0.5) * (p_y2[0][idx] + p_y1[0][idx] - p_y3[0][idx] - p_y0[0][idx]);
    bisectZ1 = double(0.5) * (p_z2[0][idx] + p_z1[0][idx] - p_z3[0][idx] - p_z0[0][idx]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][0] += areaX;
    b[0][1] += areaX;
    b[0][2] += areaX;
    b[0][3] += areaX;

    b[1][0] += areaY;
    b[1][1] += areaY;
    b[1][2] += areaY;
    b[1][3] += areaY;

    b[2][0] += areaZ;
    b[2][1] += areaZ;
    b[2][2] += areaZ;
    b[2][3] += areaZ;







    bisectX0 = double(0.5) * (p_x1[0][idx] + p_x5[0][idx] - p_x4[0][idx] - p_x0[0][idx]);
    bisectY0 = double(0.5) * (p_y1[0][idx] + p_y5[0][idx] - p_y4[0][idx] - p_y0[0][idx]);
    bisectZ0 = double(0.5) * (p_z1[0][idx] + p_z5[0][idx] - p_z4[0][idx] - p_z0[0][idx]);
    bisectX1 = double(0.5) * (p_x5[0][idx] + p_x4[0][idx] - p_x1[0][idx] - p_x0[0][idx]);
    bisectY1 = double(0.5) * (p_y5[0][idx] + p_y4[0][idx] - p_y1[0][idx] - p_y0[0][idx]);
    bisectZ1 = double(0.5) * (p_z5[0][idx] + p_z4[0][idx] - p_z1[0][idx] - p_z0[0][idx]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][0] += areaX;
    b[0][4] += areaX;
    b[0][5] += areaX;
    b[0][1] += areaX;

    b[1][0] += areaY;
    b[1][4] += areaY;
    b[1][5] += areaY;
    b[1][1] += areaY;

    b[2][0] += areaZ;
    b[2][4] += areaZ;
    b[2][5] += areaZ;
    b[2][1] += areaZ;







    bisectX0 = double(0.5) * (p_x2[0][idx] + p_x6[0][idx] - p_x5[0][idx] - p_x1[0][idx]);
    bisectY0 = double(0.5) * (p_y2[0][idx] + p_y6[0][idx] - p_y5[0][idx] - p_y1[0][idx]);
    bisectZ0 = double(0.5) * (p_z2[0][idx] + p_z6[0][idx] - p_z5[0][idx] - p_z1[0][idx]);
    bisectX1 = double(0.5) * (p_x6[0][idx] + p_x5[0][idx] - p_x2[0][idx] - p_x1[0][idx]);
    bisectY1 = double(0.5) * (p_y6[0][idx] + p_y5[0][idx] - p_y2[0][idx] - p_y1[0][idx]);
    bisectZ1 = double(0.5) * (p_z6[0][idx] + p_z5[0][idx] - p_z2[0][idx] - p_z1[0][idx]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][1] += areaX;
    b[0][5] += areaX;
    b[0][6] += areaX;
    b[0][2] += areaX;

    b[1][1] += areaY;
    b[1][5] += areaY;
    b[1][6] += areaY;
    b[1][2] += areaY;

    b[2][1] += areaZ;
    b[2][5] += areaZ;
    b[2][6] += areaZ;
    b[2][2] += areaZ;







    bisectX0 = double(0.5) * (p_x3[0][idx] + p_x7[0][idx] - p_x6[0][idx] - p_x2[0][idx]);
    bisectY0 = double(0.5) * (p_y3[0][idx] + p_y7[0][idx] - p_y6[0][idx] - p_y2[0][idx]);
    bisectZ0 = double(0.5) * (p_z3[0][idx] + p_z7[0][idx] - p_z6[0][idx] - p_z2[0][idx]);
    bisectX1 = double(0.5) * (p_x7[0][idx] + p_x6[0][idx] - p_x3[0][idx] - p_x2[0][idx]);
    bisectY1 = double(0.5) * (p_y7[0][idx] + p_y6[0][idx] - p_y3[0][idx] - p_y2[0][idx]);
    bisectZ1 = double(0.5) * (p_z7[0][idx] + p_z6[0][idx] - p_z3[0][idx] - p_z2[0][idx]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][2] += areaX;
    b[0][6] += areaX;
    b[0][7] += areaX;
    b[0][3] += areaX;

    b[1][2] += areaY;
    b[1][6] += areaY;
    b[1][7] += areaY;
    b[1][3] += areaY;

    b[2][2] += areaZ;
    b[2][6] += areaZ;
    b[2][7] += areaZ;
    b[2][3] += areaZ;







    bisectX0 = double(0.5) * (p_x0[0][idx] + p_x4[0][idx] - p_x7[0][idx] - p_x3[0][idx]);
    bisectY0 = double(0.5) * (p_y0[0][idx] + p_y4[0][idx] - p_y7[0][idx] - p_y3[0][idx]);
    bisectZ0 = double(0.5) * (p_z0[0][idx] + p_z4[0][idx] - p_z7[0][idx] - p_z3[0][idx]);
    bisectX1 = double(0.5) * (p_x4[0][idx] + p_x7[0][idx] - p_x0[0][idx] - p_x3[0][idx]);
    bisectY1 = double(0.5) * (p_y4[0][idx] + p_y7[0][idx] - p_y0[0][idx] - p_y3[0][idx]);
    bisectZ1 = double(0.5) * (p_z4[0][idx] + p_z7[0][idx] - p_z0[0][idx] - p_z3[0][idx]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][3] += areaX;
    b[0][7] += areaX;
    b[0][4] += areaX;
    b[0][0] += areaX;

    b[1][3] += areaY;
    b[1][7] += areaY;
    b[1][4] += areaY;
    b[1][0] += areaY;

    b[2][3] += areaZ;
    b[2][7] += areaZ;
    b[2][4] += areaZ;
    b[2][0] += areaZ;







    bisectX0 = double(0.5) * (p_x5[0][idx] + p_x6[0][idx] - p_x7[0][idx] - p_x4[0][idx]);
    bisectY0 = double(0.5) * (p_y5[0][idx] + p_y6[0][idx] - p_y7[0][idx] - p_y4[0][idx]);
    bisectZ0 = double(0.5) * (p_z5[0][idx] + p_z6[0][idx] - p_z7[0][idx] - p_z4[0][idx]);
    bisectX1 = double(0.5) * (p_x6[0][idx] + p_x7[0][idx] - p_x5[0][idx] - p_x4[0][idx]);
    bisectY1 = double(0.5) * (p_y6[0][idx] + p_y7[0][idx] - p_y5[0][idx] - p_y4[0][idx]);
    bisectZ1 = double(0.5) * (p_z6[0][idx] + p_z7[0][idx] - p_z5[0][idx] - p_z4[0][idx]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][4] += areaX;
    b[0][7] += areaX;
    b[0][6] += areaX;
    b[0][5] += areaX;

    b[1][4] += areaY;
    b[1][7] += areaY;
    b[1][6] += areaY;
    b[1][5] += areaY;

    b[2][4] += areaZ;
    b[2][7] += areaZ;
    b[2][6] += areaZ;
    b[2][5] += areaZ;






    for(int i = 0; i < 8; i++) {
        fx_local[i] = -( sigxx[0][idx] * b[0][i] );
        fy_local[i] = -( sigyy[0][idx] * b[1][i]  );
        fz_local[i] = -( sigzz[0][idx] * b[2][i] );
    }









    p_fx0[0][idx] = fx_local[0];
    p_fx1[0][idx] = fx_local[1];
    p_fx2[0][idx] = fx_local[2];
    p_fx3[0][idx] = fx_local[3];
    p_fx4[0][idx] = fx_local[4];
    p_fx5[0][idx] = fx_local[5];
    p_fx6[0][idx] = fx_local[6];
    p_fx7[0][idx] = fx_local[7];

    p_fy0[0][idx] = fy_local[0];
    p_fy1[0][idx] = fy_local[1];
    p_fy2[0][idx] = fy_local[2];
    p_fy3[0][idx] = fy_local[3];
    p_fy4[0][idx] = fy_local[4];
    p_fy5[0][idx] = fy_local[5];
    p_fy6[0][idx] = fy_local[6];
    p_fy7[0][idx] = fy_local[7];

    p_fz0[0][idx] = fz_local[0];
    p_fz1[0][idx] = fz_local[1];
    p_fz2[0][idx] = fz_local[2];
    p_fz3[0][idx] = fz_local[3];
    p_fz4[0][idx] = fz_local[4];
    p_fz5[0][idx] = fz_local[5];
    p_fz6[0][idx] = fz_local[6];
    p_fz7[0][idx] = fz_local[7];

}
#endif

// host stub function
void op_par_loop_IntegrateStressForElemsLoop(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51){

  int nargs = 52;
  op_arg args[52];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;
  args[33] = arg33;
  args[34] = arg34;
  args[35] = arg35;
  args[36] = arg36;
  args[37] = arg37;
  args[38] = arg38;
  args[39] = arg39;
  args[40] = arg40;
  args[41] = arg41;
  args[42] = arg42;
  args[43] = arg43;
  args[44] = arg44;
  args[45] = arg45;
  args[46] = arg46;
  args[47] = arg47;
  args[48] = arg48;
  args[49] = arg49;
  args[50] = arg50;
  args[51] = arg51;
  //create aligned pointers for dats
  ALIGNED_double const double * __restrict__ ptr0 = (double *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr3 = (double *) arg3.data;
  DECLARE_PTR_ALIGNED(ptr3,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr4 = (double *) arg4.data;
  DECLARE_PTR_ALIGNED(ptr4,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr5 = (double *) arg5.data;
  DECLARE_PTR_ALIGNED(ptr5,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr6 = (double *) arg6.data;
  DECLARE_PTR_ALIGNED(ptr6,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr7 = (double *) arg7.data;
  DECLARE_PTR_ALIGNED(ptr7,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr8 = (double *) arg8.data;
  DECLARE_PTR_ALIGNED(ptr8,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr9 = (double *) arg9.data;
  DECLARE_PTR_ALIGNED(ptr9,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr10 = (double *) arg10.data;
  DECLARE_PTR_ALIGNED(ptr10,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr11 = (double *) arg11.data;
  DECLARE_PTR_ALIGNED(ptr11,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr12 = (double *) arg12.data;
  DECLARE_PTR_ALIGNED(ptr12,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr13 = (double *) arg13.data;
  DECLARE_PTR_ALIGNED(ptr13,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr14 = (double *) arg14.data;
  DECLARE_PTR_ALIGNED(ptr14,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr15 = (double *) arg15.data;
  DECLARE_PTR_ALIGNED(ptr15,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr16 = (double *) arg16.data;
  DECLARE_PTR_ALIGNED(ptr16,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr17 = (double *) arg17.data;
  DECLARE_PTR_ALIGNED(ptr17,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr18 = (double *) arg18.data;
  DECLARE_PTR_ALIGNED(ptr18,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr19 = (double *) arg19.data;
  DECLARE_PTR_ALIGNED(ptr19,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr20 = (double *) arg20.data;
  DECLARE_PTR_ALIGNED(ptr20,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr21 = (double *) arg21.data;
  DECLARE_PTR_ALIGNED(ptr21,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr22 = (double *) arg22.data;
  DECLARE_PTR_ALIGNED(ptr22,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr23 = (double *) arg23.data;
  DECLARE_PTR_ALIGNED(ptr23,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr24 = (double *) arg24.data;
  DECLARE_PTR_ALIGNED(ptr24,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr25 = (double *) arg25.data;
  DECLARE_PTR_ALIGNED(ptr25,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr26 = (double *) arg26.data;
  DECLARE_PTR_ALIGNED(ptr26,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr27 = (double *) arg27.data;
  DECLARE_PTR_ALIGNED(ptr27,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr28 = (double *) arg28.data;
  DECLARE_PTR_ALIGNED(ptr28,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr29 = (double *) arg29.data;
  DECLARE_PTR_ALIGNED(ptr29,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr30 = (double *) arg30.data;
  DECLARE_PTR_ALIGNED(ptr30,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr31 = (double *) arg31.data;
  DECLARE_PTR_ALIGNED(ptr31,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr32 = (double *) arg32.data;
  DECLARE_PTR_ALIGNED(ptr32,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr33 = (double *) arg33.data;
  DECLARE_PTR_ALIGNED(ptr33,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr34 = (double *) arg34.data;
  DECLARE_PTR_ALIGNED(ptr34,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr35 = (double *) arg35.data;
  DECLARE_PTR_ALIGNED(ptr35,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr36 = (double *) arg36.data;
  DECLARE_PTR_ALIGNED(ptr36,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr37 = (double *) arg37.data;
  DECLARE_PTR_ALIGNED(ptr37,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr38 = (double *) arg38.data;
  DECLARE_PTR_ALIGNED(ptr38,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr39 = (double *) arg39.data;
  DECLARE_PTR_ALIGNED(ptr39,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr40 = (double *) arg40.data;
  DECLARE_PTR_ALIGNED(ptr40,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr41 = (double *) arg41.data;
  DECLARE_PTR_ALIGNED(ptr41,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr42 = (double *) arg42.data;
  DECLARE_PTR_ALIGNED(ptr42,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr43 = (double *) arg43.data;
  DECLARE_PTR_ALIGNED(ptr43,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr44 = (double *) arg44.data;
  DECLARE_PTR_ALIGNED(ptr44,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr45 = (double *) arg45.data;
  DECLARE_PTR_ALIGNED(ptr45,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr46 = (double *) arg46.data;
  DECLARE_PTR_ALIGNED(ptr46,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr47 = (double *) arg47.data;
  DECLARE_PTR_ALIGNED(ptr47,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr48 = (double *) arg48.data;
  DECLARE_PTR_ALIGNED(ptr48,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr49 = (double *) arg49.data;
  DECLARE_PTR_ALIGNED(ptr49,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr50 = (double *) arg50.data;
  DECLARE_PTR_ALIGNED(ptr50,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr51 = (double *) arg51.data;
  DECLARE_PTR_ALIGNED(ptr51,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(1);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: IntegrateStressForElemsLoop\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      if (n<set->core_size && n>0 && n % OP_mpi_test_frequency == 0)
        op_mpi_test_all(nargs,args);
      if ((n+SIMD_VEC >= set->core_size) && (n+SIMD_VEC-set->core_size < SIMD_VEC)) {
        op_mpi_wait_all(nargs, args);
      }
      ALIGNED_double double dat0[1][SIMD_VEC];
      ALIGNED_double double dat1[1][SIMD_VEC];
      ALIGNED_double double dat2[1][SIMD_VEC];
      ALIGNED_double double dat3[1][SIMD_VEC];
      ALIGNED_double double dat4[1][SIMD_VEC];
      ALIGNED_double double dat5[1][SIMD_VEC];
      ALIGNED_double double dat6[1][SIMD_VEC];
      ALIGNED_double double dat7[1][SIMD_VEC];
      ALIGNED_double double dat8[1][SIMD_VEC];
      ALIGNED_double double dat9[1][SIMD_VEC];
      ALIGNED_double double dat10[1][SIMD_VEC];
      ALIGNED_double double dat11[1][SIMD_VEC];
      ALIGNED_double double dat12[1][SIMD_VEC];
      ALIGNED_double double dat13[1][SIMD_VEC];
      ALIGNED_double double dat14[1][SIMD_VEC];
      ALIGNED_double double dat15[1][SIMD_VEC];
      ALIGNED_double double dat16[1][SIMD_VEC];
      ALIGNED_double double dat17[1][SIMD_VEC];
      ALIGNED_double double dat18[1][SIMD_VEC];
      ALIGNED_double double dat19[1][SIMD_VEC];
      ALIGNED_double double dat20[1][SIMD_VEC];
      ALIGNED_double double dat21[1][SIMD_VEC];
      ALIGNED_double double dat22[1][SIMD_VEC];
      ALIGNED_double double dat23[1][SIMD_VEC];
      ALIGNED_double double dat24[1][SIMD_VEC];
      ALIGNED_double double dat25[1][SIMD_VEC];
      ALIGNED_double double dat26[1][SIMD_VEC];
      ALIGNED_double double dat27[1][SIMD_VEC];
      ALIGNED_double double dat28[1][SIMD_VEC];
      ALIGNED_double double dat29[1][SIMD_VEC];
      ALIGNED_double double dat30[1][SIMD_VEC];
      ALIGNED_double double dat31[1][SIMD_VEC];
      ALIGNED_double double dat32[1][SIMD_VEC];
      ALIGNED_double double dat33[1][SIMD_VEC];
      ALIGNED_double double dat34[1][SIMD_VEC];
      ALIGNED_double double dat35[1][SIMD_VEC];
      ALIGNED_double double dat36[1][SIMD_VEC];
      ALIGNED_double double dat37[1][SIMD_VEC];
      ALIGNED_double double dat38[1][SIMD_VEC];
      ALIGNED_double double dat39[1][SIMD_VEC];
      ALIGNED_double double dat40[1][SIMD_VEC];
      ALIGNED_double double dat41[1][SIMD_VEC];
      ALIGNED_double double dat42[1][SIMD_VEC];
      ALIGNED_double double dat43[1][SIMD_VEC];
      ALIGNED_double double dat44[1][SIMD_VEC];
      ALIGNED_double double dat45[1][SIMD_VEC];
      ALIGNED_double double dat46[1][SIMD_VEC];
      ALIGNED_double double dat47[1][SIMD_VEC];
      ALIGNED_double double dat48[1][SIMD_VEC];
      ALIGNED_double double dat49[1][SIMD_VEC];
      ALIGNED_double double dat50[1][SIMD_VEC];
      ALIGNED_double double dat51[1][SIMD_VEC];
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx0_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 0];
        int idx1_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 1];
        int idx2_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 2];
        int idx3_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 3];
        int idx4_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 4];
        int idx5_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 5];
        int idx6_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 6];
        int idx7_1 = 1 * arg0.map_data[(n+i) * arg0.map->dim + 7];
        int idx8_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 0];
        int idx9_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 1];
        int idx10_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 2];
        int idx11_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 3];
        int idx12_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 4];
        int idx13_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 5];
        int idx14_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 6];
        int idx15_1 = 1 * arg8.map_data[(n+i) * arg8.map->dim + 7];
        int idx16_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 0];
        int idx17_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 1];
        int idx18_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 2];
        int idx19_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 3];
        int idx20_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 4];
        int idx21_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 5];
        int idx22_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 6];
        int idx23_1 = 1 * arg16.map_data[(n+i) * arg16.map->dim + 7];
        int idx48_1 = 1 * (n+i);
        int idx49_1 = 1 * (n+i);
        int idx50_1 = 1 * (n+i);
        int idx51_1 = 1 * (n+i);

        dat0[0][i] = (ptr0)[idx0_1 + 0];
        dat1[0][i] = (ptr1)[idx1_1 + 0];
        dat2[0][i] = (ptr2)[idx2_1 + 0];
        dat3[0][i] = (ptr3)[idx3_1 + 0];
        dat4[0][i] = (ptr4)[idx4_1 + 0];
        dat5[0][i] = (ptr5)[idx5_1 + 0];
        dat6[0][i] = (ptr6)[idx6_1 + 0];
        dat7[0][i] = (ptr7)[idx7_1 + 0];
        dat8[0][i] = (ptr8)[idx8_1 + 0];
        dat9[0][i] = (ptr9)[idx9_1 + 0];
        dat10[0][i] = (ptr10)[idx10_1 + 0];
        dat11[0][i] = (ptr11)[idx11_1 + 0];
        dat12[0][i] = (ptr12)[idx12_1 + 0];
        dat13[0][i] = (ptr13)[idx13_1 + 0];
        dat14[0][i] = (ptr14)[idx14_1 + 0];
        dat15[0][i] = (ptr15)[idx15_1 + 0];
        dat16[0][i] = (ptr16)[idx16_1 + 0];
        dat17[0][i] = (ptr17)[idx17_1 + 0];
        dat18[0][i] = (ptr18)[idx18_1 + 0];
        dat19[0][i] = (ptr19)[idx19_1 + 0];
        dat20[0][i] = (ptr20)[idx20_1 + 0];
        dat21[0][i] = (ptr21)[idx21_1 + 0];
        dat22[0][i] = (ptr22)[idx22_1 + 0];
        dat23[0][i] = (ptr23)[idx23_1 + 0];
        dat24[0][i] = 0.0;
        dat25[0][i] = 0.0;
        dat26[0][i] = 0.0;
        dat27[0][i] = 0.0;
        dat28[0][i] = 0.0;
        dat29[0][i] = 0.0;
        dat30[0][i] = 0.0;
        dat31[0][i] = 0.0;
        dat32[0][i] = 0.0;
        dat33[0][i] = 0.0;
        dat34[0][i] = 0.0;
        dat35[0][i] = 0.0;
        dat36[0][i] = 0.0;
        dat37[0][i] = 0.0;
        dat38[0][i] = 0.0;
        dat39[0][i] = 0.0;
        dat40[0][i] = 0.0;
        dat41[0][i] = 0.0;
        dat42[0][i] = 0.0;
        dat43[0][i] = 0.0;
        dat44[0][i] = 0.0;
        dat45[0][i] = 0.0;
        dat46[0][i] = 0.0;
        dat47[0][i] = 0.0;
        dat49[0][i] = (ptr49)[idx49_1 + 0];
        dat50[0][i] = (ptr50)[idx50_1 + 0];
        dat51[0][i] = (ptr51)[idx51_1 + 0];
      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        IntegrateStressForElemsLoop_vec(
          dat0,
          dat1,
          dat2,
          dat3,
          dat4,
          dat5,
          dat6,
          dat7,
          dat8,
          dat9,
          dat10,
          dat11,
          dat12,
          dat13,
          dat14,
          dat15,
          dat16,
          dat17,
          dat18,
          dat19,
          dat20,
          dat21,
          dat22,
          dat23,
          dat24,
          dat25,
          dat26,
          dat27,
          dat28,
          dat29,
          dat30,
          dat31,
          dat32,
          dat33,
          dat34,
          dat35,
          dat36,
          dat37,
          dat38,
          dat39,
          dat40,
          dat41,
          dat42,
          dat43,
          dat44,
          dat45,
          dat46,
          dat47,
          dat48,
          dat49,
          dat50,
          dat51,
          i);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx24_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 0];
        int idx25_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 1];
        int idx26_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 2];
        int idx27_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 3];
        int idx28_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 4];
        int idx29_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 5];
        int idx30_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 6];
        int idx31_1 = 1 * arg24.map_data[(n+i) * arg24.map->dim + 7];
        int idx32_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 0];
        int idx33_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 1];
        int idx34_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 2];
        int idx35_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 3];
        int idx36_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 4];
        int idx37_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 5];
        int idx38_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 6];
        int idx39_1 = 1 * arg32.map_data[(n+i) * arg32.map->dim + 7];
        int idx40_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 0];
        int idx41_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 1];
        int idx42_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 2];
        int idx43_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 3];
        int idx44_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 4];
        int idx45_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 5];
        int idx46_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 6];
        int idx47_1 = 1 * arg40.map_data[(n+i) * arg40.map->dim + 7];
        int idx48_1 = 1 * (n+i);

        (ptr24)[idx24_1 + 0] += dat24[0][i];
        (ptr25)[idx25_1 + 0] += dat25[0][i];
        (ptr26)[idx26_1 + 0] += dat26[0][i];
        (ptr27)[idx27_1 + 0] += dat27[0][i];
        (ptr28)[idx28_1 + 0] += dat28[0][i];
        (ptr29)[idx29_1 + 0] += dat29[0][i];
        (ptr30)[idx30_1 + 0] += dat30[0][i];
        (ptr31)[idx31_1 + 0] += dat31[0][i];
        (ptr32)[idx32_1 + 0] += dat32[0][i];
        (ptr33)[idx33_1 + 0] += dat33[0][i];
        (ptr34)[idx34_1 + 0] += dat34[0][i];
        (ptr35)[idx35_1 + 0] += dat35[0][i];
        (ptr36)[idx36_1 + 0] += dat36[0][i];
        (ptr37)[idx37_1 + 0] += dat37[0][i];
        (ptr38)[idx38_1 + 0] += dat38[0][i];
        (ptr39)[idx39_1 + 0] += dat39[0][i];
        (ptr40)[idx40_1 + 0] += dat40[0][i];
        (ptr41)[idx41_1 + 0] += dat41[0][i];
        (ptr42)[idx42_1 + 0] += dat42[0][i];
        (ptr43)[idx43_1 + 0] += dat43[0][i];
        (ptr44)[idx44_1 + 0] += dat44[0][i];
        (ptr45)[idx45_1 + 0] += dat45[0][i];
        (ptr46)[idx46_1 + 0] += dat46[0][i];
        (ptr47)[idx47_1 + 0] += dat47[0][i];
        (ptr48)[idx48_1 + 0] = dat48[0][i];

      }
    }

    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map0idx;
      int map1idx;
      int map2idx;
      int map3idx;
      int map4idx;
      int map5idx;
      int map6idx;
      int map7idx;
      map0idx = arg0.map_data[n * arg0.map->dim + 0];
      map1idx = arg0.map_data[n * arg0.map->dim + 1];
      map2idx = arg0.map_data[n * arg0.map->dim + 2];
      map3idx = arg0.map_data[n * arg0.map->dim + 3];
      map4idx = arg0.map_data[n * arg0.map->dim + 4];
      map5idx = arg0.map_data[n * arg0.map->dim + 5];
      map6idx = arg0.map_data[n * arg0.map->dim + 6];
      map7idx = arg0.map_data[n * arg0.map->dim + 7];

      IntegrateStressForElemsLoop(
        &(ptr0)[1 * map0idx],
        &(ptr1)[1 * map1idx],
        &(ptr2)[1 * map2idx],
        &(ptr3)[1 * map3idx],
        &(ptr4)[1 * map4idx],
        &(ptr5)[1 * map5idx],
        &(ptr6)[1 * map6idx],
        &(ptr7)[1 * map7idx],
        &(ptr8)[1 * map0idx],
        &(ptr9)[1 * map1idx],
        &(ptr10)[1 * map2idx],
        &(ptr11)[1 * map3idx],
        &(ptr12)[1 * map4idx],
        &(ptr13)[1 * map5idx],
        &(ptr14)[1 * map6idx],
        &(ptr15)[1 * map7idx],
        &(ptr16)[1 * map0idx],
        &(ptr17)[1 * map1idx],
        &(ptr18)[1 * map2idx],
        &(ptr19)[1 * map3idx],
        &(ptr20)[1 * map4idx],
        &(ptr21)[1 * map5idx],
        &(ptr22)[1 * map6idx],
        &(ptr23)[1 * map7idx],
        &(ptr24)[1 * map0idx],
        &(ptr25)[1 * map1idx],
        &(ptr26)[1 * map2idx],
        &(ptr27)[1 * map3idx],
        &(ptr28)[1 * map4idx],
        &(ptr29)[1 * map5idx],
        &(ptr30)[1 * map6idx],
        &(ptr31)[1 * map7idx],
        &(ptr32)[1 * map0idx],
        &(ptr33)[1 * map1idx],
        &(ptr34)[1 * map2idx],
        &(ptr35)[1 * map3idx],
        &(ptr36)[1 * map4idx],
        &(ptr37)[1 * map5idx],
        &(ptr38)[1 * map6idx],
        &(ptr39)[1 * map7idx],
        &(ptr40)[1 * map0idx],
        &(ptr41)[1 * map1idx],
        &(ptr42)[1 * map2idx],
        &(ptr43)[1 * map3idx],
        &(ptr44)[1 * map4idx],
        &(ptr45)[1 * map5idx],
        &(ptr46)[1 * map6idx],
        &(ptr47)[1 * map7idx],
        &(ptr48)[1 * n],
        &(ptr49)[1 * n],
        &(ptr50)[1 * n],
        &(ptr51)[1 * n]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[1].name      = name;
  OP_kernels[1].count    += 1;
  OP_kernels[1].time     += wall_t2 - wall_t1;
  OP_kernels[1].transfer += (float)set->size * arg0.size;
  OP_kernels[1].transfer += (float)set->size * arg8.size;
  OP_kernels[1].transfer += (float)set->size * arg16.size;
  OP_kernels[1].transfer += (float)set->size * arg24.size * 2.0f;
  OP_kernels[1].transfer += (float)set->size * arg32.size * 2.0f;
  OP_kernels[1].transfer += (float)set->size * arg40.size * 2.0f;
  OP_kernels[1].transfer += (float)set->size * arg48.size;
  OP_kernels[1].transfer += (float)set->size * arg49.size;
  OP_kernels[1].transfer += (float)set->size * arg50.size;
  OP_kernels[1].transfer += (float)set->size * arg51.size;
  OP_kernels[1].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
