//
// auto-generated by op2.py
//

void CalcLagrangeElemRemaining_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    double *dxx = &data0[1*n_op];
    double *dyy = &data1[1*n_op];
    double *dzz = &data2[1*n_op];
    double *m_vdov = &data3[1*n_op];
    const double *vnew = &data4[1*n_op];

    //inline function
    

      double vdov = dxx[0] + dyy[0] + dzz[0] ;
      double vdovthird = vdov/double(3.0) ;

      m_vdov[0] = vdov ;

      dxx[0] -= vdovthird ;
      dyy[0] -= vdovthird ;
      dzz[0] -= vdovthird ;

      if (vnew[0] <= double(0.0))
      {

      }
    //end inline func
  }

}
