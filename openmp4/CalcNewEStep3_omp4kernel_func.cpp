//
// auto-generated by op2.py
//

void CalcNewEStep3_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size]) \
    map(to: m_e_cut_ompkernel, m_emin_ompkernel)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    double *e_new = &data0[1*n_op];
    const double *work = &data1[1*n_op];

    //inline function
    
      e_new[0] += double(0.5) * work[0];

      if (fabs(e_new[0]) < m_e_cut_ompkernel) {
          e_new[0] = double(0.)  ;
      }
      if (     e_new[0]  < m_emin_ompkernel ) {
          e_new[0] = m_emin_ompkernel ;
      }
    //end inline func
  }

}
