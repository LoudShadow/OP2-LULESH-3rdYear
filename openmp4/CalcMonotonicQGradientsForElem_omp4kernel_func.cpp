//
// auto-generated by op2.py
//

void CalcMonotonicQGradientsForElem_omp4_kernel(
  int *map0,
  int map0size,
  double *data48,
  int dat48size,
  double *data49,
  int dat49size,
  double *data50,
  int dat50size,
  double *data51,
  int dat51size,
  double *data52,
  int dat52size,
  double *data53,
  int dat53size,
  double *data54,
  int dat54size,
  double *data55,
  int dat55size,
  double *data0,
  int dat0size,
  double *data8,
  int dat8size,
  double *data16,
  int dat16size,
  double *data24,
  int dat24size,
  double *data32,
  int dat32size,
  double *data40,
  int dat40size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data48[0:dat48size],data49[0:dat49size],data50[0:dat50size],data51[0:dat51size],data52[0:dat52size],data53[0:dat53size],data54[0:dat54size],data55[0:dat55size]) \
    map(to: m_ptiny_ompkernel)\
    map(to:col_reord[0:set_size1],map0[0:map0size],data0[0:dat0size],data8[0:dat8size],data16[0:dat16size],data24[0:dat24size],data32[0:dat32size],data40[0:dat40size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    int map4idx;
    int map5idx;
    int map6idx;
    int map7idx;
    map0idx = map0[n_op + set_size1 * 0];
    map1idx = map0[n_op + set_size1 * 1];
    map2idx = map0[n_op + set_size1 * 2];
    map3idx = map0[n_op + set_size1 * 3];
    map4idx = map0[n_op + set_size1 * 4];
    map5idx = map0[n_op + set_size1 * 5];
    map6idx = map0[n_op + set_size1 * 6];
    map7idx = map0[n_op + set_size1 * 7];

    //variable mapping
    const double *p_x0 = &data0[1 * map0idx];
    const double *p_x1 = &data0[1 * map1idx];
    const double *p_x2 = &data0[1 * map2idx];
    const double *p_x3 = &data0[1 * map3idx];
    const double *p_x4 = &data0[1 * map4idx];
    const double *p_x5 = &data0[1 * map5idx];
    const double *p_x6 = &data0[1 * map6idx];
    const double *p_x7 = &data0[1 * map7idx];
    const double *p_y0 = &data8[1 * map0idx];
    const double *p_y1 = &data8[1 * map1idx];
    const double *p_y2 = &data8[1 * map2idx];
    const double *p_y3 = &data8[1 * map3idx];
    const double *p_y4 = &data8[1 * map4idx];
    const double *p_y5 = &data8[1 * map5idx];
    const double *p_y6 = &data8[1 * map6idx];
    const double *p_y7 = &data8[1 * map7idx];
    const double *p_z0 = &data16[1 * map0idx];
    const double *p_z1 = &data16[1 * map1idx];
    const double *p_z2 = &data16[1 * map2idx];
    const double *p_z3 = &data16[1 * map3idx];
    const double *p_z4 = &data16[1 * map4idx];
    const double *p_z5 = &data16[1 * map5idx];
    const double *p_z6 = &data16[1 * map6idx];
    const double *p_z7 = &data16[1 * map7idx];
    const double *p_xd0 = &data24[1 * map0idx];
    const double *p_xd1 = &data24[1 * map1idx];
    const double *p_xd2 = &data24[1 * map2idx];
    const double *p_xd3 = &data24[1 * map3idx];
    const double *p_xd4 = &data24[1 * map4idx];
    const double *p_xd5 = &data24[1 * map5idx];
    const double *p_xd6 = &data24[1 * map6idx];
    const double *p_xd7 = &data24[1 * map7idx];
    const double *p_yd0 = &data32[1 * map0idx];
    const double *p_yd1 = &data32[1 * map1idx];
    const double *p_yd2 = &data32[1 * map2idx];
    const double *p_yd3 = &data32[1 * map3idx];
    const double *p_yd4 = &data32[1 * map4idx];
    const double *p_yd5 = &data32[1 * map5idx];
    const double *p_yd6 = &data32[1 * map6idx];
    const double *p_yd7 = &data32[1 * map7idx];
    const double *p_zd0 = &data40[1 * map0idx];
    const double *p_zd1 = &data40[1 * map1idx];
    const double *p_zd2 = &data40[1 * map2idx];
    const double *p_zd3 = &data40[1 * map3idx];
    const double *p_zd4 = &data40[1 * map4idx];
    const double *p_zd5 = &data40[1 * map5idx];
    const double *p_zd6 = &data40[1 * map6idx];
    const double *p_zd7 = &data40[1 * map7idx];
    const double *volo = &data48[1*n_op];
    const double *vnew = &data49[1*n_op];
    double *delx_zeta = &data50[1*n_op];
    double *delv_zeta = &data51[1*n_op];
    double *delv_xi = &data52[1*n_op];
    double *delx_xi = &data53[1*n_op];
    double *delx_eta = &data54[1*n_op];
    double *delv_eta = &data55[1*n_op];

    //inline function
    
      double ax,ay,az;
      double dxv,dyv,dzv;

      double vol = volo[0]*vnew[0];
      double norm = double(1.0) / ( vol + m_ptiny_ompkernel );

      double dxj = double(-0.25)*((p_x0[0]+p_x1[0]+p_x5[0]+p_x4[0]) - (p_x3[0]+p_x2[0]+p_x6[0]+p_x7[0])) ;
      double dyj = double(-0.25)*((p_y0[0]+p_y1[0]+p_y5[0]+p_y4[0]) - (p_y3[0]+p_y2[0]+p_y6[0]+p_y7[0])) ;
      double dzj = double(-0.25)*((p_z0[0]+p_z1[0]+p_z5[0]+p_z4[0]) - (p_z3[0]+p_z2[0]+p_z6[0]+p_z7[0])) ;

      double dxi = double( 0.25)*((p_x1[0]+p_x2[0]+p_x6[0]+p_x5[0]) - (p_x0[0]+p_x3[0]+p_x7[0]+p_x4[0])) ;
      double dyi = double( 0.25)*((p_y1[0]+p_y2[0]+p_y6[0]+p_y5[0]) - (p_y0[0]+p_y3[0]+p_y7[0]+p_y4[0])) ;
      double dzi = double( 0.25)*((p_z1[0]+p_z2[0]+p_z6[0]+p_z5[0]) - (p_z0[0]+p_z3[0]+p_z7[0]+p_z4[0])) ;

      double dxk = double( 0.25)*((p_x4[0]+p_x5[0]+p_x6[0]+p_x7[0]) - (p_x0[0]+p_x1[0]+p_x2[0]+p_x3[0])) ;
      double dyk = double( 0.25)*((p_y4[0]+p_y5[0]+p_y6[0]+p_y7[0]) - (p_y0[0]+p_y1[0]+p_y2[0]+p_y3[0])) ;
      double dzk = double( 0.25)*((p_z4[0]+p_z5[0]+p_z6[0]+p_z7[0]) - (p_z0[0]+p_z1[0]+p_z2[0]+p_z3[0])) ;

      ax = dyi*dzj - dzi*dyj ;
      ay = dzi*dxj - dxi*dzj ;
      az = dxi*dyj - dyi*dxj ;

      delx_zeta[0] = vol / sqrt(ax*ax + ay*ay + az*az + m_ptiny_ompkernel) ;

      ax *= norm ;
      ay *= norm ;
      az *= norm ;

      dxv = double(0.25)*((p_xd4[0]+p_xd5[0]+p_xd6[0]+p_xd7[0]) - (p_xd0[0]+p_xd1[0]+p_xd2[0]+p_xd3[0])) ;
      dyv = double(0.25)*((p_yd4[0]+p_yd5[0]+p_yd6[0]+p_yd7[0]) - (p_yd0[0]+p_yd1[0]+p_yd2[0]+p_yd3[0])) ;
      dzv = double(0.25)*((p_zd4[0]+p_zd5[0]+p_zd6[0]+p_zd7[0]) - (p_zd0[0]+p_zd1[0]+p_zd2[0]+p_zd3[0])) ;

      delv_zeta[0] = ax*dxv + ay*dyv + az*dzv ;

      ax = dyj*dzk - dzj*dyk ;
      ay = dzj*dxk - dxj*dzk ;
      az = dxj*dyk - dyj*dxk ;

      delx_xi[0] = vol / sqrt(ax*ax + ay*ay + az*az + m_ptiny_ompkernel) ;

      ax *= norm ;
      ay *= norm ;
      az *= norm ;

      dxv = double(0.25)*((p_xd1[0]+p_xd2[0]+p_xd6[0]+p_xd5[0]) - (p_xd0[0]+p_xd3[0]+p_xd7[0]+p_xd4[0])) ;
      dyv = double(0.25)*((p_yd1[0]+p_yd2[0]+p_yd6[0]+p_yd5[0]) - (p_yd0[0]+p_yd3[0]+p_yd7[0]+p_yd4[0])) ;
      dzv = double(0.25)*((p_zd1[0]+p_zd2[0]+p_zd6[0]+p_zd5[0]) - (p_zd0[0]+p_zd3[0]+p_zd7[0]+p_zd4[0])) ;

      delv_xi[0] = ax*dxv + ay*dyv + az*dzv ;


      ax = dyk*dzi - dzk*dyi ;
      ay = dzk*dxi - dxk*dzi ;
      az = dxk*dyi - dyk*dxi ;

      delx_eta[0] = vol / sqrt(ax*ax + ay*ay + az*az + m_ptiny_ompkernel) ;

      ax *= norm ;
      ay *= norm ;
      az *= norm ;

      dxv = double(-0.25)*((p_xd0[0]+p_xd1[0]+p_xd5[0]+p_xd4[0]) - (p_xd3[0]+p_xd2[0]+p_xd6[0]+p_xd7[0])) ;
      dyv = double(-0.25)*((p_yd0[0]+p_yd1[0]+p_yd5[0]+p_yd4[0]) - (p_yd3[0]+p_yd2[0]+p_yd6[0]+p_yd7[0])) ;
      dzv = double(-0.25)*((p_zd0[0]+p_zd1[0]+p_zd5[0]+p_zd4[0]) - (p_zd3[0]+p_zd2[0]+p_zd6[0]+p_zd7[0])) ;

      delv_eta[0] = ax*dxv + ay*dyv + az*dzv ;
    //end inline func
  }

}
