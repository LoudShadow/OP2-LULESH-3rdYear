//
// auto-generated by op2.py
//

void FBHourglassForceForElems_omp4_kernel(
  int *map0,
  int map0size,
  double *data48,
  int dat48size,
  double *data49,
  int dat49size,
  double *data50,
  int dat50size,
  double *data51,
  int dat51size,
  double *data52,
  int dat52size,
  double *data53,
  int dat53size,
  double *data54,
  int dat54size,
  double *data55,
  int dat55size,
  double *data56,
  int dat56size,
  double *data0,
  int dat0size,
  double *data8,
  int dat8size,
  double *data16,
  int dat16size,
  double *data24,
  int dat24size,
  double *data32,
  int dat32size,
  double *data40,
  int dat40size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data48[0:dat48size],data49[0:dat49size],data50[0:dat50size],data51[0:dat51size],data52[0:dat52size],data53[0:dat53size],data54[0:dat54size],data55[0:dat55size],data56[0:dat56size]) \
    map(to: m_hgcoef_ompkernel, m_gamma_t_ompkernel[:32])\
    map(to:col_reord[0:set_size1],map0[0:map0size],data0[0:dat0size],data8[0:dat8size],data16[0:dat16size],data24[0:dat24size],data32[0:dat32size],data40[0:dat40size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    int map4idx;
    int map5idx;
    int map6idx;
    int map7idx;
    map0idx = map0[n_op + set_size1 * 0];
    map1idx = map0[n_op + set_size1 * 1];
    map2idx = map0[n_op + set_size1 * 2];
    map3idx = map0[n_op + set_size1 * 3];
    map4idx = map0[n_op + set_size1 * 4];
    map5idx = map0[n_op + set_size1 * 5];
    map6idx = map0[n_op + set_size1 * 6];
    map7idx = map0[n_op + set_size1 * 7];

    //variable mapping
    const double *p_xd0 = &data0[1 * map0idx];
    const double *p_xd1 = &data0[1 * map1idx];
    const double *p_xd2 = &data0[1 * map2idx];
    const double *p_xd3 = &data0[1 * map3idx];
    const double *p_xd4 = &data0[1 * map4idx];
    const double *p_xd5 = &data0[1 * map5idx];
    const double *p_xd6 = &data0[1 * map6idx];
    const double *p_xd7 = &data0[1 * map7idx];
    const double *p_yd0 = &data8[1 * map0idx];
    const double *p_yd1 = &data8[1 * map1idx];
    const double *p_yd2 = &data8[1 * map2idx];
    const double *p_yd3 = &data8[1 * map3idx];
    const double *p_yd4 = &data8[1 * map4idx];
    const double *p_yd5 = &data8[1 * map5idx];
    const double *p_yd6 = &data8[1 * map6idx];
    const double *p_yd7 = &data8[1 * map7idx];
    const double *p_zd0 = &data16[1 * map0idx];
    const double *p_zd1 = &data16[1 * map1idx];
    const double *p_zd2 = &data16[1 * map2idx];
    const double *p_zd3 = &data16[1 * map3idx];
    const double *p_zd4 = &data16[1 * map4idx];
    const double *p_zd5 = &data16[1 * map5idx];
    const double *p_zd6 = &data16[1 * map6idx];
    const double *p_zd7 = &data16[1 * map7idx];
    double *p_fx0 = &data24[1 * map0idx];
    double *p_fx1 = &data24[1 * map1idx];
    double *p_fx2 = &data24[1 * map2idx];
    double *p_fx3 = &data24[1 * map3idx];
    double *p_fx4 = &data24[1 * map4idx];
    double *p_fx5 = &data24[1 * map5idx];
    double *p_fx6 = &data24[1 * map6idx];
    double *p_fx7 = &data24[1 * map7idx];
    double *p_fy0 = &data32[1 * map0idx];
    double *p_fy1 = &data32[1 * map1idx];
    double *p_fy2 = &data32[1 * map2idx];
    double *p_fy3 = &data32[1 * map3idx];
    double *p_fy4 = &data32[1 * map4idx];
    double *p_fy5 = &data32[1 * map5idx];
    double *p_fy6 = &data32[1 * map6idx];
    double *p_fy7 = &data32[1 * map7idx];
    double *p_fz0 = &data40[1 * map0idx];
    double *p_fz1 = &data40[1 * map1idx];
    double *p_fz2 = &data40[1 * map2idx];
    double *p_fz3 = &data40[1 * map3idx];
    double *p_fz4 = &data40[1 * map4idx];
    double *p_fz5 = &data40[1 * map5idx];
    double *p_fz6 = &data40[1 * map6idx];
    double *p_fz7 = &data40[1 * map7idx];
    const double *p_dvdx = &data48[8*n_op];
    const double *p_dvdy = &data49[8*n_op];
    const double *p_dvdz = &data50[8*n_op];
    const double *p_x8n = &data51[8*n_op];
    const double *p_y8n = &data52[8*n_op];
    const double *p_z8n = &data53[8*n_op];
    const double *p_determ = &data54[1*n_op];
    const double *p_ss = &data55[1*n_op];
    const double *p_elemMass = &data56[1*n_op];

    //inline function
    

      double hgfx[8], hgfy[8], hgfz[8] ;

      double coefficient;

      double hourgam[8][4];

      double volinv=double(1.0)/p_determ[0];
      double volume13 ;

          for(int i1=0;i1<4;++i1){
          double hourmodx =
              p_x8n[0] * m_gamma_t_ompkernel[(i1*8)+0] + p_x8n[0+1] * m_gamma_t_ompkernel[(i1*8)+1] +
              p_x8n[0+2] * m_gamma_t_ompkernel[(i1*8)+2] + p_x8n[0+3] * m_gamma_t_ompkernel[(i1*8)+3] +
              p_x8n[0+4] * m_gamma_t_ompkernel[(i1*8)+4] + p_x8n[0+5] * m_gamma_t_ompkernel[(i1*8)+5] +
              p_x8n[0+6] * m_gamma_t_ompkernel[(i1*8)+6] + p_x8n[0+7] * m_gamma_t_ompkernel[(i1*8)+7];

          double hourmody =
              p_y8n[0] * m_gamma_t_ompkernel[(i1*8)+0] + p_y8n[0+1] * m_gamma_t_ompkernel[(i1*8)+1] +
              p_y8n[0+2] * m_gamma_t_ompkernel[(i1*8)+2] + p_y8n[0+3] * m_gamma_t_ompkernel[(i1*8)+3] +
              p_y8n[0+4] * m_gamma_t_ompkernel[(i1*8)+4] + p_y8n[0+5] * m_gamma_t_ompkernel[(i1*8)+5] +
              p_y8n[0+6] * m_gamma_t_ompkernel[(i1*8)+6] + p_y8n[0+7] * m_gamma_t_ompkernel[(i1*8)+7];

          double hourmodz =
              p_z8n[0] * m_gamma_t_ompkernel[(i1*8)+0] + p_z8n[0+1] * m_gamma_t_ompkernel[(i1*8)+1] +
              p_z8n[0+2] * m_gamma_t_ompkernel[(i1*8)+2] + p_z8n[0+3] * m_gamma_t_ompkernel[(i1*8)+3] +
              p_z8n[0+4] * m_gamma_t_ompkernel[(i1*8)+4] + p_z8n[0+5] * m_gamma_t_ompkernel[(i1*8)+5] +
              p_z8n[0+6] * m_gamma_t_ompkernel[(i1*8)+6] + p_z8n[0+7] * m_gamma_t_ompkernel[(i1*8)+7];

          hourgam[0][i1] = m_gamma_t_ompkernel[(i1*8)+0] -  volinv*(p_dvdx[0  ] * hourmodx +
                                                  p_dvdy[0  ] * hourmody +
                                                  p_dvdz[0  ] * hourmodz );

          hourgam[1][i1] = m_gamma_t_ompkernel[(i1*8)+1] -  volinv*(p_dvdx[0+1] * hourmodx +
                                                  p_dvdy[0+1] * hourmody +
                                                  p_dvdz[0+1] * hourmodz );

          hourgam[2][i1] = m_gamma_t_ompkernel[(i1*8)+2] -  volinv*(p_dvdx[0+2] * hourmodx +
                                                  p_dvdy[0+2] * hourmody +
                                                  p_dvdz[0+2] * hourmodz );

          hourgam[3][i1] = m_gamma_t_ompkernel[(i1*8)+3] -  volinv*(p_dvdx[0+3] * hourmodx +
                                                  p_dvdy[0+3] * hourmody +
                                                  p_dvdz[0+3] * hourmodz );

          hourgam[4][i1] = m_gamma_t_ompkernel[(i1*8)+4] -  volinv*(p_dvdx[0+4] * hourmodx +
                                                  p_dvdy[0+4] * hourmody +
                                                  p_dvdz[0+4] * hourmodz );

          hourgam[5][i1] = m_gamma_t_ompkernel[(i1*8)+5] -  volinv*(p_dvdx[0+5] * hourmodx +
                                                  p_dvdy[0+5] * hourmody +
                                                  p_dvdz[0+5] * hourmodz );

          hourgam[6][i1] = m_gamma_t_ompkernel[(i1*8)+6] -  volinv*(p_dvdx[0+6] * hourmodx +
                                                  p_dvdy[0+6] * hourmody +
                                                  p_dvdz[0+6] * hourmodz );

          hourgam[7][i1] = m_gamma_t_ompkernel[(i1*8)+7] -  volinv*(p_dvdx[0+7] * hourmodx +
                                                  p_dvdy[0+7] * hourmody +
                                                  p_dvdz[0+7] * hourmodz );
      }



      volume13=cbrt(p_determ[0]);

      coefficient = - m_hgcoef_ompkernel * double(0.01) * p_ss[0] * p_elemMass[0] / volume13;

      double hxx[4];
      for(int i = 0; i < 4; i++) {
          hxx[i] = hourgam[0][i] * p_xd0[0] + hourgam[1][i] * p_xd1[0] +
                  hourgam[2][i] * p_xd2[0] + hourgam[3][i] * p_xd3[0] +
                  hourgam[4][i] * p_xd4[0] + hourgam[5][i] * p_xd5[0] +
                  hourgam[6][i] * p_xd6[0] + hourgam[7][i] * p_xd7[0];
      }
      for(int i = 0; i < 8; i++) {
          hgfx[i] = coefficient *
                      (hourgam[i][0] * hxx[0] + hourgam[i][1] * hxx[1] +
                      hourgam[i][2] * hxx[2] + hourgam[i][3] * hxx[3]);
      }
      for(int i = 0; i < 4; i++) {
          hxx[i] = hourgam[0][i] * p_yd0[0] + hourgam[1][i] * p_yd1[0] +
                  hourgam[2][i] * p_yd2[0] + hourgam[3][i] * p_yd3[0] +
                  hourgam[4][i] * p_yd4[0] + hourgam[5][i] * p_yd5[0] +
                  hourgam[6][i] * p_yd6[0] + hourgam[7][i] * p_yd7[0];
      }
      for(int i = 0; i < 8; i++) {
          hgfy[i] = coefficient *
                      (hourgam[i][0] * hxx[0] + hourgam[i][1] * hxx[1] +
                      hourgam[i][2] * hxx[2] + hourgam[i][3] * hxx[3]);
      }
      for(int i = 0; i < 4; i++) {
          hxx[i] = hourgam[0][i] * p_zd0[0] + hourgam[1][i] * p_zd1[0] +
                  hourgam[2][i] * p_zd2[0] + hourgam[3][i] * p_zd3[0] +
                  hourgam[4][i] * p_zd4[0] + hourgam[5][i] * p_zd5[0] +
                  hourgam[6][i] * p_zd6[0] + hourgam[7][i] * p_zd7[0];
      }
      for(int i = 0; i < 8; i++) {
          hgfz[i] = coefficient *
                      (hourgam[i][0] * hxx[0] + hourgam[i][1] * hxx[1] +
                      hourgam[i][2] * hxx[2] + hourgam[i][3] * hxx[3]);
      }

      p_fx0[0] += hgfx[0];
      p_fy0[0] += hgfy[0];
      p_fz0[0] += hgfz[0];

      p_fx1[0] += hgfx[1];
      p_fy1[0] += hgfy[1];
      p_fz1[0] += hgfz[1];

      p_fx2[0] += hgfx[2];
      p_fy2[0] += hgfy[2];
      p_fz2[0] += hgfz[2];

      p_fx3[0] += hgfx[3];
      p_fy3[0] += hgfy[3];
      p_fz3[0] += hgfz[3];

      p_fx4[0] += hgfx[4];
      p_fy4[0] += hgfy[4];
      p_fz4[0] += hgfz[4];

      p_fx5[0] += hgfx[5];
      p_fy5[0] += hgfy[5];
      p_fz5[0] += hgfz[5];

      p_fx6[0] += hgfx[6];
      p_fy6[0] += hgfy[6];
      p_fz6[0] += hgfz[6];

      p_fx7[0] += hgfx[7];
      p_fy7[0] += hgfy[7];
      p_fz7[0] += hgfz[7];
    //end inline func
  }

}
