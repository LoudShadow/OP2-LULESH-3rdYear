//
// auto-generated by op2.py
//

void IntegrateStressForElemsLoop_omp4_kernel(
  int *map0,
  int map0size,
  double *data48,
  int dat48size,
  double *data49,
  int dat49size,
  double *data50,
  int dat50size,
  double *data51,
  int dat51size,
  double *data0,
  int dat0size,
  double *data8,
  int dat8size,
  double *data16,
  int dat16size,
  double *data24,
  int dat24size,
  double *data32,
  int dat32size,
  double *data40,
  int dat40size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data48[0:dat48size],data49[0:dat49size],data50[0:dat50size],data51[0:dat51size])\
    map(to:col_reord[0:set_size1],map0[0:map0size],data0[0:dat0size],data8[0:dat8size],data16[0:dat16size],data24[0:dat24size],data32[0:dat32size],data40[0:dat40size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    int map4idx;
    int map5idx;
    int map6idx;
    int map7idx;
    map0idx = map0[n_op + set_size1 * 0];
    map1idx = map0[n_op + set_size1 * 1];
    map2idx = map0[n_op + set_size1 * 2];
    map3idx = map0[n_op + set_size1 * 3];
    map4idx = map0[n_op + set_size1 * 4];
    map5idx = map0[n_op + set_size1 * 5];
    map6idx = map0[n_op + set_size1 * 6];
    map7idx = map0[n_op + set_size1 * 7];

    //variable mapping
    const double *p_x0 = &data0[1 * map0idx];
    const double *p_x1 = &data0[1 * map1idx];
    const double *p_x2 = &data0[1 * map2idx];
    const double *p_x3 = &data0[1 * map3idx];
    const double *p_x4 = &data0[1 * map4idx];
    const double *p_x5 = &data0[1 * map5idx];
    const double *p_x6 = &data0[1 * map6idx];
    const double *p_x7 = &data0[1 * map7idx];
    const double *p_y0 = &data8[1 * map0idx];
    const double *p_y1 = &data8[1 * map1idx];
    const double *p_y2 = &data8[1 * map2idx];
    const double *p_y3 = &data8[1 * map3idx];
    const double *p_y4 = &data8[1 * map4idx];
    const double *p_y5 = &data8[1 * map5idx];
    const double *p_y6 = &data8[1 * map6idx];
    const double *p_y7 = &data8[1 * map7idx];
    const double *p_z0 = &data16[1 * map0idx];
    const double *p_z1 = &data16[1 * map1idx];
    const double *p_z2 = &data16[1 * map2idx];
    const double *p_z3 = &data16[1 * map3idx];
    const double *p_z4 = &data16[1 * map4idx];
    const double *p_z5 = &data16[1 * map5idx];
    const double *p_z6 = &data16[1 * map6idx];
    const double *p_z7 = &data16[1 * map7idx];
    double *p_fx0 = &data24[1 * map0idx];
    double *p_fx1 = &data24[1 * map1idx];
    double *p_fx2 = &data24[1 * map2idx];
    double *p_fx3 = &data24[1 * map3idx];
    double *p_fx4 = &data24[1 * map4idx];
    double *p_fx5 = &data24[1 * map5idx];
    double *p_fx6 = &data24[1 * map6idx];
    double *p_fx7 = &data24[1 * map7idx];
    double *p_fy0 = &data32[1 * map0idx];
    double *p_fy1 = &data32[1 * map1idx];
    double *p_fy2 = &data32[1 * map2idx];
    double *p_fy3 = &data32[1 * map3idx];
    double *p_fy4 = &data32[1 * map4idx];
    double *p_fy5 = &data32[1 * map5idx];
    double *p_fy6 = &data32[1 * map6idx];
    double *p_fy7 = &data32[1 * map7idx];
    double *p_fz0 = &data40[1 * map0idx];
    double *p_fz1 = &data40[1 * map1idx];
    double *p_fz2 = &data40[1 * map2idx];
    double *p_fz3 = &data40[1 * map3idx];
    double *p_fz4 = &data40[1 * map4idx];
    double *p_fz5 = &data40[1 * map5idx];
    double *p_fz6 = &data40[1 * map6idx];
    double *p_fz7 = &data40[1 * map7idx];
    double *volume = &data48[1*n_op];
    const double *sigxx = &data49[1*n_op];
    const double *sigyy = &data50[1*n_op];
    const double *sigzz = &data51[1*n_op];

    //inline function
    
      double b[3][8] ;

      double fx_local[8] ;
      double fy_local[8] ;
      double fz_local[8] ;

      double fjxxi, fjxet, fjxze;
      double fjyxi, fjyet, fjyze;
      double fjzxi, fjzet, fjzze;
      double cjxxi, cjxet, cjxze;
      double cjyxi, cjyet, cjyze;
      double cjzxi, cjzet, cjzze;

      fjxxi = double(.125) * ( (p_x6[0]-p_x0[0]) + (p_x5[0]-p_x3[0]) - (p_x7[0]-p_x1[0]) - (p_x4[0]-p_x2[0]) );
      fjxet = double(.125) * ( (p_x6[0]-p_x0[0]) - (p_x5[0]-p_x3[0]) + (p_x7[0]-p_x1[0]) - (p_x4[0]-p_x2[0]) );
      fjxze = double(.125) * ( (p_x6[0]-p_x0[0]) + (p_x5[0]-p_x3[0]) + (p_x7[0]-p_x1[0]) + (p_x4[0]-p_x2[0]) );

      fjyxi = double(.125) * ( (p_y6[0]-p_y0[0]) + (p_y5[0]-p_y3[0]) - (p_y7[0]-p_y1[0]) - (p_y4[0]-p_y2[0]) );
      fjyet = double(.125) * ( (p_y6[0]-p_y0[0]) - (p_y5[0]-p_y3[0]) + (p_y7[0]-p_y1[0]) - (p_y4[0]-p_y2[0]) );
      fjyze = double(.125) * ( (p_y6[0]-p_y0[0]) + (p_y5[0]-p_y3[0]) + (p_y7[0]-p_y1[0]) + (p_y4[0]-p_y2[0]) );

      fjzxi = double(.125) * ( (p_z6[0]-p_z0[0]) + (p_z5[0]-p_z3[0]) - (p_z7[0]-p_z1[0]) - (p_z4[0]-p_z2[0]) );
      fjzet = double(.125) * ( (p_z6[0]-p_z0[0]) - (p_z5[0]-p_z3[0]) + (p_z7[0]-p_z1[0]) - (p_z4[0]-p_z2[0]) );
      fjzze = double(.125) * ( (p_z6[0]-p_z0[0]) + (p_z5[0]-p_z3[0]) + (p_z7[0]-p_z1[0]) + (p_z4[0]-p_z2[0]) );

      cjxxi =    (fjyet * fjzze) - (fjzet * fjyze);
      cjxet =  - (fjyxi * fjzze) + (fjzxi * fjyze);
      cjxze =    (fjyxi * fjzet) - (fjzxi * fjyet);

      cjyxi =  - (fjxet * fjzze) + (fjzet * fjxze);
      cjyet =    (fjxxi * fjzze) - (fjzxi * fjxze);
      cjyze =  - (fjxxi * fjzet) + (fjzxi * fjxet);

      cjzxi =    (fjxet * fjyze) - (fjyet * fjxze);
      cjzet =  - (fjxxi * fjyze) + (fjyxi * fjxze);
      cjzze =    (fjxxi * fjyet) - (fjyxi * fjxet);

      b[0][0] =   -  cjxxi  -  cjxet  -  cjxze;
      b[0][1] =      cjxxi  -  cjxet  -  cjxze;
      b[0][2] =      cjxxi  +  cjxet  -  cjxze;
      b[0][3] =   -  cjxxi  +  cjxet  -  cjxze;
      b[0][4] = -b[0][2];
      b[0][5] = -b[0][3];
      b[0][6] = -b[0][0];
      b[0][7] = -b[0][1];

      b[1][0] =   -  cjyxi  -  cjyet  -  cjyze;
      b[1][1] =      cjyxi  -  cjyet  -  cjyze;
      b[1][2] =      cjyxi  +  cjyet  -  cjyze;
      b[1][3] =   -  cjyxi  +  cjyet  -  cjyze;
      b[1][4] = -b[1][2];
      b[1][5] = -b[1][3];
      b[1][6] = -b[1][0];
      b[1][7] = -b[1][1];

      b[2][0] =   -  cjzxi  -  cjzet  -  cjzze;
      b[2][1] =      cjzxi  -  cjzet  -  cjzze;
      b[2][2] =      cjzxi  +  cjzet  -  cjzze;
      b[2][3] =   -  cjzxi  +  cjzet  -  cjzze;
      b[2][4] = -b[2][2];
      b[2][5] = -b[2][3];
      b[2][6] = -b[2][0];
      b[2][7] = -b[2][1];

      volume[0] = double(8.) * ( fjxet * cjxet + fjyet * cjyet + fjzet * cjzet);


      for (int i = 0 ; i < 8 ; ++i) {
        b[0][i] = double(0.0);
        b[1][i] = double(0.0);
        b[2][i] = double(0.0);
      }

      double bisectX0, bisectY0, bisectZ0, bisectX1, bisectY1, bisectZ1;
      double areaX, areaY, areaZ;







      bisectX0 = double(0.5) * (p_x3[0] + p_x2[0] - p_x1[0] - p_x0[0]);
      bisectY0 = double(0.5) * (p_y3[0] + p_y2[0] - p_y1[0] - p_y0[0]);
      bisectZ0 = double(0.5) * (p_z3[0] + p_z2[0] - p_z1[0] - p_z0[0]);
      bisectX1 = double(0.5) * (p_x2[0] + p_x1[0] - p_x3[0] - p_x0[0]);
      bisectY1 = double(0.5) * (p_y2[0] + p_y1[0] - p_y3[0] - p_y0[0]);
      bisectZ1 = double(0.5) * (p_z2[0] + p_z1[0] - p_z3[0] - p_z0[0]);
      areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
      areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
      areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

      b[0][0] += areaX;
      b[0][1] += areaX;
      b[0][2] += areaX;
      b[0][3] += areaX;

      b[1][0] += areaY;
      b[1][1] += areaY;
      b[1][2] += areaY;
      b[1][3] += areaY;

      b[2][0] += areaZ;
      b[2][1] += areaZ;
      b[2][2] += areaZ;
      b[2][3] += areaZ;







      bisectX0 = double(0.5) * (p_x1[0] + p_x5[0] - p_x4[0] - p_x0[0]);
      bisectY0 = double(0.5) * (p_y1[0] + p_y5[0] - p_y4[0] - p_y0[0]);
      bisectZ0 = double(0.5) * (p_z1[0] + p_z5[0] - p_z4[0] - p_z0[0]);
      bisectX1 = double(0.5) * (p_x5[0] + p_x4[0] - p_x1[0] - p_x0[0]);
      bisectY1 = double(0.5) * (p_y5[0] + p_y4[0] - p_y1[0] - p_y0[0]);
      bisectZ1 = double(0.5) * (p_z5[0] + p_z4[0] - p_z1[0] - p_z0[0]);
      areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
      areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
      areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

      b[0][0] += areaX;
      b[0][4] += areaX;
      b[0][5] += areaX;
      b[0][1] += areaX;

      b[1][0] += areaY;
      b[1][4] += areaY;
      b[1][5] += areaY;
      b[1][1] += areaY;

      b[2][0] += areaZ;
      b[2][4] += areaZ;
      b[2][5] += areaZ;
      b[2][1] += areaZ;







      bisectX0 = double(0.5) * (p_x2[0] + p_x6[0] - p_x5[0] - p_x1[0]);
      bisectY0 = double(0.5) * (p_y2[0] + p_y6[0] - p_y5[0] - p_y1[0]);
      bisectZ0 = double(0.5) * (p_z2[0] + p_z6[0] - p_z5[0] - p_z1[0]);
      bisectX1 = double(0.5) * (p_x6[0] + p_x5[0] - p_x2[0] - p_x1[0]);
      bisectY1 = double(0.5) * (p_y6[0] + p_y5[0] - p_y2[0] - p_y1[0]);
      bisectZ1 = double(0.5) * (p_z6[0] + p_z5[0] - p_z2[0] - p_z1[0]);
      areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
      areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
      areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

      b[0][1] += areaX;
      b[0][5] += areaX;
      b[0][6] += areaX;
      b[0][2] += areaX;

      b[1][1] += areaY;
      b[1][5] += areaY;
      b[1][6] += areaY;
      b[1][2] += areaY;

      b[2][1] += areaZ;
      b[2][5] += areaZ;
      b[2][6] += areaZ;
      b[2][2] += areaZ;







      bisectX0 = double(0.5) * (p_x3[0] + p_x7[0] - p_x6[0] - p_x2[0]);
      bisectY0 = double(0.5) * (p_y3[0] + p_y7[0] - p_y6[0] - p_y2[0]);
      bisectZ0 = double(0.5) * (p_z3[0] + p_z7[0] - p_z6[0] - p_z2[0]);
      bisectX1 = double(0.5) * (p_x7[0] + p_x6[0] - p_x3[0] - p_x2[0]);
      bisectY1 = double(0.5) * (p_y7[0] + p_y6[0] - p_y3[0] - p_y2[0]);
      bisectZ1 = double(0.5) * (p_z7[0] + p_z6[0] - p_z3[0] - p_z2[0]);
      areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
      areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
      areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

      b[0][2] += areaX;
      b[0][6] += areaX;
      b[0][7] += areaX;
      b[0][3] += areaX;

      b[1][2] += areaY;
      b[1][6] += areaY;
      b[1][7] += areaY;
      b[1][3] += areaY;

      b[2][2] += areaZ;
      b[2][6] += areaZ;
      b[2][7] += areaZ;
      b[2][3] += areaZ;







      bisectX0 = double(0.5) * (p_x0[0] + p_x4[0] - p_x7[0] - p_x3[0]);
      bisectY0 = double(0.5) * (p_y0[0] + p_y4[0] - p_y7[0] - p_y3[0]);
      bisectZ0 = double(0.5) * (p_z0[0] + p_z4[0] - p_z7[0] - p_z3[0]);
      bisectX1 = double(0.5) * (p_x4[0] + p_x7[0] - p_x0[0] - p_x3[0]);
      bisectY1 = double(0.5) * (p_y4[0] + p_y7[0] - p_y0[0] - p_y3[0]);
      bisectZ1 = double(0.5) * (p_z4[0] + p_z7[0] - p_z0[0] - p_z3[0]);
      areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
      areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
      areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

      b[0][3] += areaX;
      b[0][7] += areaX;
      b[0][4] += areaX;
      b[0][0] += areaX;

      b[1][3] += areaY;
      b[1][7] += areaY;
      b[1][4] += areaY;
      b[1][0] += areaY;

      b[2][3] += areaZ;
      b[2][7] += areaZ;
      b[2][4] += areaZ;
      b[2][0] += areaZ;







      bisectX0 = double(0.5) * (p_x5[0] + p_x6[0] - p_x7[0] - p_x4[0]);
      bisectY0 = double(0.5) * (p_y5[0] + p_y6[0] - p_y7[0] - p_y4[0]);
      bisectZ0 = double(0.5) * (p_z5[0] + p_z6[0] - p_z7[0] - p_z4[0]);
      bisectX1 = double(0.5) * (p_x6[0] + p_x7[0] - p_x5[0] - p_x4[0]);
      bisectY1 = double(0.5) * (p_y6[0] + p_y7[0] - p_y5[0] - p_y4[0]);
      bisectZ1 = double(0.5) * (p_z6[0] + p_z7[0] - p_z5[0] - p_z4[0]);
      areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
      areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
      areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

      b[0][4] += areaX;
      b[0][7] += areaX;
      b[0][6] += areaX;
      b[0][5] += areaX;

      b[1][4] += areaY;
      b[1][7] += areaY;
      b[1][6] += areaY;
      b[1][5] += areaY;

      b[2][4] += areaZ;
      b[2][7] += areaZ;
      b[2][6] += areaZ;
      b[2][5] += areaZ;






      for(int i = 0; i < 8; i++) {
          fx_local[i] = -( sigxx[0] * b[0][i] );
          fy_local[i] = -( sigyy[0] * b[1][i]  );
          fz_local[i] = -( sigzz[0] * b[2][i] );
      }









      p_fx0[0] += fx_local[0];
      p_fx1[0] += fx_local[1];
      p_fx2[0] += fx_local[2];
      p_fx3[0] += fx_local[3];
      p_fx4[0] += fx_local[4];
      p_fx5[0] += fx_local[5];
      p_fx6[0] += fx_local[6];
      p_fx7[0] += fx_local[7];

      p_fy0[0] += fy_local[0];
      p_fy1[0] += fy_local[1];
      p_fy2[0] += fy_local[2];
      p_fy3[0] += fy_local[3];
      p_fy4[0] += fy_local[4];
      p_fy5[0] += fy_local[5];
      p_fy6[0] += fy_local[6];
      p_fy7[0] += fy_local[7];

      p_fz0[0] += fz_local[0];
      p_fz1[0] += fz_local[1];
      p_fz2[0] += fz_local[2];
      p_fz3[0] += fz_local[3];
      p_fz4[0] += fz_local[4];
      p_fz5[0] += fz_local[5];
      p_fz6[0] += fz_local[6];
      p_fz7[0] += fz_local[7];
    //end inline func
  }

}
