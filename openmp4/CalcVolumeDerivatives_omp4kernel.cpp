//
// auto-generated by op2.py
//

//user function
//user function

void CalcVolumeDerivatives_omp4_kernel(
  int *map0,
  int map0size,
  double *data24,
  int dat24size,
  double *data25,
  int dat25size,
  double *data26,
  int dat26size,
  double *data27,
  int dat27size,
  double *data28,
  int dat28size,
  double *data29,
  int dat29size,
  double *data30,
  int dat30size,
  double *data31,
  int dat31size,
  double *data32,
  int dat32size,
  double *data0,
  int dat0size,
  double *data8,
  int dat8size,
  double *data16,
  int dat16size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread);

// host stub function
void op_par_loop_CalcVolumeDerivatives(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32){

  int nargs = 33;
  op_arg args[33];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;

  int  ninds   = 3;
  int  inds[33] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: CalcVolumeDerivatives\n");
  }

  // get plan
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);

  #ifdef OP_PART_SIZE_3
    int part_size = OP_PART_SIZE_3;
  #else
    int part_size = OP_part_size;
  #endif
  #ifdef OP_BLOCK_SIZE_3
    int nthread = OP_BLOCK_SIZE_3;
  #else
    int nthread = OP_block_size;
  #endif


  int ncolors = 0;
  int set_size1 = set->size + set->exec_size;

  if (set_size >0) {

    //Set up typed device pointers for OpenMP
    int *map0 = arg0.map_data_d;
     int map0size = arg0.map->dim * set_size1;

    double* data24 = (double*)arg24.data_d;
    int dat24size = getSetSizeFromOpArg(&arg24) * arg24.dat->dim;
    double* data25 = (double*)arg25.data_d;
    int dat25size = getSetSizeFromOpArg(&arg25) * arg25.dat->dim;
    double* data26 = (double*)arg26.data_d;
    int dat26size = getSetSizeFromOpArg(&arg26) * arg26.dat->dim;
    double* data27 = (double*)arg27.data_d;
    int dat27size = getSetSizeFromOpArg(&arg27) * arg27.dat->dim;
    double* data28 = (double*)arg28.data_d;
    int dat28size = getSetSizeFromOpArg(&arg28) * arg28.dat->dim;
    double* data29 = (double*)arg29.data_d;
    int dat29size = getSetSizeFromOpArg(&arg29) * arg29.dat->dim;
    double* data30 = (double*)arg30.data_d;
    int dat30size = getSetSizeFromOpArg(&arg30) * arg30.dat->dim;
    double* data31 = (double*)arg31.data_d;
    int dat31size = getSetSizeFromOpArg(&arg31) * arg31.dat->dim;
    double* data32 = (double*)arg32.data_d;
    int dat32size = getSetSizeFromOpArg(&arg32) * arg32.dat->dim;
    double *data0 = (double *)arg0.data_d;
    int dat0size = getSetSizeFromOpArg(&arg0) * arg0.dat->dim;
    double *data8 = (double *)arg8.data_d;
    int dat8size = getSetSizeFromOpArg(&arg8) * arg8.dat->dim;
    double *data16 = (double *)arg16.data_d;
    int dat16size = getSetSizeFromOpArg(&arg16) * arg16.dat->dim;

    op_plan *Plan = op_plan_get_stage(name,set,part_size,nargs,args,ninds,inds,OP_COLOR2);
    ncolors = Plan->ncolors;
    int *col_reord = Plan->col_reord;

    // execute plan
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = Plan->col_offsets[0][col];
      int end = Plan->col_offsets[0][col+1];

      CalcVolumeDerivatives_omp4_kernel(
        map0,
        map0size,
        data24,
        dat24size,
        data25,
        dat25size,
        data26,
        dat26size,
        data27,
        dat27size,
        data28,
        dat28size,
        data29,
        dat29size,
        data30,
        dat30size,
        data31,
        dat31size,
        data32,
        dat32size,
        data0,
        dat0size,
        data8,
        dat8size,
        data16,
        dat16size,
        col_reord,
        set_size1,
        start,
        end,
        part_size!=0?(end-start-1)/part_size+1:(end-start-1)/nthread,
        nthread);

    }
    OP_kernels[3].transfer  += Plan->transfer;
    OP_kernels[3].transfer2 += Plan->transfer2;
  }

  if (set_size == 0 || set_size == set->core_size || ncolors == 1) {
    op_mpi_wait_all_cuda(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit_cuda(nargs, args);

  if (OP_diags>1) deviceSync();
  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].time     += wall_t2 - wall_t1;
}
