//
// auto-generated by op2.py
//

void CalcVolumeDerivatives_omp4_kernel(
  int *map0,
  int map0size,
  double *data24,
  int dat24size,
  double *data25,
  int dat25size,
  double *data26,
  int dat26size,
  double *data27,
  int dat27size,
  double *data28,
  int dat28size,
  double *data29,
  int dat29size,
  double *data30,
  int dat30size,
  double *data31,
  int dat31size,
  double *data32,
  int dat32size,
  double *data0,
  int dat0size,
  double *data8,
  int dat8size,
  double *data16,
  int dat16size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data24[0:dat24size],data25[0:dat25size],data26[0:dat26size],data27[0:dat27size],data28[0:dat28size],data29[0:dat29size],data30[0:dat30size],data31[0:dat31size],data32[0:dat32size]) \
    map(to: m_twelfth_ompkernel)\
    map(to:col_reord[0:set_size1],map0[0:map0size],data0[0:dat0size],data8[0:dat8size],data16[0:dat16size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    int map4idx;
    int map5idx;
    int map6idx;
    int map7idx;
    map0idx = map0[n_op + set_size1 * 0];
    map1idx = map0[n_op + set_size1 * 1];
    map2idx = map0[n_op + set_size1 * 2];
    map3idx = map0[n_op + set_size1 * 3];
    map4idx = map0[n_op + set_size1 * 4];
    map5idx = map0[n_op + set_size1 * 5];
    map6idx = map0[n_op + set_size1 * 6];
    map7idx = map0[n_op + set_size1 * 7];

    //variable mapping
    const double *p_x0 = &data0[1 * map0idx];
    const double *p_x1 = &data0[1 * map1idx];
    const double *p_x2 = &data0[1 * map2idx];
    const double *p_x3 = &data0[1 * map3idx];
    const double *p_x4 = &data0[1 * map4idx];
    const double *p_x5 = &data0[1 * map5idx];
    const double *p_x6 = &data0[1 * map6idx];
    const double *p_x7 = &data0[1 * map7idx];
    const double *p_y0 = &data8[1 * map0idx];
    const double *p_y1 = &data8[1 * map1idx];
    const double *p_y2 = &data8[1 * map2idx];
    const double *p_y3 = &data8[1 * map3idx];
    const double *p_y4 = &data8[1 * map4idx];
    const double *p_y5 = &data8[1 * map5idx];
    const double *p_y6 = &data8[1 * map6idx];
    const double *p_y7 = &data8[1 * map7idx];
    const double *p_z0 = &data16[1 * map0idx];
    const double *p_z1 = &data16[1 * map1idx];
    const double *p_z2 = &data16[1 * map2idx];
    const double *p_z3 = &data16[1 * map3idx];
    const double *p_z4 = &data16[1 * map4idx];
    const double *p_z5 = &data16[1 * map5idx];
    const double *p_z6 = &data16[1 * map6idx];
    const double *p_z7 = &data16[1 * map7idx];
    double *p_dvdx = &data24[8*n_op];
    double *p_dvdy = &data25[8*n_op];
    double *p_dvdz = &data26[8*n_op];
    double *p_x8n = &data27[8*n_op];
    double *p_y8n = &data28[8*n_op];
    double *p_z8n = &data29[8*n_op];
    const double *p_v = &data30[1*n_op];
    double *p_determ = &data31[1*n_op];
    const double *p_volo = &data32[1*n_op];

    //inline function
    







          p_dvdx[0] =
          (p_y2[0] + p_y3[0]) * (p_z1[0] + p_z2[0]) - (p_y1[0] + p_y2[0]) * (p_z2[0] + p_z3[0]) +
          (p_y1[0] + p_y5[0]) * (p_z4[0] + p_z5[0]) - (p_y4[0] + p_y5[0]) * (p_z1[0] + p_z5[0]) -
          (p_y3[0] + p_y7[0]) * (p_z4[0] + p_z7[0]) + (p_y4[0] + p_y7[0]) * (p_z3[0] + p_z7[0]);
          p_dvdy[0] =
          - (p_x2[0] + p_x3[0]) * (p_z1[0] + p_z2[0]) + (p_x1[0] + p_x2[0]) * (p_z2[0] + p_z3[0]) -
          (p_x1[0] + p_x5[0]) * (p_z4[0] + p_z5[0]) + (p_x4[0] + p_x5[0]) * (p_z1[0] + p_z5[0]) +
          (p_x3[0] + p_x7[0]) * (p_z4[0] + p_z7[0]) - (p_x4[0] + p_x7[0]) * (p_z3[0] + p_z7[0]);

          p_dvdz[0] =
          - (p_y2[0] + p_y3[0]) * (p_x1[0] + p_x2[0]) + (p_y1[0] + p_y2[0]) * (p_x2[0] + p_x3[0]) -
          (p_y1[0] + p_y5[0]) * (p_x4[0] + p_x5[0]) + (p_y4[0] + p_y5[0]) * (p_x1[0] + p_x5[0]) +
          (p_y3[0] + p_y7[0]) * (p_x4[0] + p_x7[0]) - (p_y4[0] + p_y7[0]) * (p_x3[0] + p_x7[0]);

          p_dvdx[0] *= m_twelfth_ompkernel;
          p_dvdy[0] *= m_twelfth_ompkernel;
          p_dvdz[0] *= m_twelfth_ompkernel;





          p_dvdx[3] =
          (p_y1[0] + p_y2[0]) * (p_z0[0] + p_z1[0]) - (p_y0[0] + p_y1[0]) * (p_z1[0] + p_z2[0]) +
          (p_y0[0] + p_y4[0]) * (p_z7[0] + p_z4[0]) - (p_y7[0] + p_y4[0]) * (p_z0[0] + p_z4[0]) -
          (p_y2[0] + p_y6[0]) * (p_z7[0] + p_z6[0]) + (p_y7[0] + p_y6[0]) * (p_z2[0] + p_z6[0]);
          p_dvdy[3] =
          - (p_x1[0] + p_x2[0]) * (p_z0[0] + p_z1[0]) + (p_x0[0] + p_x1[0]) * (p_z1[0] + p_z2[0]) -
          (p_x0[0] + p_x4[0]) * (p_z7[0] + p_z4[0]) + (p_x7[0] + p_x4[0]) * (p_z0[0] + p_z4[0]) +
          (p_x2[0] + p_x6[0]) * (p_z7[0] + p_z6[0]) - (p_x7[0] + p_x6[0]) * (p_z2[0] + p_z6[0]);
          p_dvdz[3] =
          - (p_y1[0] + p_y2[0]) * (p_x0[0] + p_x1[0]) + (p_y0[0] + p_y1[0]) * (p_x1[0] + p_x2[0]) -
          (p_y0[0] + p_y4[0]) * (p_x7[0] + p_x4[0]) + (p_y7[0] + p_y4[0]) * (p_x0[0] + p_x4[0]) +
          (p_y2[0] + p_y6[0]) * (p_x7[0] + p_x6[0]) - (p_y7[0] + p_y6[0]) * (p_x2[0] + p_x6[0]);

          p_dvdx[3] *= m_twelfth_ompkernel;
          p_dvdy[3] *= m_twelfth_ompkernel;
          p_dvdz[3] *= m_twelfth_ompkernel;





          p_dvdx[2] =
          (p_y0[0] + p_y1[0]) * (p_z3[0] + p_z0[0]) - (p_y3[0] + p_y0[0]) * (p_z0[0] + p_z1[0]) +
          (p_y3[0] + p_y7[0]) * (p_z6[0] + p_z7[0]) - (p_y6[0] + p_y7[0]) * (p_z3[0] + p_z7[0]) -
          (p_y1[0] + p_y5[0]) * (p_z6[0] + p_z5[0]) + (p_y6[0] + p_y5[0]) * (p_z1[0] + p_z5[0]);
          p_dvdy[2] =
          - (p_x0[0] + p_x1[0]) * (p_z3[0] + p_z0[0]) + (p_x3[0] + p_x0[0]) * (p_z0[0] + p_z1[0]) -
          (p_x3[0] + p_x7[0]) * (p_z6[0] + p_z7[0]) + (p_x6[0] + p_x7[0]) * (p_z3[0] + p_z7[0]) +
          (p_x1[0] + p_x5[0]) * (p_z6[0] + p_z5[0]) - (p_x6[0] + p_x5[0]) * (p_z1[0] + p_z5[0]);

          p_dvdz[2] =
          - (p_y0[0] + p_y1[0]) * (p_x3[0] + p_x0[0]) + (p_y3[0] + p_y0[0]) * (p_x0[0] + p_x1[0]) -
          (p_y3[0] + p_y7[0]) * (p_x6[0] + p_x7[0]) + (p_y6[0] + p_y7[0]) * (p_x3[0] + p_x7[0]) +
          (p_y1[0] + p_y5[0]) * (p_x6[0] + p_x5[0]) - (p_y6[0] + p_y5[0]) * (p_x1[0] + p_x5[0]);

          p_dvdx[2] *= m_twelfth_ompkernel;
          p_dvdy[2] *= m_twelfth_ompkernel;
          p_dvdz[2] *= m_twelfth_ompkernel;




          p_dvdx[1] =
          (p_y3[0] + p_y0[0]) * (p_z2[0] + p_z3[0]) - (p_y2[0] + p_y3[0]) * (p_z3[0] + p_z0[0]) +
          (p_y2[0] + p_y6[0]) * (p_z5[0] + p_z6[0]) - (p_y5[0] + p_y6[0]) * (p_z2[0] + p_z6[0]) -
          (p_y0[0] + p_y4[0]) * (p_z5[0] + p_z4[0]) + (p_y5[0] + p_y4[0]) * (p_z0[0] + p_z4[0]);
          p_dvdy[1] =
          - (p_x3[0] + p_x0[0]) * (p_z2[0] + p_z3[0]) + (p_x2[0] + p_x3[0]) * (p_z3[0] + p_z0[0]) -
          (p_x2[0] + p_x6[0]) * (p_z5[0] + p_z6[0]) + (p_x5[0] + p_x6[0]) * (p_z2[0] + p_z6[0]) +
          (p_x0[0] + p_x4[0]) * (p_z5[0] + p_z4[0]) - (p_x5[0] + p_x4[0]) * (p_z0[0] + p_z4[0]);
          p_dvdz[1] =
          - (p_y3[0] + p_y0[0]) * (p_x2[0] + p_x3[0]) + (p_y2[0] + p_y3[0]) * (p_x3[0] + p_x0[0]) -
          (p_y2[0] + p_y6[0]) * (p_x5[0] + p_x6[0]) + (p_y5[0] + p_y6[0]) * (p_x2[0] + p_x6[0]) +
          (p_y0[0] + p_y4[0]) * (p_x5[0] + p_x4[0]) - (p_y5[0] + p_y4[0]) * (p_x0[0] + p_x4[0]);

          p_dvdx[1] *= m_twelfth_ompkernel;
          p_dvdy[1] *= m_twelfth_ompkernel;
          p_dvdz[1] *= m_twelfth_ompkernel;




          p_dvdx[4] =
          (p_y6[0] + p_y5[0]) * (p_z7[0] + p_z6[0]) - (p_y7[0] + p_y6[0]) * (p_z6[0] + p_z5[0]) +
          (p_y7[0] + p_y3[0]) * (p_z0[0] + p_z3[0]) - (p_y0[0] + p_y3[0]) * (p_z7[0] + p_z3[0]) -
          (p_y5[0] + p_y1[0]) * (p_z0[0] + p_z1[0]) + (p_y0[0] + p_y1[0]) * (p_z5[0] + p_z1[0]);
          p_dvdy[4] =
          - (p_x6[0] + p_x5[0]) * (p_z7[0] + p_z6[0]) + (p_x7[0] + p_x6[0]) * (p_z6[0] + p_z5[0]) -
          (p_x7[0] + p_x3[0]) * (p_z0[0] + p_z3[0]) + (p_x0[0] + p_x3[0]) * (p_z7[0] + p_z3[0]) +
          (p_x5[0] + p_x1[0]) * (p_z0[0] + p_z1[0]) - (p_x0[0] + p_x1[0]) * (p_z5[0] + p_z1[0]);

          p_dvdz[4] =
          - (p_y6[0] + p_y5[0]) * (p_x7[0] + p_x6[0]) + (p_y7[0] + p_y6[0]) * (p_x6[0] + p_x5[0]) -
          (p_y7[0] + p_y3[0]) * (p_x0[0] + p_x3[0]) + (p_y0[0] + p_y3[0]) * (p_x7[0] + p_x3[0]) +
          (p_y5[0] + p_y1[0]) * (p_x0[0] + p_x1[0]) - (p_y0[0] + p_y1[0]) * (p_x5[0] + p_x1[0]);

          p_dvdx[4] *= m_twelfth_ompkernel;
          p_dvdy[4] *= m_twelfth_ompkernel;
          p_dvdz[4] *= m_twelfth_ompkernel;




          p_dvdx[5] =
          (p_y7[0] + p_y6[0]) * (p_z4[0] + p_z7[0]) - (p_y4[0] + p_y7[0]) * (p_z7[0] + p_z6[0]) +
          (p_y4[0] + p_y0[0]) * (p_z1[0] + p_z0[0]) - (p_y1[0] + p_y0[0]) * (p_z4[0] + p_z0[0]) -
          (p_y6[0] + p_y2[0]) * (p_z1[0] + p_z2[0]) + (p_y1[0] + p_y2[0]) * (p_z6[0] + p_z2[0]);
          p_dvdy[5] =
          - (p_x7[0] + p_x6[0]) * (p_z4[0] + p_z7[0]) + (p_x4[0] + p_x7[0]) * (p_z7[0] + p_z6[0]) -
          (p_x4[0] + p_x0[0]) * (p_z1[0] + p_z0[0]) + (p_x1[0] + p_x0[0]) * (p_z4[0] + p_z0[0]) +
          (p_x6[0] + p_x2[0]) * (p_z1[0] + p_z2[0]) - (p_x1[0] + p_x2[0]) * (p_z6[0] + p_z2[0]);

          p_dvdz[5] =
          - (p_y7[0] + p_y6[0]) * (p_x4[0] + p_x7[0]) + (p_y4[0] + p_y7[0]) * (p_x7[0] + p_x6[0]) -
          (p_y4[0] + p_y0[0]) * (p_x1[0] + p_x0[0]) + (p_y1[0] + p_y0[0]) * (p_x4[0] + p_x0[0]) +
          (p_y6[0] + p_y2[0]) * (p_x1[0] + p_x2[0]) - (p_y1[0] + p_y2[0]) * (p_x6[0] + p_x2[0]);

          p_dvdx[5] *= m_twelfth_ompkernel;
          p_dvdy[5] *= m_twelfth_ompkernel;
          p_dvdz[5] *= m_twelfth_ompkernel;





          p_dvdx[6] =
          (p_y4[0] + p_y7[0]) * (p_z5[0] + p_z4[0]) - (p_y5[0] + p_y4[0]) * (p_z4[0] + p_z7[0]) +
          (p_y5[0] + p_y1[0]) * (p_z2[0] + p_z1[0]) - (p_y2[0] + p_y1[0]) * (p_z5[0] + p_z1[0]) -
          (p_y7[0] + p_y3[0]) * (p_z2[0] + p_z3[0]) + (p_y2[0] + p_y3[0]) * (p_z7[0] + p_z3[0]);
          p_dvdy[6] =
          - (p_x4[0] + p_x7[0]) * (p_z5[0] + p_z4[0]) + (p_x5[0] + p_x4[0]) * (p_z4[0] + p_z7[0]) -
          (p_x5[0] + p_x1[0]) * (p_z2[0] + p_z1[0]) + (p_x2[0] + p_x1[0]) * (p_z5[0] + p_z1[0]) +
          (p_x7[0] + p_x3[0]) * (p_z2[0] + p_z3[0]) - (p_x2[0] + p_x3[0]) * (p_z7[0] + p_z3[0]);

          p_dvdz[6] =
          - (p_y4[0] + p_y7[0]) * (p_x5[0] + p_x4[0]) + (p_y5[0] + p_y4[0]) * (p_x4[0] + p_x7[0]) -
          (p_y5[0] + p_y1[0]) * (p_x2[0] + p_x1[0]) + (p_y2[0] + p_y1[0]) * (p_x5[0] + p_x1[0]) +
          (p_y7[0] + p_y3[0]) * (p_x2[0] + p_x3[0]) - (p_y2[0] + p_y3[0]) * (p_x7[0] + p_x3[0]);
          p_dvdx[6] *= m_twelfth_ompkernel;
          p_dvdy[6] *= m_twelfth_ompkernel;
          p_dvdz[6] *= m_twelfth_ompkernel;




          p_dvdx[7] =
          (p_y5[0] + p_y4[0]) * (p_z6[0] + p_z5[0]) - (p_y6[0] + p_y5[0]) * (p_z5[0] + p_z4[0]) +
          (p_y6[0] + p_y2[0]) * (p_z3[0] + p_z2[0]) - (p_y3[0] + p_y2[0]) * (p_z6[0] + p_z2[0]) -
          (p_y4[0] + p_y0[0]) * (p_z3[0] + p_z0[0]) + (p_y3[0] + p_y0[0]) * (p_z4[0] + p_z0[0]);
          p_dvdy[7] =
          - (p_x5[0] + p_x4[0]) * (p_z6[0] + p_z5[0]) + (p_x6[0] + p_x5[0]) * (p_z5[0] + p_z4[0]) -
          (p_x6[0] + p_x2[0]) * (p_z3[0] + p_z2[0]) + (p_x3[0] + p_x2[0]) * (p_z6[0] + p_z2[0]) +
          (p_x4[0] + p_x0[0]) * (p_z3[0] + p_z0[0]) - (p_x3[0] + p_x0[0]) * (p_z4[0] + p_z0[0]);

          p_dvdz[7] =
          - (p_y5[0] + p_y4[0]) * (p_x6[0] + p_x5[0]) + (p_y6[0] + p_y5[0]) * (p_x5[0] + p_x4[0]) -
          (p_y6[0] + p_y2[0]) * (p_x3[0] + p_x2[0]) + (p_y3[0] + p_y2[0]) * (p_x6[0] + p_x2[0]) +
          (p_y4[0] + p_y0[0]) * (p_x3[0] + p_x0[0]) - (p_y3[0] + p_y0[0]) * (p_x4[0] + p_x0[0]);
          p_dvdx[7] *= m_twelfth_ompkernel;
          p_dvdy[7] *= m_twelfth_ompkernel;
          p_dvdz[7] *= m_twelfth_ompkernel;











          p_x8n[0] = p_x0[0];
          p_y8n[0] = p_y0[0];
          p_z8n[0] = p_z0[0];

          p_x8n[1] = p_x1[0];
          p_y8n[1] = p_y1[0];
          p_z8n[1] = p_z1[0];

          p_x8n[2] = p_x2[0];
          p_y8n[2] = p_y2[0];
          p_z8n[2] = p_z2[0];

          p_x8n[3] = p_x3[0];
          p_y8n[3] = p_y3[0];
          p_z8n[3] = p_z3[0];

          p_x8n[4] = p_x4[0];
          p_y8n[4] = p_y4[0];
          p_z8n[4] = p_z4[0];

          p_x8n[5] = p_x5[0];
          p_y8n[5] = p_y5[0];
          p_z8n[5] = p_z5[0];

          p_x8n[6] = p_x6[0];
          p_y8n[6] = p_y6[0];
          p_z8n[6] = p_z6[0];

          p_x8n[7] = p_x7[0];
          p_y8n[7] = p_y7[0];
          p_z8n[7] = p_z7[0];

          p_determ[0] = p_volo[0] * p_v[0];

          if(p_v[0] <= 0.0){

          }
    //end inline func
  }

}
