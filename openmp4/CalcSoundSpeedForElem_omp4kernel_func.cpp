//
// auto-generated by op2.py
//

void CalcSoundSpeedForElem_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size]) \
    map(to: m_refdens_ompkernel, m_ssc_thresh_ompkernel, m_ssc_low_ompkernel)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *pbvc = &data0[1*n_op];
    const double *enewc = &data1[1*n_op];
    const double *vnewc = &data2[1*n_op];
    const double *bvc = &data3[1*n_op];
    const double *pnewc = &data4[1*n_op];
    double *ss = &data5[1*n_op];

    //inline function
    
      double ssTmp = (pbvc[0] * enewc[0] + vnewc[0] * vnewc[0] *
                  bvc[0] * pnewc[0]) / m_refdens_ompkernel;
      if (ssTmp <= m_ssc_thresh_ompkernel) {
          ssTmp = m_ssc_low_ompkernel;
      }
      else {
          ssTmp = sqrt(ssTmp);
      }
      ss[0] = ssTmp ;
    //end inline func
  }

}
