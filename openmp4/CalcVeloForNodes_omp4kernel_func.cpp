//
// auto-generated by op2.py
//

void CalcVeloForNodes_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *arg6,
  int count,
  int num_teams,
  int nthread){

  double arg6_l = *arg6;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size]) \
    map(to: m_u_cut_ompkernel)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    double *xd = &data0[1*n_op];
    double *yd = &data1[1*n_op];
    double *zd = &data2[1*n_op];
    const double *xdd = &data3[1*n_op];
    const double *ydd = &data4[1*n_op];
    const double *zdd = &data5[1*n_op];
    const double *dt = &arg6_l;

    //inline function
    

      double xdtmp, ydtmp, zdtmp ;

      xdtmp = xd[0] + xdd[0] * (*dt) ;
      if( fabs(xdtmp) < m_u_cut_ompkernel ) xdtmp = double(0.0);
      xd[0] = xdtmp ;

      ydtmp = yd[0] + ydd[0] * (*dt) ;
      if( fabs(ydtmp) < m_u_cut_ompkernel ) ydtmp = double(0.0);
      yd[0] = ydtmp ;

      zdtmp = zd[0] + zdd[0] * (*dt) ;
      if( fabs(zdtmp) < m_u_cut_ompkernel ) zdtmp = double(0.0);

      zd[0] = zdtmp ;
    //end inline func
  }

  *arg6 = arg6_l;
}
