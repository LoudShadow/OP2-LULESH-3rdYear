//
// auto-generated by op2.py
//

void CalcNewEStep4_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  double *data10,
  int dat10size,
  double *data11,
  int dat11size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size],data10[0:dat10size],data11[0:dat11size]) \
    map(to: m_e_cut_ompkernel, m_emin_ompkernel, m_refdens_ompkernel, m_sixth_ompkernel, m_ssc_thresh_ompkernel, m_ssc_low_ompkernel)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *delvc = &data0[1*n_op];
    const double *pbvc = &data1[1*n_op];
    double *e_new = &data2[1*n_op];
    const double *vnewc = &data3[1*n_op];
    const double *bvc = &data4[1*n_op];
    const double *p_new = &data5[1*n_op];
    const double *ql_old = &data6[1*n_op];
    const double *qq_old = &data7[1*n_op];
    const double *p_old = &data8[1*n_op];
    const double *q_old = &data9[1*n_op];
    const double *q_new = &data10[1*n_op];
    const double *pHalfStep = &data11[1*n_op];

    //inline function
    

      double q_tilde ;

      if (delvc[0] > double(0.)) {
          q_tilde = double(0.) ;
      }
      else {
          double ssc = ( pbvc[0] * e_new[0]
                  + vnewc[0] * vnewc[0] * bvc[0] * p_new[0] ) / m_refdens_ompkernel ;

          if ( ssc <= m_ssc_thresh_ompkernel ) {
          ssc = m_ssc_low_ompkernel ;
          } else {
          ssc = sqrt(ssc) ;
          }

          q_tilde = (ssc*ql_old[0] + qq_old[0]) ;
      }

      e_new[0] = e_new[0] - (  double(7.0)*(p_old[0]     + q_old[0])
                              - double(8.0)*(pHalfStep[0] + q_new[0])
                              + (p_new[0] + q_tilde)) * delvc[0]*m_sixth_ompkernel ;

      if (fabs(e_new[0]) < m_e_cut_ompkernel) {
          e_new[0] = double(0.)  ;
      }
      if (     e_new[0]  < m_emin_ompkernel ) {
          e_new[0] = m_emin_ompkernel ;
      }
    //end inline func
  }

}
