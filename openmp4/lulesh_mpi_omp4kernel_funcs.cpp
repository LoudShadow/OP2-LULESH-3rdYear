//
// auto-generated by op2.py
//

// global constants
double m_e_cut_ompkernel;
double m_p_cut_ompkernel;
double m_q_cut_ompkernel;
double m_v_cut_ompkernel;
double m_u_cut_ompkernel;
double m_hgcoef_ompkernel;
double m_ss4o3_ompkernel;
double m_qstop_ompkernel;
double m_monoq_max_slope_ompkernel;
double m_monoq_limiter_mult_ompkernel;
double m_qlc_monoq_ompkernel;
double m_qqc_monoq_ompkernel;
double m_qqc_ompkernel;
double m_eosvmax_ompkernel;
double m_eosvmin_ompkernel;
double m_pmin_ompkernel;
double m_emin_ompkernel;
double m_dvovmax_ompkernel;
double m_refdens_ompkernel;
double m_qqc2_ompkernel;
double m_ptiny_ompkernel;
double m_gamma_t_ompkernel[32];
double m_twelfth_ompkernel;
double m_sixth_ompkernel;
double m_c1s_ompkernel;
double m_ssc_thresh_ompkernel;
double m_ssc_low_ompkernel;

// header
#include "op_lib_cpp.h"

void op_decl_const_char(int dim, char const *type,
  int size, char *dat, char const *name){
  if(!strcmp(name, "m_e_cut")) {
    memcpy(&m_e_cut_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_e_cut_ompkernel)
  } else if(!strcmp(name, "m_p_cut")) {
    memcpy(&m_p_cut_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_p_cut_ompkernel)
  } else if(!strcmp(name, "m_q_cut")) {
    memcpy(&m_q_cut_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_q_cut_ompkernel)
  } else if(!strcmp(name, "m_v_cut")) {
    memcpy(&m_v_cut_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_v_cut_ompkernel)
  } else if(!strcmp(name, "m_u_cut")) {
    memcpy(&m_u_cut_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_u_cut_ompkernel)
  } else if(!strcmp(name, "m_hgcoef")) {
    memcpy(&m_hgcoef_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_hgcoef_ompkernel)
  } else if(!strcmp(name, "m_ss4o3")) {
    memcpy(&m_ss4o3_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_ss4o3_ompkernel)
  } else if(!strcmp(name, "m_qstop")) {
    memcpy(&m_qstop_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_qstop_ompkernel)
  } else if(!strcmp(name, "m_monoq_max_slope")) {
    memcpy(&m_monoq_max_slope_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_monoq_max_slope_ompkernel)
  } else if(!strcmp(name, "m_monoq_limiter_mult")) {
    memcpy(&m_monoq_limiter_mult_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_monoq_limiter_mult_ompkernel)
  } else if(!strcmp(name, "m_qlc_monoq")) {
    memcpy(&m_qlc_monoq_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_qlc_monoq_ompkernel)
  } else if(!strcmp(name, "m_qqc_monoq")) {
    memcpy(&m_qqc_monoq_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_qqc_monoq_ompkernel)
  } else if(!strcmp(name, "m_qqc")) {
    memcpy(&m_qqc_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_qqc_ompkernel)
  } else if(!strcmp(name, "m_eosvmax")) {
    memcpy(&m_eosvmax_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_eosvmax_ompkernel)
  } else if(!strcmp(name, "m_eosvmin")) {
    memcpy(&m_eosvmin_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_eosvmin_ompkernel)
  } else if(!strcmp(name, "m_pmin")) {
    memcpy(&m_pmin_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_pmin_ompkernel)
  } else if(!strcmp(name, "m_emin")) {
    memcpy(&m_emin_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_emin_ompkernel)
  } else if(!strcmp(name, "m_dvovmax")) {
    memcpy(&m_dvovmax_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_dvovmax_ompkernel)
  } else if(!strcmp(name, "m_refdens")) {
    memcpy(&m_refdens_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_refdens_ompkernel)
  } else if(!strcmp(name, "m_qqc2")) {
    memcpy(&m_qqc2_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_qqc2_ompkernel)
  } else if(!strcmp(name, "m_ptiny")) {
    memcpy(&m_ptiny_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_ptiny_ompkernel)
  } else if(!strcmp(name, "m_gamma_t")) {
    memcpy(m_gamma_t_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_gamma_t_ompkernel[:32])
  } else if(!strcmp(name, "m_twelfth")) {
    memcpy(&m_twelfth_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_twelfth_ompkernel)
  } else if(!strcmp(name, "m_sixth")) {
    memcpy(&m_sixth_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_sixth_ompkernel)
  } else if(!strcmp(name, "m_c1s")) {
    memcpy(&m_c1s_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_c1s_ompkernel)
  } else if(!strcmp(name, "m_ssc_thresh")) {
    memcpy(&m_ssc_thresh_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_ssc_thresh_ompkernel)
  } else if(!strcmp(name, "m_ssc_low")) {
    memcpy(&m_ssc_low_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:m_ssc_low_ompkernel)
  }
}
// user kernel files
#include "initStressTerms_omp4kernel_func.cpp"
#include "IntegrateStressForElemsLoop_omp4kernel_func.cpp"
#include "FBHourglassForceForElems_omp4kernel_func.cpp"
#include "CalcVolumeDerivatives_omp4kernel_func.cpp"
#include "CheckForNegativeElementVolume_omp4kernel_func.cpp"
#include "setForceToZero_omp4kernel_func.cpp"
#include "CalcAccelForNodes_omp4kernel_func.cpp"
#include "BoundaryX_omp4kernel_func.cpp"
#include "BoundaryY_omp4kernel_func.cpp"
#include "BoundaryZ_omp4kernel_func.cpp"
#include "CalcVeloForNodes_omp4kernel_func.cpp"
#include "CalcPosForNodes_omp4kernel_func.cpp"
#include "CalcKinematicsForElem_omp4kernel_func.cpp"
#include "CalcLagrangeElemRemaining_omp4kernel_func.cpp"
#include "CalcMonotonicQGradientsForElem_omp4kernel_func.cpp"
#include "CalcMonotonicQRegionForElem_omp4kernel_func.cpp"
#include "NoExcessiveArtificialViscosity_omp4kernel_func.cpp"
#include "CalcHalfStepBVC_omp4kernel_func.cpp"
#include "CalcPHalfstep_omp4kernel_func.cpp"
#include "CalcBVC_omp4kernel_func.cpp"
#include "CalcPNew_omp4kernel_func.cpp"
#include "CalcNewE_omp4kernel_func.cpp"
#include "CalcNewEStep2_omp4kernel_func.cpp"
#include "CalcNewEStep3_omp4kernel_func.cpp"
#include "CalcNewEStep4_omp4kernel_func.cpp"
#include "CalcQNew_omp4kernel_func.cpp"
#include "CalcSoundSpeedForElem_omp4kernel_func.cpp"
#include "CopyEOSValsIntoArray_omp4kernel_func.cpp"
#include "CalcHalfSteps_omp4kernel_func.cpp"
#include "CheckEOSLowerBound_omp4kernel_func.cpp"
#include "CheckEOSUpperBound_omp4kernel_func.cpp"
#include "CalcEOSWork_omp4kernel_func.cpp"
#include "CopyTempEOSVarsBack_omp4kernel_func.cpp"
#include "CopyVelocityToTempArray_omp4kernel_func.cpp"
#include "ApplyLowerBoundToVelocity_omp4kernel_func.cpp"
#include "ApplyUpperBoundToVelocity_omp4kernel_func.cpp"
#include "ALE3DRelevantCheck_omp4kernel_func.cpp"
#include "updateVolumesForElem_omp4kernel_func.cpp"
#include "CalcCourantConstraint_omp4kernel_func.cpp"
#include "CalcHydroConstraint_omp4kernel_func.cpp"
