//
// auto-generated by op2.py
//

void CalcPNew_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size]) \
    map(to: m_p_cut_ompkernel, m_eosvmax_ompkernel, m_pmin_ompkernel)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    double *p_new = &data0[1*n_op];
    const double *bvc = &data1[1*n_op];
    const double *e_old = &data2[1*n_op];
    const double *vnewc = &data3[1*n_op];

    //inline function
    
      p_new[0] = bvc[0] * e_old[0] ;

      if    (fabs(p_new[0]) <  m_p_cut_ompkernel   )
          p_new[0] = double(0.0) ;

      if    ( vnewc[0] >= m_eosvmax_ompkernel )
          p_new[0] = double(0.0) ;

      if    (p_new[0]       <  m_pmin_ompkernel)
          p_new[0]   = m_pmin_ompkernel ;
    //end inline func
  }

}
