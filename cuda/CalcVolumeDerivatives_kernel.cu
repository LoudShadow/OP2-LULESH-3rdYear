//
// auto-generated by op2.py
//

//user function
__device__ void CalcVolumeDerivatives_gpu( 
    const double *p_x0, const double *p_x1, const double *p_x2, const double *p_x3, const double *p_x4, const double *p_x5, const double *p_x6, const double *p_x7,
    const double *p_y0, const double *p_y1, const double *p_y2, const double *p_y3, const double *p_y4, const double *p_y5, const double *p_y6, const double *p_y7,
    const double *p_z0, const double *p_z1, const double *p_z2, const double *p_z3, const double *p_z4, const double *p_z5, const double *p_z6, const double *p_z7,
    double *p_dvdx,
    double *p_dvdy,
    double *p_dvdz,
    double *p_x8n,
    double *p_y8n,
    double *p_z8n,
    const double *p_v, double *p_determ, const double *p_volo
) {







        p_dvdx[0] =
        (p_y2[0] + p_y3[0]) * (p_z1[0] + p_z2[0]) - (p_y1[0] + p_y2[0]) * (p_z2[0] + p_z3[0]) +
        (p_y1[0] + p_y5[0]) * (p_z4[0] + p_z5[0]) - (p_y4[0] + p_y5[0]) * (p_z1[0] + p_z5[0]) -
        (p_y3[0] + p_y7[0]) * (p_z4[0] + p_z7[0]) + (p_y4[0] + p_y7[0]) * (p_z3[0] + p_z7[0]);
        p_dvdy[0] =
        - (p_x2[0] + p_x3[0]) * (p_z1[0] + p_z2[0]) + (p_x1[0] + p_x2[0]) * (p_z2[0] + p_z3[0]) -
        (p_x1[0] + p_x5[0]) * (p_z4[0] + p_z5[0]) + (p_x4[0] + p_x5[0]) * (p_z1[0] + p_z5[0]) +
        (p_x3[0] + p_x7[0]) * (p_z4[0] + p_z7[0]) - (p_x4[0] + p_x7[0]) * (p_z3[0] + p_z7[0]);

        p_dvdz[0] =
        - (p_y2[0] + p_y3[0]) * (p_x1[0] + p_x2[0]) + (p_y1[0] + p_y2[0]) * (p_x2[0] + p_x3[0]) -
        (p_y1[0] + p_y5[0]) * (p_x4[0] + p_x5[0]) + (p_y4[0] + p_y5[0]) * (p_x1[0] + p_x5[0]) +
        (p_y3[0] + p_y7[0]) * (p_x4[0] + p_x7[0]) - (p_y4[0] + p_y7[0]) * (p_x3[0] + p_x7[0]);

        p_dvdx[0] *= m_twelfth_cuda;
        p_dvdy[0] *= m_twelfth_cuda;
        p_dvdz[0] *= m_twelfth_cuda;





        p_dvdx[3] =
        (p_y1[0] + p_y2[0]) * (p_z0[0] + p_z1[0]) - (p_y0[0] + p_y1[0]) * (p_z1[0] + p_z2[0]) +
        (p_y0[0] + p_y4[0]) * (p_z7[0] + p_z4[0]) - (p_y7[0] + p_y4[0]) * (p_z0[0] + p_z4[0]) -
        (p_y2[0] + p_y6[0]) * (p_z7[0] + p_z6[0]) + (p_y7[0] + p_y6[0]) * (p_z2[0] + p_z6[0]);
        p_dvdy[3] =
        - (p_x1[0] + p_x2[0]) * (p_z0[0] + p_z1[0]) + (p_x0[0] + p_x1[0]) * (p_z1[0] + p_z2[0]) -
        (p_x0[0] + p_x4[0]) * (p_z7[0] + p_z4[0]) + (p_x7[0] + p_x4[0]) * (p_z0[0] + p_z4[0]) +
        (p_x2[0] + p_x6[0]) * (p_z7[0] + p_z6[0]) - (p_x7[0] + p_x6[0]) * (p_z2[0] + p_z6[0]);
        p_dvdz[3] =
        - (p_y1[0] + p_y2[0]) * (p_x0[0] + p_x1[0]) + (p_y0[0] + p_y1[0]) * (p_x1[0] + p_x2[0]) -
        (p_y0[0] + p_y4[0]) * (p_x7[0] + p_x4[0]) + (p_y7[0] + p_y4[0]) * (p_x0[0] + p_x4[0]) +
        (p_y2[0] + p_y6[0]) * (p_x7[0] + p_x6[0]) - (p_y7[0] + p_y6[0]) * (p_x2[0] + p_x6[0]);

        p_dvdx[3] *= m_twelfth_cuda;
        p_dvdy[3] *= m_twelfth_cuda;
        p_dvdz[3] *= m_twelfth_cuda;





        p_dvdx[2] =
        (p_y0[0] + p_y1[0]) * (p_z3[0] + p_z0[0]) - (p_y3[0] + p_y0[0]) * (p_z0[0] + p_z1[0]) +
        (p_y3[0] + p_y7[0]) * (p_z6[0] + p_z7[0]) - (p_y6[0] + p_y7[0]) * (p_z3[0] + p_z7[0]) -
        (p_y1[0] + p_y5[0]) * (p_z6[0] + p_z5[0]) + (p_y6[0] + p_y5[0]) * (p_z1[0] + p_z5[0]);
        p_dvdy[2] =
        - (p_x0[0] + p_x1[0]) * (p_z3[0] + p_z0[0]) + (p_x3[0] + p_x0[0]) * (p_z0[0] + p_z1[0]) -
        (p_x3[0] + p_x7[0]) * (p_z6[0] + p_z7[0]) + (p_x6[0] + p_x7[0]) * (p_z3[0] + p_z7[0]) +
        (p_x1[0] + p_x5[0]) * (p_z6[0] + p_z5[0]) - (p_x6[0] + p_x5[0]) * (p_z1[0] + p_z5[0]);

        p_dvdz[2] =
        - (p_y0[0] + p_y1[0]) * (p_x3[0] + p_x0[0]) + (p_y3[0] + p_y0[0]) * (p_x0[0] + p_x1[0]) -
        (p_y3[0] + p_y7[0]) * (p_x6[0] + p_x7[0]) + (p_y6[0] + p_y7[0]) * (p_x3[0] + p_x7[0]) +
        (p_y1[0] + p_y5[0]) * (p_x6[0] + p_x5[0]) - (p_y6[0] + p_y5[0]) * (p_x1[0] + p_x5[0]);

        p_dvdx[2] *= m_twelfth_cuda;
        p_dvdy[2] *= m_twelfth_cuda;
        p_dvdz[2] *= m_twelfth_cuda;




        p_dvdx[1] =
        (p_y3[0] + p_y0[0]) * (p_z2[0] + p_z3[0]) - (p_y2[0] + p_y3[0]) * (p_z3[0] + p_z0[0]) +
        (p_y2[0] + p_y6[0]) * (p_z5[0] + p_z6[0]) - (p_y5[0] + p_y6[0]) * (p_z2[0] + p_z6[0]) -
        (p_y0[0] + p_y4[0]) * (p_z5[0] + p_z4[0]) + (p_y5[0] + p_y4[0]) * (p_z0[0] + p_z4[0]);
        p_dvdy[1] =
        - (p_x3[0] + p_x0[0]) * (p_z2[0] + p_z3[0]) + (p_x2[0] + p_x3[0]) * (p_z3[0] + p_z0[0]) -
        (p_x2[0] + p_x6[0]) * (p_z5[0] + p_z6[0]) + (p_x5[0] + p_x6[0]) * (p_z2[0] + p_z6[0]) +
        (p_x0[0] + p_x4[0]) * (p_z5[0] + p_z4[0]) - (p_x5[0] + p_x4[0]) * (p_z0[0] + p_z4[0]);
        p_dvdz[1] =
        - (p_y3[0] + p_y0[0]) * (p_x2[0] + p_x3[0]) + (p_y2[0] + p_y3[0]) * (p_x3[0] + p_x0[0]) -
        (p_y2[0] + p_y6[0]) * (p_x5[0] + p_x6[0]) + (p_y5[0] + p_y6[0]) * (p_x2[0] + p_x6[0]) +
        (p_y0[0] + p_y4[0]) * (p_x5[0] + p_x4[0]) - (p_y5[0] + p_y4[0]) * (p_x0[0] + p_x4[0]);

        p_dvdx[1] *= m_twelfth_cuda;
        p_dvdy[1] *= m_twelfth_cuda;
        p_dvdz[1] *= m_twelfth_cuda;




        p_dvdx[4] =
        (p_y6[0] + p_y5[0]) * (p_z7[0] + p_z6[0]) - (p_y7[0] + p_y6[0]) * (p_z6[0] + p_z5[0]) +
        (p_y7[0] + p_y3[0]) * (p_z0[0] + p_z3[0]) - (p_y0[0] + p_y3[0]) * (p_z7[0] + p_z3[0]) -
        (p_y5[0] + p_y1[0]) * (p_z0[0] + p_z1[0]) + (p_y0[0] + p_y1[0]) * (p_z5[0] + p_z1[0]);
        p_dvdy[4] =
        - (p_x6[0] + p_x5[0]) * (p_z7[0] + p_z6[0]) + (p_x7[0] + p_x6[0]) * (p_z6[0] + p_z5[0]) -
        (p_x7[0] + p_x3[0]) * (p_z0[0] + p_z3[0]) + (p_x0[0] + p_x3[0]) * (p_z7[0] + p_z3[0]) +
        (p_x5[0] + p_x1[0]) * (p_z0[0] + p_z1[0]) - (p_x0[0] + p_x1[0]) * (p_z5[0] + p_z1[0]);

        p_dvdz[4] =
        - (p_y6[0] + p_y5[0]) * (p_x7[0] + p_x6[0]) + (p_y7[0] + p_y6[0]) * (p_x6[0] + p_x5[0]) -
        (p_y7[0] + p_y3[0]) * (p_x0[0] + p_x3[0]) + (p_y0[0] + p_y3[0]) * (p_x7[0] + p_x3[0]) +
        (p_y5[0] + p_y1[0]) * (p_x0[0] + p_x1[0]) - (p_y0[0] + p_y1[0]) * (p_x5[0] + p_x1[0]);

        p_dvdx[4] *= m_twelfth_cuda;
        p_dvdy[4] *= m_twelfth_cuda;
        p_dvdz[4] *= m_twelfth_cuda;




        p_dvdx[5] =
        (p_y7[0] + p_y6[0]) * (p_z4[0] + p_z7[0]) - (p_y4[0] + p_y7[0]) * (p_z7[0] + p_z6[0]) +
        (p_y4[0] + p_y0[0]) * (p_z1[0] + p_z0[0]) - (p_y1[0] + p_y0[0]) * (p_z4[0] + p_z0[0]) -
        (p_y6[0] + p_y2[0]) * (p_z1[0] + p_z2[0]) + (p_y1[0] + p_y2[0]) * (p_z6[0] + p_z2[0]);
        p_dvdy[5] =
        - (p_x7[0] + p_x6[0]) * (p_z4[0] + p_z7[0]) + (p_x4[0] + p_x7[0]) * (p_z7[0] + p_z6[0]) -
        (p_x4[0] + p_x0[0]) * (p_z1[0] + p_z0[0]) + (p_x1[0] + p_x0[0]) * (p_z4[0] + p_z0[0]) +
        (p_x6[0] + p_x2[0]) * (p_z1[0] + p_z2[0]) - (p_x1[0] + p_x2[0]) * (p_z6[0] + p_z2[0]);

        p_dvdz[5] =
        - (p_y7[0] + p_y6[0]) * (p_x4[0] + p_x7[0]) + (p_y4[0] + p_y7[0]) * (p_x7[0] + p_x6[0]) -
        (p_y4[0] + p_y0[0]) * (p_x1[0] + p_x0[0]) + (p_y1[0] + p_y0[0]) * (p_x4[0] + p_x0[0]) +
        (p_y6[0] + p_y2[0]) * (p_x1[0] + p_x2[0]) - (p_y1[0] + p_y2[0]) * (p_x6[0] + p_x2[0]);

        p_dvdx[5] *= m_twelfth_cuda;
        p_dvdy[5] *= m_twelfth_cuda;
        p_dvdz[5] *= m_twelfth_cuda;





        p_dvdx[6] =
        (p_y4[0] + p_y7[0]) * (p_z5[0] + p_z4[0]) - (p_y5[0] + p_y4[0]) * (p_z4[0] + p_z7[0]) +
        (p_y5[0] + p_y1[0]) * (p_z2[0] + p_z1[0]) - (p_y2[0] + p_y1[0]) * (p_z5[0] + p_z1[0]) -
        (p_y7[0] + p_y3[0]) * (p_z2[0] + p_z3[0]) + (p_y2[0] + p_y3[0]) * (p_z7[0] + p_z3[0]);
        p_dvdy[6] =
        - (p_x4[0] + p_x7[0]) * (p_z5[0] + p_z4[0]) + (p_x5[0] + p_x4[0]) * (p_z4[0] + p_z7[0]) -
        (p_x5[0] + p_x1[0]) * (p_z2[0] + p_z1[0]) + (p_x2[0] + p_x1[0]) * (p_z5[0] + p_z1[0]) +
        (p_x7[0] + p_x3[0]) * (p_z2[0] + p_z3[0]) - (p_x2[0] + p_x3[0]) * (p_z7[0] + p_z3[0]);

        p_dvdz[6] =
        - (p_y4[0] + p_y7[0]) * (p_x5[0] + p_x4[0]) + (p_y5[0] + p_y4[0]) * (p_x4[0] + p_x7[0]) -
        (p_y5[0] + p_y1[0]) * (p_x2[0] + p_x1[0]) + (p_y2[0] + p_y1[0]) * (p_x5[0] + p_x1[0]) +
        (p_y7[0] + p_y3[0]) * (p_x2[0] + p_x3[0]) - (p_y2[0] + p_y3[0]) * (p_x7[0] + p_x3[0]);
        p_dvdx[6] *= m_twelfth_cuda;
        p_dvdy[6] *= m_twelfth_cuda;
        p_dvdz[6] *= m_twelfth_cuda;




        p_dvdx[7] =
        (p_y5[0] + p_y4[0]) * (p_z6[0] + p_z5[0]) - (p_y6[0] + p_y5[0]) * (p_z5[0] + p_z4[0]) +
        (p_y6[0] + p_y2[0]) * (p_z3[0] + p_z2[0]) - (p_y3[0] + p_y2[0]) * (p_z6[0] + p_z2[0]) -
        (p_y4[0] + p_y0[0]) * (p_z3[0] + p_z0[0]) + (p_y3[0] + p_y0[0]) * (p_z4[0] + p_z0[0]);
        p_dvdy[7] =
        - (p_x5[0] + p_x4[0]) * (p_z6[0] + p_z5[0]) + (p_x6[0] + p_x5[0]) * (p_z5[0] + p_z4[0]) -
        (p_x6[0] + p_x2[0]) * (p_z3[0] + p_z2[0]) + (p_x3[0] + p_x2[0]) * (p_z6[0] + p_z2[0]) +
        (p_x4[0] + p_x0[0]) * (p_z3[0] + p_z0[0]) - (p_x3[0] + p_x0[0]) * (p_z4[0] + p_z0[0]);

        p_dvdz[7] =
        - (p_y5[0] + p_y4[0]) * (p_x6[0] + p_x5[0]) + (p_y6[0] + p_y5[0]) * (p_x5[0] + p_x4[0]) -
        (p_y6[0] + p_y2[0]) * (p_x3[0] + p_x2[0]) + (p_y3[0] + p_y2[0]) * (p_x6[0] + p_x2[0]) +
        (p_y4[0] + p_y0[0]) * (p_x3[0] + p_x0[0]) - (p_y3[0] + p_y0[0]) * (p_x4[0] + p_x0[0]);
        p_dvdx[7] *= m_twelfth_cuda;
        p_dvdy[7] *= m_twelfth_cuda;
        p_dvdz[7] *= m_twelfth_cuda;











        p_x8n[0] = p_x0[0];
        p_y8n[0] = p_y0[0];
        p_z8n[0] = p_z0[0];

        p_x8n[1] = p_x1[0];
        p_y8n[1] = p_y1[0];
        p_z8n[1] = p_z1[0];

        p_x8n[2] = p_x2[0];
        p_y8n[2] = p_y2[0];
        p_z8n[2] = p_z2[0];

        p_x8n[3] = p_x3[0];
        p_y8n[3] = p_y3[0];
        p_z8n[3] = p_z3[0];

        p_x8n[4] = p_x4[0];
        p_y8n[4] = p_y4[0];
        p_z8n[4] = p_z4[0];

        p_x8n[5] = p_x5[0];
        p_y8n[5] = p_y5[0];
        p_z8n[5] = p_z5[0];

        p_x8n[6] = p_x6[0];
        p_y8n[6] = p_y6[0];
        p_z8n[6] = p_z6[0];

        p_x8n[7] = p_x7[0];
        p_y8n[7] = p_y7[0];
        p_z8n[7] = p_z7[0];

        p_determ[0] = p_volo[0] * p_v[0];

        if(p_v[0] <= 0.0){

        }

}

// CUDA kernel function
__global__ void op_cuda_CalcVolumeDerivatives(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const int *__restrict opDat0Map,
  double *arg24,
  double *arg25,
  double *arg26,
  double *arg27,
  double *arg28,
  double *arg29,
  const double *__restrict arg30,
  double *arg31,
  const double *__restrict arg32,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    int map4idx;
    int map5idx;
    int map6idx;
    int map7idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];
    map2idx = opDat0Map[n + set_size * 2];
    map3idx = opDat0Map[n + set_size * 3];
    map4idx = opDat0Map[n + set_size * 4];
    map5idx = opDat0Map[n + set_size * 5];
    map6idx = opDat0Map[n + set_size * 6];
    map7idx = opDat0Map[n + set_size * 7];

    //user-supplied kernel call
    CalcVolumeDerivatives_gpu(ind_arg0+map0idx*1,
                          ind_arg0+map1idx*1,
                          ind_arg0+map2idx*1,
                          ind_arg0+map3idx*1,
                          ind_arg0+map4idx*1,
                          ind_arg0+map5idx*1,
                          ind_arg0+map6idx*1,
                          ind_arg0+map7idx*1,
                          ind_arg1+map0idx*1,
                          ind_arg1+map1idx*1,
                          ind_arg1+map2idx*1,
                          ind_arg1+map3idx*1,
                          ind_arg1+map4idx*1,
                          ind_arg1+map5idx*1,
                          ind_arg1+map6idx*1,
                          ind_arg1+map7idx*1,
                          ind_arg2+map0idx*1,
                          ind_arg2+map1idx*1,
                          ind_arg2+map2idx*1,
                          ind_arg2+map3idx*1,
                          ind_arg2+map4idx*1,
                          ind_arg2+map5idx*1,
                          ind_arg2+map6idx*1,
                          ind_arg2+map7idx*1,
                          arg24+n*8,
                          arg25+n*8,
                          arg26+n*8,
                          arg27+n*8,
                          arg28+n*8,
                          arg29+n*8,
                          arg30+n*1,
                          arg31+n*1,
                          arg32+n*1);
  }
}


//host stub function
void op_par_loop_CalcVolumeDerivatives(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32){

  int nargs = 33;
  op_arg args[33];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;


  int    ninds   = 3;
  int    inds[33] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: CalcVolumeDerivatives\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_3
      int nthread = OP_BLOCK_SIZE_3;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_CalcVolumeDerivatives<<<nblocks,nthread>>>(
        (double *)arg0.data_d,
        (double *)arg8.data_d,
        (double *)arg16.data_d,
        arg0.map_data_d,
        (double*)arg24.data_d,
        (double*)arg25.data_d,
        (double*)arg26.data_d,
        (double*)arg27.data_d,
        (double*)arg28.data_d,
        (double*)arg29.data_d,
        (double*)arg30.data_d,
        (double*)arg31.data_d,
        (double*)arg32.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].time     += wall_t2 - wall_t1;
}
