//
// auto-generated by op2.py
//

//header
#ifdef GPUPASS
#define op_par_loop_initStressTerms op_par_loop_initStressTerms_gpu
#define op_par_loop_IntegrateStressForElemsLoop op_par_loop_IntegrateStressForElemsLoop_gpu
#define op_par_loop_FBHourglassForceForElems op_par_loop_FBHourglassForceForElems_gpu
#define op_par_loop_CalcVolumeDerivatives op_par_loop_CalcVolumeDerivatives_gpu
#define op_par_loop_CheckForNegativeElementVolume op_par_loop_CheckForNegativeElementVolume_gpu
#define op_par_loop_setForceToZero op_par_loop_setForceToZero_gpu
#define op_par_loop_CalcAccelForNodes op_par_loop_CalcAccelForNodes_gpu
#define op_par_loop_BoundaryX op_par_loop_BoundaryX_gpu
#define op_par_loop_BoundaryY op_par_loop_BoundaryY_gpu
#define op_par_loop_BoundaryZ op_par_loop_BoundaryZ_gpu
#define op_par_loop_CalcVeloForNodes op_par_loop_CalcVeloForNodes_gpu
#define op_par_loop_CalcPosForNodes op_par_loop_CalcPosForNodes_gpu
#define op_par_loop_CalcKinematicsForElem op_par_loop_CalcKinematicsForElem_gpu
#define op_par_loop_CalcLagrangeElemRemaining op_par_loop_CalcLagrangeElemRemaining_gpu
#define op_par_loop_CalcMonotonicQGradientsForElem op_par_loop_CalcMonotonicQGradientsForElem_gpu
#define op_par_loop_CalcMonotonicQRegionForElem op_par_loop_CalcMonotonicQRegionForElem_gpu
#define op_par_loop_NoExcessiveArtificialViscosity op_par_loop_NoExcessiveArtificialViscosity_gpu
#define op_par_loop_CalcHalfStepBVC op_par_loop_CalcHalfStepBVC_gpu
#define op_par_loop_CalcPHalfstep op_par_loop_CalcPHalfstep_gpu
#define op_par_loop_CalcBVC op_par_loop_CalcBVC_gpu
#define op_par_loop_CalcPNew op_par_loop_CalcPNew_gpu
#define op_par_loop_CalcNewE op_par_loop_CalcNewE_gpu
#define op_par_loop_CalcNewEStep2 op_par_loop_CalcNewEStep2_gpu
#define op_par_loop_CalcNewEStep3 op_par_loop_CalcNewEStep3_gpu
#define op_par_loop_CalcNewEStep4 op_par_loop_CalcNewEStep4_gpu
#define op_par_loop_CalcQNew op_par_loop_CalcQNew_gpu
#define op_par_loop_CalcSoundSpeedForElem op_par_loop_CalcSoundSpeedForElem_gpu
#define op_par_loop_CopyEOSValsIntoArray op_par_loop_CopyEOSValsIntoArray_gpu
#define op_par_loop_CalcHalfSteps op_par_loop_CalcHalfSteps_gpu
#define op_par_loop_CheckEOSLowerBound op_par_loop_CheckEOSLowerBound_gpu
#define op_par_loop_CheckEOSUpperBound op_par_loop_CheckEOSUpperBound_gpu
#define op_par_loop_CalcEOSWork op_par_loop_CalcEOSWork_gpu
#define op_par_loop_CopyTempEOSVarsBack op_par_loop_CopyTempEOSVarsBack_gpu
#define op_par_loop_CopyVelocityToTempArray op_par_loop_CopyVelocityToTempArray_gpu
#define op_par_loop_ApplyLowerBoundToVelocity op_par_loop_ApplyLowerBoundToVelocity_gpu
#define op_par_loop_ApplyUpperBoundToVelocity op_par_loop_ApplyUpperBoundToVelocity_gpu
#define op_par_loop_ALE3DRelevantCheck op_par_loop_ALE3DRelevantCheck_gpu
#define op_par_loop_updateVolumesForElem op_par_loop_updateVolumesForElem_gpu
#define op_par_loop_CalcCourantConstraint op_par_loop_CalcCourantConstraint_gpu
#define op_par_loop_CalcHydroConstraint op_par_loop_CalcHydroConstraint_gpu
#include "lulesh_kernels.cu"
#undef op_par_loop_initStressTerms
#undef op_par_loop_IntegrateStressForElemsLoop
#undef op_par_loop_FBHourglassForceForElems
#undef op_par_loop_CalcVolumeDerivatives
#undef op_par_loop_CheckForNegativeElementVolume
#undef op_par_loop_setForceToZero
#undef op_par_loop_CalcAccelForNodes
#undef op_par_loop_BoundaryX
#undef op_par_loop_BoundaryY
#undef op_par_loop_BoundaryZ
#undef op_par_loop_CalcVeloForNodes
#undef op_par_loop_CalcPosForNodes
#undef op_par_loop_CalcKinematicsForElem
#undef op_par_loop_CalcLagrangeElemRemaining
#undef op_par_loop_CalcMonotonicQGradientsForElem
#undef op_par_loop_CalcMonotonicQRegionForElem
#undef op_par_loop_NoExcessiveArtificialViscosity
#undef op_par_loop_CalcHalfStepBVC
#undef op_par_loop_CalcPHalfstep
#undef op_par_loop_CalcBVC
#undef op_par_loop_CalcPNew
#undef op_par_loop_CalcNewE
#undef op_par_loop_CalcNewEStep2
#undef op_par_loop_CalcNewEStep3
#undef op_par_loop_CalcNewEStep4
#undef op_par_loop_CalcQNew
#undef op_par_loop_CalcSoundSpeedForElem
#undef op_par_loop_CopyEOSValsIntoArray
#undef op_par_loop_CalcHalfSteps
#undef op_par_loop_CheckEOSLowerBound
#undef op_par_loop_CheckEOSUpperBound
#undef op_par_loop_CalcEOSWork
#undef op_par_loop_CopyTempEOSVarsBack
#undef op_par_loop_CopyVelocityToTempArray
#undef op_par_loop_ApplyLowerBoundToVelocity
#undef op_par_loop_ApplyUpperBoundToVelocity
#undef op_par_loop_ALE3DRelevantCheck
#undef op_par_loop_updateVolumesForElem
#undef op_par_loop_CalcCourantConstraint
#undef op_par_loop_CalcHydroConstraint
#else
#define op_par_loop_initStressTerms op_par_loop_initStressTerms_cpu
#define op_par_loop_IntegrateStressForElemsLoop op_par_loop_IntegrateStressForElemsLoop_cpu
#define op_par_loop_FBHourglassForceForElems op_par_loop_FBHourglassForceForElems_cpu
#define op_par_loop_CalcVolumeDerivatives op_par_loop_CalcVolumeDerivatives_cpu
#define op_par_loop_CheckForNegativeElementVolume op_par_loop_CheckForNegativeElementVolume_cpu
#define op_par_loop_setForceToZero op_par_loop_setForceToZero_cpu
#define op_par_loop_CalcAccelForNodes op_par_loop_CalcAccelForNodes_cpu
#define op_par_loop_BoundaryX op_par_loop_BoundaryX_cpu
#define op_par_loop_BoundaryY op_par_loop_BoundaryY_cpu
#define op_par_loop_BoundaryZ op_par_loop_BoundaryZ_cpu
#define op_par_loop_CalcVeloForNodes op_par_loop_CalcVeloForNodes_cpu
#define op_par_loop_CalcPosForNodes op_par_loop_CalcPosForNodes_cpu
#define op_par_loop_CalcKinematicsForElem op_par_loop_CalcKinematicsForElem_cpu
#define op_par_loop_CalcLagrangeElemRemaining op_par_loop_CalcLagrangeElemRemaining_cpu
#define op_par_loop_CalcMonotonicQGradientsForElem op_par_loop_CalcMonotonicQGradientsForElem_cpu
#define op_par_loop_CalcMonotonicQRegionForElem op_par_loop_CalcMonotonicQRegionForElem_cpu
#define op_par_loop_NoExcessiveArtificialViscosity op_par_loop_NoExcessiveArtificialViscosity_cpu
#define op_par_loop_CalcHalfStepBVC op_par_loop_CalcHalfStepBVC_cpu
#define op_par_loop_CalcPHalfstep op_par_loop_CalcPHalfstep_cpu
#define op_par_loop_CalcBVC op_par_loop_CalcBVC_cpu
#define op_par_loop_CalcPNew op_par_loop_CalcPNew_cpu
#define op_par_loop_CalcNewE op_par_loop_CalcNewE_cpu
#define op_par_loop_CalcNewEStep2 op_par_loop_CalcNewEStep2_cpu
#define op_par_loop_CalcNewEStep3 op_par_loop_CalcNewEStep3_cpu
#define op_par_loop_CalcNewEStep4 op_par_loop_CalcNewEStep4_cpu
#define op_par_loop_CalcQNew op_par_loop_CalcQNew_cpu
#define op_par_loop_CalcSoundSpeedForElem op_par_loop_CalcSoundSpeedForElem_cpu
#define op_par_loop_CopyEOSValsIntoArray op_par_loop_CopyEOSValsIntoArray_cpu
#define op_par_loop_CalcHalfSteps op_par_loop_CalcHalfSteps_cpu
#define op_par_loop_CheckEOSLowerBound op_par_loop_CheckEOSLowerBound_cpu
#define op_par_loop_CheckEOSUpperBound op_par_loop_CheckEOSUpperBound_cpu
#define op_par_loop_CalcEOSWork op_par_loop_CalcEOSWork_cpu
#define op_par_loop_CopyTempEOSVarsBack op_par_loop_CopyTempEOSVarsBack_cpu
#define op_par_loop_CopyVelocityToTempArray op_par_loop_CopyVelocityToTempArray_cpu
#define op_par_loop_ApplyLowerBoundToVelocity op_par_loop_ApplyLowerBoundToVelocity_cpu
#define op_par_loop_ApplyUpperBoundToVelocity op_par_loop_ApplyUpperBoundToVelocity_cpu
#define op_par_loop_ALE3DRelevantCheck op_par_loop_ALE3DRelevantCheck_cpu
#define op_par_loop_updateVolumesForElem op_par_loop_updateVolumesForElem_cpu
#define op_par_loop_CalcCourantConstraint op_par_loop_CalcCourantConstraint_cpu
#define op_par_loop_CalcHydroConstraint op_par_loop_CalcHydroConstraint_cpu
#include "../openmp/lulesh_kernels.cpp"
#undef op_par_loop_initStressTerms
#undef op_par_loop_IntegrateStressForElemsLoop
#undef op_par_loop_FBHourglassForceForElems
#undef op_par_loop_CalcVolumeDerivatives
#undef op_par_loop_CheckForNegativeElementVolume
#undef op_par_loop_setForceToZero
#undef op_par_loop_CalcAccelForNodes
#undef op_par_loop_BoundaryX
#undef op_par_loop_BoundaryY
#undef op_par_loop_BoundaryZ
#undef op_par_loop_CalcVeloForNodes
#undef op_par_loop_CalcPosForNodes
#undef op_par_loop_CalcKinematicsForElem
#undef op_par_loop_CalcLagrangeElemRemaining
#undef op_par_loop_CalcMonotonicQGradientsForElem
#undef op_par_loop_CalcMonotonicQRegionForElem
#undef op_par_loop_NoExcessiveArtificialViscosity
#undef op_par_loop_CalcHalfStepBVC
#undef op_par_loop_CalcPHalfstep
#undef op_par_loop_CalcBVC
#undef op_par_loop_CalcPNew
#undef op_par_loop_CalcNewE
#undef op_par_loop_CalcNewEStep2
#undef op_par_loop_CalcNewEStep3
#undef op_par_loop_CalcNewEStep4
#undef op_par_loop_CalcQNew
#undef op_par_loop_CalcSoundSpeedForElem
#undef op_par_loop_CopyEOSValsIntoArray
#undef op_par_loop_CalcHalfSteps
#undef op_par_loop_CheckEOSLowerBound
#undef op_par_loop_CheckEOSUpperBound
#undef op_par_loop_CalcEOSWork
#undef op_par_loop_CopyTempEOSVarsBack
#undef op_par_loop_CopyVelocityToTempArray
#undef op_par_loop_ApplyLowerBoundToVelocity
#undef op_par_loop_ApplyUpperBoundToVelocity
#undef op_par_loop_ALE3DRelevantCheck
#undef op_par_loop_updateVolumesForElem
#undef op_par_loop_CalcCourantConstraint
#undef op_par_loop_CalcHydroConstraint

//user kernel files

void op_par_loop_initStressTerms_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_initStressTerms(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  if (OP_hybrid_gpu) {
    op_par_loop_initStressTerms_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

    }else{
    op_par_loop_initStressTerms_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

  }
}
#else
void op_par_loop_initStressTerms(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  op_par_loop_initStressTerms_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_IntegrateStressForElemsLoop_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_IntegrateStressForElemsLoop(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51){

  if (OP_hybrid_gpu) {
    op_par_loop_IntegrateStressForElemsLoop_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32,
      arg33,
      arg34,
      arg35,
      arg36,
      arg37,
      arg38,
      arg39,
      arg40,
      arg41,
      arg42,
      arg43,
      arg44,
      arg45,
      arg46,
      arg47,
      arg48,
      arg49,
      arg50,
      arg51);

    }else{
    op_par_loop_IntegrateStressForElemsLoop_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32,
      arg33,
      arg34,
      arg35,
      arg36,
      arg37,
      arg38,
      arg39,
      arg40,
      arg41,
      arg42,
      arg43,
      arg44,
      arg45,
      arg46,
      arg47,
      arg48,
      arg49,
      arg50,
      arg51);

  }
}
#else
void op_par_loop_IntegrateStressForElemsLoop(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51){

  op_par_loop_IntegrateStressForElemsLoop_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11,
    arg12,
    arg13,
    arg14,
    arg15,
    arg16,
    arg17,
    arg18,
    arg19,
    arg20,
    arg21,
    arg22,
    arg23,
    arg24,
    arg25,
    arg26,
    arg27,
    arg28,
    arg29,
    arg30,
    arg31,
    arg32,
    arg33,
    arg34,
    arg35,
    arg36,
    arg37,
    arg38,
    arg39,
    arg40,
    arg41,
    arg42,
    arg43,
    arg44,
    arg45,
    arg46,
    arg47,
    arg48,
    arg49,
    arg50,
    arg51);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_FBHourglassForceForElems_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_FBHourglassForceForElems(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56){

  if (OP_hybrid_gpu) {
    op_par_loop_FBHourglassForceForElems_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32,
      arg33,
      arg34,
      arg35,
      arg36,
      arg37,
      arg38,
      arg39,
      arg40,
      arg41,
      arg42,
      arg43,
      arg44,
      arg45,
      arg46,
      arg47,
      arg48,
      arg49,
      arg50,
      arg51,
      arg52,
      arg53,
      arg54,
      arg55,
      arg56);

    }else{
    op_par_loop_FBHourglassForceForElems_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32,
      arg33,
      arg34,
      arg35,
      arg36,
      arg37,
      arg38,
      arg39,
      arg40,
      arg41,
      arg42,
      arg43,
      arg44,
      arg45,
      arg46,
      arg47,
      arg48,
      arg49,
      arg50,
      arg51,
      arg52,
      arg53,
      arg54,
      arg55,
      arg56);

  }
}
#else
void op_par_loop_FBHourglassForceForElems(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56){

  op_par_loop_FBHourglassForceForElems_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11,
    arg12,
    arg13,
    arg14,
    arg15,
    arg16,
    arg17,
    arg18,
    arg19,
    arg20,
    arg21,
    arg22,
    arg23,
    arg24,
    arg25,
    arg26,
    arg27,
    arg28,
    arg29,
    arg30,
    arg31,
    arg32,
    arg33,
    arg34,
    arg35,
    arg36,
    arg37,
    arg38,
    arg39,
    arg40,
    arg41,
    arg42,
    arg43,
    arg44,
    arg45,
    arg46,
    arg47,
    arg48,
    arg49,
    arg50,
    arg51,
    arg52,
    arg53,
    arg54,
    arg55,
    arg56);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcVolumeDerivatives_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcVolumeDerivatives(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcVolumeDerivatives_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32);

    }else{
    op_par_loop_CalcVolumeDerivatives_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32);

  }
}
#else
void op_par_loop_CalcVolumeDerivatives(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32){

  op_par_loop_CalcVolumeDerivatives_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11,
    arg12,
    arg13,
    arg14,
    arg15,
    arg16,
    arg17,
    arg18,
    arg19,
    arg20,
    arg21,
    arg22,
    arg23,
    arg24,
    arg25,
    arg26,
    arg27,
    arg28,
    arg29,
    arg30,
    arg31,
    arg32);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CheckForNegativeElementVolume_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CheckForNegativeElementVolume(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_CheckForNegativeElementVolume_gpu(name, set,
      arg0);

    }else{
    op_par_loop_CheckForNegativeElementVolume_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_CheckForNegativeElementVolume(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_CheckForNegativeElementVolume_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_setForceToZero_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_setForceToZero(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_setForceToZero_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_setForceToZero_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_setForceToZero(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_setForceToZero_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcAccelForNodes_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcAccelForNodes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcAccelForNodes_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6);

    }else{
    op_par_loop_CalcAccelForNodes_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6);

  }
}
#else
void op_par_loop_CalcAccelForNodes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6){

  op_par_loop_CalcAccelForNodes_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_BoundaryX_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_BoundaryX(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_BoundaryX_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_BoundaryX_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_BoundaryX(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_BoundaryX_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_BoundaryY_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_BoundaryY(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_BoundaryY_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_BoundaryY_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_BoundaryY(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_BoundaryY_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_BoundaryZ_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_BoundaryZ(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_BoundaryZ_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_BoundaryZ_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_BoundaryZ(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_BoundaryZ_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcVeloForNodes_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcVeloForNodes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcVeloForNodes_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6);

    }else{
    op_par_loop_CalcVeloForNodes_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6);

  }
}
#else
void op_par_loop_CalcVeloForNodes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6){

  op_par_loop_CalcVeloForNodes_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcPosForNodes_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcPosForNodes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcPosForNodes_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6);

    }else{
    op_par_loop_CalcPosForNodes_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6);

  }
}
#else
void op_par_loop_CalcPosForNodes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6){

  op_par_loop_CalcPosForNodes_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcKinematicsForElem_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcKinematicsForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcKinematicsForElem_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32,
      arg33,
      arg34,
      arg35,
      arg36,
      arg37,
      arg38,
      arg39,
      arg40,
      arg41,
      arg42,
      arg43,
      arg44,
      arg45,
      arg46,
      arg47,
      arg48,
      arg49,
      arg50,
      arg51,
      arg52,
      arg53,
      arg54,
      arg55,
      arg56);

    }else{
    op_par_loop_CalcKinematicsForElem_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32,
      arg33,
      arg34,
      arg35,
      arg36,
      arg37,
      arg38,
      arg39,
      arg40,
      arg41,
      arg42,
      arg43,
      arg44,
      arg45,
      arg46,
      arg47,
      arg48,
      arg49,
      arg50,
      arg51,
      arg52,
      arg53,
      arg54,
      arg55,
      arg56);

  }
}
#else
void op_par_loop_CalcKinematicsForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56){

  op_par_loop_CalcKinematicsForElem_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11,
    arg12,
    arg13,
    arg14,
    arg15,
    arg16,
    arg17,
    arg18,
    arg19,
    arg20,
    arg21,
    arg22,
    arg23,
    arg24,
    arg25,
    arg26,
    arg27,
    arg28,
    arg29,
    arg30,
    arg31,
    arg32,
    arg33,
    arg34,
    arg35,
    arg36,
    arg37,
    arg38,
    arg39,
    arg40,
    arg41,
    arg42,
    arg43,
    arg44,
    arg45,
    arg46,
    arg47,
    arg48,
    arg49,
    arg50,
    arg51,
    arg52,
    arg53,
    arg54,
    arg55,
    arg56);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcLagrangeElemRemaining_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcLagrangeElemRemaining(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcLagrangeElemRemaining_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

    }else{
    op_par_loop_CalcLagrangeElemRemaining_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

  }
}
#else
void op_par_loop_CalcLagrangeElemRemaining(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  op_par_loop_CalcLagrangeElemRemaining_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcMonotonicQGradientsForElem_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcMonotonicQGradientsForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcMonotonicQGradientsForElem_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32,
      arg33,
      arg34,
      arg35,
      arg36,
      arg37,
      arg38,
      arg39,
      arg40,
      arg41,
      arg42,
      arg43,
      arg44,
      arg45,
      arg46,
      arg47,
      arg48,
      arg49,
      arg50,
      arg51,
      arg52,
      arg53,
      arg54,
      arg55);

    }else{
    op_par_loop_CalcMonotonicQGradientsForElem_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18,
      arg19,
      arg20,
      arg21,
      arg22,
      arg23,
      arg24,
      arg25,
      arg26,
      arg27,
      arg28,
      arg29,
      arg30,
      arg31,
      arg32,
      arg33,
      arg34,
      arg35,
      arg36,
      arg37,
      arg38,
      arg39,
      arg40,
      arg41,
      arg42,
      arg43,
      arg44,
      arg45,
      arg46,
      arg47,
      arg48,
      arg49,
      arg50,
      arg51,
      arg52,
      arg53,
      arg54,
      arg55);

  }
}
#else
void op_par_loop_CalcMonotonicQGradientsForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55){

  op_par_loop_CalcMonotonicQGradientsForElem_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11,
    arg12,
    arg13,
    arg14,
    arg15,
    arg16,
    arg17,
    arg18,
    arg19,
    arg20,
    arg21,
    arg22,
    arg23,
    arg24,
    arg25,
    arg26,
    arg27,
    arg28,
    arg29,
    arg30,
    arg31,
    arg32,
    arg33,
    arg34,
    arg35,
    arg36,
    arg37,
    arg38,
    arg39,
    arg40,
    arg41,
    arg42,
    arg43,
    arg44,
    arg45,
    arg46,
    arg47,
    arg48,
    arg49,
    arg50,
    arg51,
    arg52,
    arg53,
    arg54,
    arg55);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcMonotonicQRegionForElem_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcMonotonicQRegionForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcMonotonicQRegionForElem_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18);

    }else{
    op_par_loop_CalcMonotonicQRegionForElem_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
      arg16,
      arg17,
      arg18);

  }
}
#else
void op_par_loop_CalcMonotonicQRegionForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18){

  op_par_loop_CalcMonotonicQRegionForElem_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11,
    arg12,
    arg13,
    arg14,
    arg15,
    arg16,
    arg17,
    arg18);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_NoExcessiveArtificialViscosity_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_NoExcessiveArtificialViscosity(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_NoExcessiveArtificialViscosity_gpu(name, set,
      arg0);

    }else{
    op_par_loop_NoExcessiveArtificialViscosity_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_NoExcessiveArtificialViscosity(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_NoExcessiveArtificialViscosity_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcHalfStepBVC_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcHalfStepBVC(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcHalfStepBVC_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_CalcHalfStepBVC_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_CalcHalfStepBVC(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_CalcHalfStepBVC_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcPHalfstep_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcPHalfstep(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcPHalfstep_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_CalcPHalfstep_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_CalcPHalfstep(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_CalcPHalfstep_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcBVC_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcBVC(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcBVC_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_CalcBVC_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_CalcBVC(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_CalcBVC_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcPNew_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcPNew(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcPNew_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_CalcPNew_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_CalcPNew(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_CalcPNew_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcNewE_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcNewE(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcNewE_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

    }else{
    op_par_loop_CalcNewE_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

  }
}
#else
void op_par_loop_CalcNewE(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  op_par_loop_CalcNewE_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcNewEStep2_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcNewEStep2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcNewEStep2_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10);

    }else{
    op_par_loop_CalcNewEStep2_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10);

  }
}
#else
void op_par_loop_CalcNewEStep2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10){

  op_par_loop_CalcNewEStep2_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcNewEStep3_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcNewEStep3(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcNewEStep3_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_CalcNewEStep3_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_CalcNewEStep3(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_CalcNewEStep3_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcNewEStep4_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcNewEStep4(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcNewEStep4_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11);

    }else{
    op_par_loop_CalcNewEStep4_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11);

  }
}
#else
void op_par_loop_CalcNewEStep4(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11){

  op_par_loop_CalcNewEStep4_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcQNew_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcQNew(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcQNew_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8);

    }else{
    op_par_loop_CalcQNew_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8);

  }
}
#else
void op_par_loop_CalcQNew(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8){

  op_par_loop_CalcQNew_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcSoundSpeedForElem_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcSoundSpeedForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcSoundSpeedForElem_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

    }else{
    op_par_loop_CalcSoundSpeedForElem_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

  }
}
#else
void op_par_loop_CalcSoundSpeedForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  op_par_loop_CalcSoundSpeedForElem_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CopyEOSValsIntoArray_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CopyEOSValsIntoArray(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11){

  if (OP_hybrid_gpu) {
    op_par_loop_CopyEOSValsIntoArray_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11);

    }else{
    op_par_loop_CopyEOSValsIntoArray_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11);

  }
}
#else
void op_par_loop_CopyEOSValsIntoArray(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11){

  op_par_loop_CopyEOSValsIntoArray_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcHalfSteps_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcHalfSteps(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcHalfSteps_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_CalcHalfSteps_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_CalcHalfSteps(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_CalcHalfSteps_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CheckEOSLowerBound_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CheckEOSLowerBound(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_CheckEOSLowerBound_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_CheckEOSLowerBound_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_CheckEOSLowerBound(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_CheckEOSLowerBound_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CheckEOSUpperBound_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CheckEOSUpperBound(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_CheckEOSUpperBound_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_CheckEOSUpperBound_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_CheckEOSUpperBound(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_CheckEOSUpperBound_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcEOSWork_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcEOSWork(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcEOSWork_gpu(name, set,
      arg0);

    }else{
    op_par_loop_CalcEOSWork_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_CalcEOSWork(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_CalcEOSWork_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CopyTempEOSVarsBack_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CopyTempEOSVarsBack(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  if (OP_hybrid_gpu) {
    op_par_loop_CopyTempEOSVarsBack_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

    }else{
    op_par_loop_CopyTempEOSVarsBack_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

  }
}
#else
void op_par_loop_CopyTempEOSVarsBack(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  op_par_loop_CopyTempEOSVarsBack_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CopyVelocityToTempArray_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CopyVelocityToTempArray(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_CopyVelocityToTempArray_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_CopyVelocityToTempArray_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_CopyVelocityToTempArray(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_CopyVelocityToTempArray_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_ApplyLowerBoundToVelocity_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_ApplyLowerBoundToVelocity(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_ApplyLowerBoundToVelocity_gpu(name, set,
      arg0);

    }else{
    op_par_loop_ApplyLowerBoundToVelocity_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_ApplyLowerBoundToVelocity(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_ApplyLowerBoundToVelocity_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_ApplyUpperBoundToVelocity_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_ApplyUpperBoundToVelocity(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_ApplyUpperBoundToVelocity_gpu(name, set,
      arg0);

    }else{
    op_par_loop_ApplyUpperBoundToVelocity_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_ApplyUpperBoundToVelocity(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_ApplyUpperBoundToVelocity_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_ALE3DRelevantCheck_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_ALE3DRelevantCheck(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_ALE3DRelevantCheck_gpu(name, set,
      arg0);

    }else{
    op_par_loop_ALE3DRelevantCheck_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_ALE3DRelevantCheck(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_ALE3DRelevantCheck_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_updateVolumesForElem_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_updateVolumesForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_updateVolumesForElem_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_updateVolumesForElem_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_updateVolumesForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_updateVolumesForElem_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcCourantConstraint_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcCourantConstraint(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcCourantConstraint_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_CalcCourantConstraint_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_CalcCourantConstraint(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_CalcCourantConstraint_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_CalcHydroConstraint_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_CalcHydroConstraint(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_CalcHydroConstraint_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_CalcHydroConstraint_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_CalcHydroConstraint(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_CalcHydroConstraint_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU
#endif
