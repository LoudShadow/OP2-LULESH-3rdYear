//
// auto-generated by op2.py
//

// #include "const.h"

//user function
__device__ void CalcKinematicsForElem_gpu( 
                                const double *p_x0, const double *p_x1, const double *p_x2, const double *p_x3, const double *p_x4, const double *p_x5, const double *p_x6, const double *p_x7,
                                const double *p_y0, const double *p_y1, const double *p_y2, const double *p_y3, const double *p_y4, const double *p_y5, const double *p_y6, const double *p_y7,
                                const double *p_z0, const double *p_z1, const double *p_z2, const double *p_z3, const double *p_z4, const double *p_z5, const double *p_z6, const double *p_z7,
                                const double *p_xd0, const double *p_xd1, const double *p_xd2, const double *p_xd3, const double *p_xd4, const double *p_xd5, const double *p_xd6, const double *p_xd7,
                                const double *p_yd0, const double *p_yd1, const double *p_yd2, const double *p_yd3, const double *p_yd4, const double *p_yd5, const double *p_yd6, const double *p_yd7,
                                const double *p_zd0, const double *p_zd1, const double *p_zd2, const double *p_zd3, const double *p_zd4, const double *p_zd5, const double *p_zd6, const double *p_zd7,
                                double *dxx, double *dyy, double *dzz,
                                double *vnew,
                                const double *volo,
                                double *delv,
                                const double *v,
                                double *arealg,
                                const double *deltaTime

) {

   double B[3][8] ;
   double D[6] ;
   double x_local[8] ;
   double y_local[8] ;
   double z_local[8] ;
   double detJ = double(0.0) ;

   double volume ;
   double relativeVolume ;

   x_local[0] = p_x0[0];
   x_local[1] = p_x1[0];
   x_local[2] = p_x2[0];
   x_local[3] = p_x3[0];
   x_local[4] = p_x4[0];
   x_local[5] = p_x5[0];
   x_local[6] = p_x6[0];
   x_local[7] = p_x7[0];

   y_local[0] = p_y0[0];
   y_local[1] = p_y1[0];
   y_local[2] = p_y2[0];
   y_local[3] = p_y3[0];
   y_local[4] = p_y4[0];
   y_local[5] = p_y5[0];
   y_local[6] = p_y6[0];
   y_local[7] = p_y7[0];

   z_local[0] = p_z0[0];
   z_local[1] = p_z1[0];
   z_local[2] = p_z2[0];
   z_local[3] = p_z3[0];
   z_local[4] = p_z4[0];
   z_local[5] = p_z5[0];
   z_local[6] = p_z6[0];
   z_local[7] = p_z7[0];


   double dx61 = p_x6[0] - p_x1[0];
   double dy61 = p_y6[0] - p_y1[0];
   double dz61 = p_z6[0] - p_z1[0];

   double dx70 = p_x7[0] - p_x0[0];
   double dy70 = p_y7[0] - p_y0[0];
   double dz70 = p_z7[0] - p_z0[0];

   double dx63 = p_x6[0] - p_x3[0];
   double dy63 = p_y6[0] - p_y3[0];
   double dz63 = p_z6[0] - p_z3[0];

   double dx20 = p_x2[0] - p_x0[0];
   double dy20 = p_y2[0] - p_y0[0];
   double dz20 = p_z2[0] - p_z0[0];

   double dx50 = p_x5[0] - p_x0[0];
   double dy50 = p_y5[0] - p_y0[0];
   double dz50 = p_z5[0] - p_z0[0];

   double dx64 = p_x6[0] - p_x4[0];
   double dy64 = p_y6[0] - p_y4[0];
   double dz64 = p_z6[0] - p_z4[0];

   double dx31 = p_x3[0] - p_x1[0];
   double dy31 = p_y3[0] - p_y1[0];
   double dz31 = p_z3[0] - p_z1[0];

   double dx72 = p_x7[0] - p_x2[0];
   double dy72 = p_y7[0] - p_y2[0];
   double dz72 = p_z7[0] - p_z2[0];

   double dx43 = p_x4[0] - p_x3[0];
   double dy43 = p_y4[0] - p_y3[0];
   double dz43 = p_z4[0] - p_z3[0];

   double dx57 = p_x5[0] - p_x7[0];
   double dy57 = p_y5[0] - p_y7[0];
   double dz57 = p_z5[0] - p_z7[0];

   double dx14 = p_x1[0] - p_x4[0];
   double dy14 = p_y1[0] - p_y4[0];
   double dz14 = p_z1[0] - p_z4[0];

   double dx25 = p_x2[0] - p_x5[0];
   double dy25 = p_y2[0] - p_y5[0];
   double dz25 = p_z2[0] - p_z5[0];

   #define TRIPLE_PRODUCT(x1, y1, z1, x2, y2, z2, x3, y3, z3) \
      ((x1)*((y2)*(z3) - (z2)*(y3)) + (x2)*((z1)*(y3) - (y1)*(z3)) + (x3)*((y1)*(z2) - (z1)*(y2)))

   double temp_volume =
      TRIPLE_PRODUCT(dx31 + dx72, dx63, dx20,
         dy31 + dy72, dy63, dy20,
         dz31 + dz72, dz63, dz20) +
      TRIPLE_PRODUCT(dx43 + dx57, dx64, dx70,
         dy43 + dy57, dy64, dy70,
         dz43 + dz57, dz64, dz70) +
      TRIPLE_PRODUCT(dx14 + dx25, dx61, dx50,
         dy14 + dy25, dy61, dy50,
         dz14 + dz25, dz61, dz50);

      #undef TRIPLE_PRODUCT
   temp_volume *= m_twelfth_cuda;

   volume = temp_volume;



   relativeVolume = volume / volo[0] ;
   vnew[0] = relativeVolume ;
   delv[0] = relativeVolume - v[0] ;




   double a, charLength = double(0.0);
   double fx,fy,fz,gx,gy,gz,area;



   fx = (x_local[2] - x_local[0]) - (x_local[3] - x_local[1]);
   fy = (y_local[2] - y_local[0]) - (y_local[3] - y_local[1]);
   fz = (z_local[2] - z_local[0]) - (z_local[3] - z_local[1]);
   gx = (x_local[2] - x_local[0]) + (x_local[3] - x_local[1]);
   gy = (y_local[2] - y_local[0]) + (y_local[3] - y_local[1]);
   gz = (z_local[2] - z_local[0]) + (z_local[3] - z_local[1]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[6] - x_local[4]) - (x_local[7] - x_local[5]);
   fy = (y_local[6] - y_local[4]) - (y_local[7] - y_local[5]);
   fz = (z_local[6] - z_local[4]) - (z_local[7] - z_local[5]);
   gx = (x_local[6] - x_local[4]) + (x_local[7] - x_local[5]);
   gy = (y_local[6] - y_local[4]) + (y_local[7] - y_local[5]);
   gz = (z_local[6] - z_local[4]) + (z_local[7] - z_local[5]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[5] - x_local[0]) - (x_local[4] - x_local[1]);
   fy = (y_local[5] - y_local[0]) - (y_local[4] - y_local[1]);
   fz = (z_local[5] - z_local[0]) - (z_local[4] - z_local[1]);
   gx = (x_local[5] - x_local[0]) + (x_local[4] - x_local[1]);
   gy = (y_local[5] - y_local[0]) + (y_local[4] - y_local[1]);
   gz = (z_local[5] - z_local[0]) + (z_local[4] - z_local[1]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[6] - x_local[1]) - (x_local[5] - x_local[2]);
   fy = (y_local[6] - y_local[1]) - (y_local[5] - y_local[2]);
   fz = (z_local[6] - z_local[1]) - (z_local[5] - z_local[2]);
   gx = (x_local[6] - x_local[1]) + (x_local[5] - x_local[2]);
   gy = (y_local[6] - y_local[1]) + (y_local[5] - y_local[2]);
   gz = (z_local[6] - z_local[1]) + (z_local[5] - z_local[2]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[7] - x_local[2]) - (x_local[6] - x_local[3]);
   fy = (y_local[7] - y_local[2]) - (y_local[6] - y_local[3]);
   fz = (z_local[7] - z_local[2]) - (z_local[6] - z_local[3]);
   gx = (x_local[7] - x_local[2]) + (x_local[6] - x_local[3]);
   gy = (y_local[7] - y_local[2]) + (y_local[6] - y_local[3]);
   gz = (z_local[7] - z_local[2]) + (z_local[6] - z_local[3]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;



   fx = (x_local[4] - x_local[3]) - (x_local[7] - x_local[0]);
   fy = (y_local[4] - y_local[3]) - (y_local[7] - y_local[0]);
   fz = (z_local[4] - z_local[3]) - (z_local[7] - z_local[0]);
   gx = (x_local[4] - x_local[3]) + (x_local[7] - x_local[0]);
   gy = (y_local[4] - y_local[3]) + (y_local[7] - y_local[0]);
   gz = (z_local[4] - z_local[3]) + (z_local[7] - z_local[0]);
   area =
      (fx * fx + fy * fy + fz * fz) *
      (gx * gx + gy * gy + gz * gz) -
      (fx * gx + fy * gy + fz * gz) *
      (fx * gx + fy * gy + fz * gz);
   a = area;
   charLength = std::fmax(a,charLength) ;

   charLength = double(4.0) * volume / sqrt(charLength);

   arealg[0] = charLength;

   double dt2 = double(0.5) * (*deltaTime);

   x_local[0] -= dt2 * p_xd0[0];
   y_local[0] -= dt2 * p_yd0[0];
   z_local[0] -= dt2 * p_zd0[0];

   x_local[1] -= dt2 * p_xd1[0];
   y_local[1] -= dt2 * p_yd1[0];
   z_local[1] -= dt2 * p_zd1[0];

   x_local[2] -= dt2 * p_xd2[0];
   y_local[2] -= dt2 * p_yd2[0];
   z_local[2] -= dt2 * p_zd2[0];

   x_local[3] -= dt2 * p_xd3[0];
   y_local[3] -= dt2 * p_yd3[0];
   z_local[3] -= dt2 * p_zd3[0];

   x_local[4] -= dt2 * p_xd4[0];
   y_local[4] -= dt2 * p_yd4[0];
   z_local[4] -= dt2 * p_zd4[0];

   x_local[5] -= dt2 * p_xd5[0];
   y_local[5] -= dt2 * p_yd5[0];
   z_local[5] -= dt2 * p_zd5[0];

   x_local[6] -= dt2 * p_xd6[0];
   y_local[6] -= dt2 * p_yd6[0];
   z_local[6] -= dt2 * p_zd6[0];

   x_local[7] -= dt2 * p_xd7[0];
   y_local[7] -= dt2 * p_yd7[0];
   z_local[7] -= dt2 * p_zd7[0];











  double fjxxi, fjxet, fjxze;
  double fjyxi, fjyet, fjyze;
  double fjzxi, fjzet, fjzze;
  double cjxxi, cjxet, cjxze;
  double cjyxi, cjyet, cjyze;
  double cjzxi, cjzet, cjzze;

   fjxxi = double(.125) * ( (x_local[6]-x_local[0]) + (x_local[5]-x_local[3]) - (x_local[7]-x_local[1]) - (x_local[4]-x_local[2]) );
   fjxet = double(.125) * ( (x_local[6]-x_local[0]) - (x_local[5]-x_local[3]) + (x_local[7]-x_local[1]) - (x_local[4]-x_local[2]) );
   fjxze = double(.125) * ( (x_local[6]-x_local[0]) + (x_local[5]-x_local[3]) + (x_local[7]-x_local[1]) + (x_local[4]-x_local[2]) );

   fjyxi = double(.125) * ( (y_local[6]-y_local[0]) + (y_local[5]-y_local[3]) - (y_local[7]-y_local[1]) - (y_local[4]-y_local[2]) );
   fjyet = double(.125) * ( (y_local[6]-y_local[0]) - (y_local[5]-y_local[3]) + (y_local[7]-y_local[1]) - (y_local[4]-y_local[2]) );
   fjyze = double(.125) * ( (y_local[6]-y_local[0]) + (y_local[5]-y_local[3]) + (y_local[7]-y_local[1]) + (y_local[4]-y_local[2]) );

   fjzxi = double(.125) * ( (z_local[6]-z_local[0]) + (z_local[5]-z_local[3]) - (z_local[7]-z_local[1]) - (z_local[4]-z_local[2]) );
   fjzet = double(.125) * ( (z_local[6]-z_local[0]) - (z_local[5]-z_local[3]) + (z_local[7]-z_local[1]) - (z_local[4]-z_local[2]) );
   fjzze = double(.125) * ( (z_local[6]-z_local[0]) + (z_local[5]-z_local[3]) + (z_local[7]-z_local[1]) + (z_local[4]-z_local[2]) );


  cjxxi =    (fjyet * fjzze) - (fjzet * fjyze);
  cjxet =  - (fjyxi * fjzze) + (fjzxi * fjyze);
  cjxze =    (fjyxi * fjzet) - (fjzxi * fjyet);

  cjyxi =  - (fjxet * fjzze) + (fjzet * fjxze);
  cjyet =    (fjxxi * fjzze) - (fjzxi * fjxze);
  cjyze =  - (fjxxi * fjzet) + (fjzxi * fjxet);

  cjzxi =    (fjxet * fjyze) - (fjyet * fjxze);
  cjzet =  - (fjxxi * fjyze) + (fjyxi * fjxze);
  cjzze =    (fjxxi * fjyet) - (fjyxi * fjxet);

  B[0][0] =   -  cjxxi  -  cjxet  -  cjxze;
  B[0][1] =      cjxxi  -  cjxet  -  cjxze;
  B[0][2] =      cjxxi  +  cjxet  -  cjxze;
  B[0][3] =   -  cjxxi  +  cjxet  -  cjxze;
  B[0][4] = -B[0][2];
  B[0][5] = -B[0][3];
  B[0][6] = -B[0][0];
  B[0][7] = -B[0][1];

  B[1][0] =   -  cjyxi  -  cjyet  -  cjyze;
  B[1][1] =      cjyxi  -  cjyet  -  cjyze;
  B[1][2] =      cjyxi  +  cjyet  -  cjyze;
  B[1][3] =   -  cjyxi  +  cjyet  -  cjyze;
  B[1][4] = -B[1][2];
  B[1][5] = -B[1][3];
  B[1][6] = -B[1][0];
  B[1][7] = -B[1][1];

  B[2][0] =   -  cjzxi  -  cjzet  -  cjzze;
  B[2][1] =      cjzxi  -  cjzet  -  cjzze;
  B[2][2] =      cjzxi  +  cjzet  -  cjzze;
  B[2][3] =   -  cjzxi  +  cjzet  -  cjzze;
  B[2][4] = -B[2][2];
  B[2][5] = -B[2][3];
  B[2][6] = -B[2][0];
  B[2][7] = -B[2][1];

  detJ = double(8.) * ( fjxet * cjxet + fjyet * cjyet + fjzet * cjzet);



   const double inv_detJ = double(1.0) / detJ ;
   double dyddx, dxddy, dzddx, dxddz, dzddy, dyddz;
   const double* const pfx = B[0];
   const double* const pfy = B[1];
   const double* const pfz = B[2];

   D[0] = inv_detJ * ( pfx[0] * (p_xd0[0]-p_xd6[0])
                        + pfx[1] * (p_xd1[0]-p_xd7[0])
                        + pfx[2] * (p_xd2[0]-p_xd4[0])
                        + pfx[3] * (p_xd3[0]-p_xd5[0]) );

   D[1] = inv_detJ * ( pfy[0] * (p_yd0[0]-p_yd6[0])
                        + pfy[1] * (p_yd1[0]-p_yd7[0])
                        + pfy[2] * (p_yd2[0]-p_yd4[0])
                        + pfy[3] * (p_yd3[0]-p_yd5[0]) );

   D[2] = inv_detJ * ( pfz[0] * (p_zd0[0]-p_zd6[0])
                        + pfz[1] * (p_zd1[0]-p_zd7[0])
                        + pfz[2] * (p_zd2[0]-p_zd4[0])
                        + pfz[3] * (p_zd3[0]-p_zd5[0]) );

   dyddx  = inv_detJ * ( pfx[0] * (p_yd0[0]-p_yd6[0])
                        + pfx[1] * (p_yd1[0]-p_yd7[0])
                        + pfx[2] * (p_yd2[0]-p_yd4[0])
                        + pfx[3] * (p_yd3[0]-p_yd5[0]) );

   dxddy  = inv_detJ * ( pfy[0] * (p_xd0[0]-p_xd6[0])
                        + pfy[1] * (p_xd1[0]-p_xd7[0])
                        + pfy[2] * (p_xd2[0]-p_xd4[0])
                        + pfy[3] * (p_xd3[0]-p_xd5[0]) );

   dzddx  = inv_detJ * ( pfx[0] * (p_zd0[0]-p_zd6[0])
                        + pfx[1] * (p_zd1[0]-p_zd7[0])
                        + pfx[2] * (p_zd2[0]-p_zd4[0])
                        + pfx[3] * (p_zd3[0]-p_zd5[0]) );

   dxddz  = inv_detJ * ( pfz[0] * (p_xd0[0]-p_xd6[0])
                        + pfz[1] * (p_xd1[0]-p_xd7[0])
                        + pfz[2] * (p_xd2[0]-p_xd4[0])
                        + pfz[3] * (p_xd3[0]-p_xd5[0]) );

   dzddy  = inv_detJ * ( pfy[0] * (p_zd0[0]-p_zd6[0])
                        + pfy[1] * (p_zd1[0]-p_zd7[0])
                        + pfy[2] * (p_zd2[0]-p_zd4[0])
                        + pfy[3] * (p_zd3[0]-p_zd5[0]) );

   dyddz  = inv_detJ * ( pfz[0] * (p_yd0[0]-p_yd6[0])
                        + pfz[1] * (p_yd1[0]-p_yd7[0])
                        + pfz[2] * (p_yd2[0]-p_yd4[0])
                        + pfz[3] * (p_yd3[0]-p_yd5[0]) );
   D[5]  = double( .5) * ( dxddy + dyddx );
   D[4]  = double( .5) * ( dxddz + dzddx );
   D[3]  = double( .5) * ( dzddy + dyddz );

   dxx[0] = D[0];
   dyy[0] = D[1];
   dzz[0] = D[2];

}

// CUDA kernel function
__global__ void op_cuda_CalcKinematicsForElem(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  const double *__restrict ind_arg5,
  const int *__restrict opDat0Map,
  double *arg48,
  double *arg49,
  double *arg50,
  double *arg51,
  const double *__restrict arg52,
  double *arg53,
  const double *__restrict arg54,
  double *arg55,
  const double *arg56,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    int map4idx;
    int map5idx;
    int map6idx;
    int map7idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];
    map2idx = opDat0Map[n + set_size * 2];
    map3idx = opDat0Map[n + set_size * 3];
    map4idx = opDat0Map[n + set_size * 4];
    map5idx = opDat0Map[n + set_size * 5];
    map6idx = opDat0Map[n + set_size * 6];
    map7idx = opDat0Map[n + set_size * 7];

    //user-supplied kernel call
    CalcKinematicsForElem_gpu(ind_arg0+map0idx*1,
                          ind_arg0+map1idx*1,
                          ind_arg0+map2idx*1,
                          ind_arg0+map3idx*1,
                          ind_arg0+map4idx*1,
                          ind_arg0+map5idx*1,
                          ind_arg0+map6idx*1,
                          ind_arg0+map7idx*1,
                          ind_arg1+map0idx*1,
                          ind_arg1+map1idx*1,
                          ind_arg1+map2idx*1,
                          ind_arg1+map3idx*1,
                          ind_arg1+map4idx*1,
                          ind_arg1+map5idx*1,
                          ind_arg1+map6idx*1,
                          ind_arg1+map7idx*1,
                          ind_arg2+map0idx*1,
                          ind_arg2+map1idx*1,
                          ind_arg2+map2idx*1,
                          ind_arg2+map3idx*1,
                          ind_arg2+map4idx*1,
                          ind_arg2+map5idx*1,
                          ind_arg2+map6idx*1,
                          ind_arg2+map7idx*1,
                          ind_arg3+map0idx*1,
                          ind_arg3+map1idx*1,
                          ind_arg3+map2idx*1,
                          ind_arg3+map3idx*1,
                          ind_arg3+map4idx*1,
                          ind_arg3+map5idx*1,
                          ind_arg3+map6idx*1,
                          ind_arg3+map7idx*1,
                          ind_arg4+map0idx*1,
                          ind_arg4+map1idx*1,
                          ind_arg4+map2idx*1,
                          ind_arg4+map3idx*1,
                          ind_arg4+map4idx*1,
                          ind_arg4+map5idx*1,
                          ind_arg4+map6idx*1,
                          ind_arg4+map7idx*1,
                          ind_arg5+map0idx*1,
                          ind_arg5+map1idx*1,
                          ind_arg5+map2idx*1,
                          ind_arg5+map3idx*1,
                          ind_arg5+map4idx*1,
                          ind_arg5+map5idx*1,
                          ind_arg5+map6idx*1,
                          ind_arg5+map7idx*1,
                          arg48+n*1,
                          arg49+n*1,
                          arg50+n*1,
                          arg51+n*1,
                          arg52+n*1,
                          arg53+n*1,
                          arg54+n*1,
                          arg55+n*1,
                          arg56);
  }
}


//host stub function
void op_par_loop_CalcKinematicsForElem(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56){

  double*arg56h = (double *)arg56.data;
  int nargs = 57;
  op_arg args[57];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;
  args[33] = arg33;
  args[34] = arg34;
  args[35] = arg35;
  args[36] = arg36;
  args[37] = arg37;
  args[38] = arg38;
  args[39] = arg39;
  args[40] = arg40;
  args[41] = arg41;
  args[42] = arg42;
  args[43] = arg43;
  args[44] = arg44;
  args[45] = arg45;
  args[46] = arg46;
  args[47] = arg47;
  args[48] = arg48;
  args[49] = arg49;
  args[50] = arg50;
  args[51] = arg51;
  args[52] = arg52;
  args[53] = arg53;
  args[54] = arg54;
  args[55] = arg55;
  args[56] = arg56;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(12);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[12].name      = name;
  OP_kernels[12].count    += 1;


  int    ninds   = 6;
  int    inds[57] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: CalcKinematicsForElem\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //transfer constants to GPU
    int consts_bytes = 0;
    consts_bytes += ROUND_UP(1*sizeof(double));
    reallocConstArrays(consts_bytes);
    consts_bytes = 0;
    arg56.data   = OP_consts_h + consts_bytes;
    arg56.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((double *)arg56.data)[d] = arg56h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(double));
    mvConstArraysToDevice(consts_bytes);

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_12
      int nthread = OP_BLOCK_SIZE_12;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_CalcKinematicsForElem<<<nblocks,nthread>>>(
        (double *)arg0.data_d,
        (double *)arg8.data_d,
        (double *)arg16.data_d,
        (double *)arg24.data_d,
        (double *)arg32.data_d,
        (double *)arg40.data_d,
        arg0.map_data_d,
        (double*)arg48.data_d,
        (double*)arg49.data_d,
        (double*)arg50.data_d,
        (double*)arg51.data_d,
        (double*)arg52.data_d,
        (double*)arg53.data_d,
        (double*)arg54.data_d,
        (double*)arg55.data_d,
        (double*)arg56.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[12].time     += wall_t2 - wall_t1;
}
