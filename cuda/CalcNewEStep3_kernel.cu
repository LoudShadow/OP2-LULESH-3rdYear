//
// auto-generated by op2.py
//

//user function
__device__ void CalcNewEStep3_gpu( double *e_new, const double *work) {
    e_new[0] += double(0.5) * work[0];

    if (fabs(e_new[0]) < m_e_cut_cuda) {
        e_new[0] = double(0.)  ;
    }
    if (     e_new[0]  < m_emin_cuda ) {
        e_new[0] = m_emin_cuda ;
    }

}

// CUDA kernel function
__global__ void op_cuda_CalcNewEStep3(
  double *arg0,
  const double *__restrict arg1,
  int   set_size ) {


  //process set elements
  for ( int n=threadIdx.x+blockIdx.x*blockDim.x; n<set_size; n+=blockDim.x*gridDim.x ){

    //user-supplied kernel call
    CalcNewEStep3_gpu(arg0+n*1,
                  arg1+n*1);
  }
}


//host stub function
void op_par_loop_CalcNewEStep3(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  int nargs = 2;
  op_arg args[2];

  args[0] = arg0;
  args[1] = arg1;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(23);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[23].name      = name;
  OP_kernels[23].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  CalcNewEStep3");
  }

  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_23
      int nthread = OP_BLOCK_SIZE_23;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    op_cuda_CalcNewEStep3<<<nblocks,nthread>>>(
      (double *) arg0.data_d,
      (double *) arg1.data_d,
      set->size );
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[23].time     += wall_t2 - wall_t1;
  OP_kernels[23].transfer += (float)set->size * arg0.size * 2.0f;
  OP_kernels[23].transfer += (float)set->size * arg1.size;
}
