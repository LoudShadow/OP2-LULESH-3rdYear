//
// auto-generated by op2.py
//

//user function
__device__ void FBHourglassForceForElems_gpu( 
    const double *p_xd0, const double *p_xd1, const double *p_xd2, const double *p_xd3, const double *p_xd4, const double *p_xd5, const double *p_xd6, const double *p_xd7,
    const double *p_yd0, const double *p_yd1, const double *p_yd2, const double *p_yd3, const double *p_yd4, const double *p_yd5, const double *p_yd6, const double *p_yd7,
    const double *p_zd0, const double *p_zd1, const double *p_zd2, const double *p_zd3, const double *p_zd4, const double *p_zd5, const double *p_zd6, const double *p_zd7,
    double *p_fx0, double *p_fx1, double *p_fx2, double *p_fx3, double *p_fx4, double *p_fx5, double *p_fx6, double *p_fx7,
    double *p_fy0, double *p_fy1, double *p_fy2, double *p_fy3, double *p_fy4, double *p_fy5, double *p_fy6, double *p_fy7,
    double *p_fz0, double *p_fz1, double *p_fz2, double *p_fz3, double *p_fz4, double *p_fz5, double *p_fz6, double *p_fz7,
    const double *p_dvdx,
    const double *p_dvdy,
    const double *p_dvdz,
    const double *p_x8n,
    const double *p_y8n,
    const double *p_z8n,
    const double *p_determ,
    const double *p_ss,
    const double *p_elemMass
) {

    double hgfx[8], hgfy[8], hgfz[8] ;

    double coefficient;

    double hourgam[8][4];

    double volinv=double(1.0)/p_determ[0];
    double volume13 ;

        for(int i1=0;i1<4;++i1){
        double hourmodx =
            p_x8n[0] * m_gamma_t_cuda[(i1*8)+0] + p_x8n[0+1] * m_gamma_t_cuda[(i1*8)+1] +
            p_x8n[0+2] * m_gamma_t_cuda[(i1*8)+2] + p_x8n[0+3] * m_gamma_t_cuda[(i1*8)+3] +
            p_x8n[0+4] * m_gamma_t_cuda[(i1*8)+4] + p_x8n[0+5] * m_gamma_t_cuda[(i1*8)+5] +
            p_x8n[0+6] * m_gamma_t_cuda[(i1*8)+6] + p_x8n[0+7] * m_gamma_t_cuda[(i1*8)+7];

        double hourmody =
            p_y8n[0] * m_gamma_t_cuda[(i1*8)+0] + p_y8n[0+1] * m_gamma_t_cuda[(i1*8)+1] +
            p_y8n[0+2] * m_gamma_t_cuda[(i1*8)+2] + p_y8n[0+3] * m_gamma_t_cuda[(i1*8)+3] +
            p_y8n[0+4] * m_gamma_t_cuda[(i1*8)+4] + p_y8n[0+5] * m_gamma_t_cuda[(i1*8)+5] +
            p_y8n[0+6] * m_gamma_t_cuda[(i1*8)+6] + p_y8n[0+7] * m_gamma_t_cuda[(i1*8)+7];

        double hourmodz =
            p_z8n[0] * m_gamma_t_cuda[(i1*8)+0] + p_z8n[0+1] * m_gamma_t_cuda[(i1*8)+1] +
            p_z8n[0+2] * m_gamma_t_cuda[(i1*8)+2] + p_z8n[0+3] * m_gamma_t_cuda[(i1*8)+3] +
            p_z8n[0+4] * m_gamma_t_cuda[(i1*8)+4] + p_z8n[0+5] * m_gamma_t_cuda[(i1*8)+5] +
            p_z8n[0+6] * m_gamma_t_cuda[(i1*8)+6] + p_z8n[0+7] * m_gamma_t_cuda[(i1*8)+7];

        hourgam[0][i1] = m_gamma_t_cuda[(i1*8)+0] -  volinv*(p_dvdx[0  ] * hourmodx +
                                                p_dvdy[0  ] * hourmody +
                                                p_dvdz[0  ] * hourmodz );

        hourgam[1][i1] = m_gamma_t_cuda[(i1*8)+1] -  volinv*(p_dvdx[0+1] * hourmodx +
                                                p_dvdy[0+1] * hourmody +
                                                p_dvdz[0+1] * hourmodz );

        hourgam[2][i1] = m_gamma_t_cuda[(i1*8)+2] -  volinv*(p_dvdx[0+2] * hourmodx +
                                                p_dvdy[0+2] * hourmody +
                                                p_dvdz[0+2] * hourmodz );

        hourgam[3][i1] = m_gamma_t_cuda[(i1*8)+3] -  volinv*(p_dvdx[0+3] * hourmodx +
                                                p_dvdy[0+3] * hourmody +
                                                p_dvdz[0+3] * hourmodz );

        hourgam[4][i1] = m_gamma_t_cuda[(i1*8)+4] -  volinv*(p_dvdx[0+4] * hourmodx +
                                                p_dvdy[0+4] * hourmody +
                                                p_dvdz[0+4] * hourmodz );

        hourgam[5][i1] = m_gamma_t_cuda[(i1*8)+5] -  volinv*(p_dvdx[0+5] * hourmodx +
                                                p_dvdy[0+5] * hourmody +
                                                p_dvdz[0+5] * hourmodz );

        hourgam[6][i1] = m_gamma_t_cuda[(i1*8)+6] -  volinv*(p_dvdx[0+6] * hourmodx +
                                                p_dvdy[0+6] * hourmody +
                                                p_dvdz[0+6] * hourmodz );

        hourgam[7][i1] = m_gamma_t_cuda[(i1*8)+7] -  volinv*(p_dvdx[0+7] * hourmodx +
                                                p_dvdy[0+7] * hourmody +
                                                p_dvdz[0+7] * hourmodz );
    }



    volume13=cbrt(p_determ[0]);

    coefficient = - m_hgcoef_cuda * double(0.01) * p_ss[0] * p_elemMass[0] / volume13;

    double hxx[4];
    for(int i = 0; i < 4; i++) {
        hxx[i] = hourgam[0][i] * p_xd0[0] + hourgam[1][i] * p_xd1[0] +
                hourgam[2][i] * p_xd2[0] + hourgam[3][i] * p_xd3[0] +
                hourgam[4][i] * p_xd4[0] + hourgam[5][i] * p_xd5[0] +
                hourgam[6][i] * p_xd6[0] + hourgam[7][i] * p_xd7[0];
    }
    for(int i = 0; i < 8; i++) {
        hgfx[i] = coefficient *
                    (hourgam[i][0] * hxx[0] + hourgam[i][1] * hxx[1] +
                    hourgam[i][2] * hxx[2] + hourgam[i][3] * hxx[3]);
    }
    for(int i = 0; i < 4; i++) {
        hxx[i] = hourgam[0][i] * p_yd0[0] + hourgam[1][i] * p_yd1[0] +
                hourgam[2][i] * p_yd2[0] + hourgam[3][i] * p_yd3[0] +
                hourgam[4][i] * p_yd4[0] + hourgam[5][i] * p_yd5[0] +
                hourgam[6][i] * p_yd6[0] + hourgam[7][i] * p_yd7[0];
    }
    for(int i = 0; i < 8; i++) {
        hgfy[i] = coefficient *
                    (hourgam[i][0] * hxx[0] + hourgam[i][1] * hxx[1] +
                    hourgam[i][2] * hxx[2] + hourgam[i][3] * hxx[3]);
    }
    for(int i = 0; i < 4; i++) {
        hxx[i] = hourgam[0][i] * p_zd0[0] + hourgam[1][i] * p_zd1[0] +
                hourgam[2][i] * p_zd2[0] + hourgam[3][i] * p_zd3[0] +
                hourgam[4][i] * p_zd4[0] + hourgam[5][i] * p_zd5[0] +
                hourgam[6][i] * p_zd6[0] + hourgam[7][i] * p_zd7[0];
    }
    for(int i = 0; i < 8; i++) {
        hgfz[i] = coefficient *
                    (hourgam[i][0] * hxx[0] + hourgam[i][1] * hxx[1] +
                    hourgam[i][2] * hxx[2] + hourgam[i][3] * hxx[3]);
    }

    p_fx0[0] += hgfx[0];
    p_fy0[0] += hgfy[0];
    p_fz0[0] += hgfz[0];

    p_fx1[0] += hgfx[1];
    p_fy1[0] += hgfy[1];
    p_fz1[0] += hgfz[1];

    p_fx2[0] += hgfx[2];
    p_fy2[0] += hgfy[2];
    p_fz2[0] += hgfz[2];

    p_fx3[0] += hgfx[3];
    p_fy3[0] += hgfy[3];
    p_fz3[0] += hgfz[3];

    p_fx4[0] += hgfx[4];
    p_fy4[0] += hgfy[4];
    p_fz4[0] += hgfz[4];

    p_fx5[0] += hgfx[5];
    p_fy5[0] += hgfy[5];
    p_fz5[0] += hgfz[5];

    p_fx6[0] += hgfx[6];
    p_fy6[0] += hgfy[6];
    p_fz6[0] += hgfz[6];

    p_fx7[0] += hgfx[7];
    p_fy7[0] += hgfy[7];
    p_fz7[0] += hgfz[7];

}

// CUDA kernel function
__global__ void op_cuda_FBHourglassForceForElems(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  double *__restrict ind_arg3,
  double *__restrict ind_arg4,
  double *__restrict ind_arg5,
  const int *__restrict opDat0Map,
  const double *__restrict arg48,
  const double *__restrict arg49,
  const double *__restrict arg50,
  const double *__restrict arg51,
  const double *__restrict arg52,
  const double *__restrict arg53,
  const double *__restrict arg54,
  const double *__restrict arg55,
  const double *__restrict arg56,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg24_l[1];
    for ( int d=0; d<1; d++ ){
      arg24_l[d] = ZERO_double;
    }
    double arg25_l[1];
    for ( int d=0; d<1; d++ ){
      arg25_l[d] = ZERO_double;
    }
    double arg26_l[1];
    for ( int d=0; d<1; d++ ){
      arg26_l[d] = ZERO_double;
    }
    double arg27_l[1];
    for ( int d=0; d<1; d++ ){
      arg27_l[d] = ZERO_double;
    }
    double arg28_l[1];
    for ( int d=0; d<1; d++ ){
      arg28_l[d] = ZERO_double;
    }
    double arg29_l[1];
    for ( int d=0; d<1; d++ ){
      arg29_l[d] = ZERO_double;
    }
    double arg30_l[1];
    for ( int d=0; d<1; d++ ){
      arg30_l[d] = ZERO_double;
    }
    double arg31_l[1];
    for ( int d=0; d<1; d++ ){
      arg31_l[d] = ZERO_double;
    }
    double arg32_l[1];
    for ( int d=0; d<1; d++ ){
      arg32_l[d] = ZERO_double;
    }
    double arg33_l[1];
    for ( int d=0; d<1; d++ ){
      arg33_l[d] = ZERO_double;
    }
    double arg34_l[1];
    for ( int d=0; d<1; d++ ){
      arg34_l[d] = ZERO_double;
    }
    double arg35_l[1];
    for ( int d=0; d<1; d++ ){
      arg35_l[d] = ZERO_double;
    }
    double arg36_l[1];
    for ( int d=0; d<1; d++ ){
      arg36_l[d] = ZERO_double;
    }
    double arg37_l[1];
    for ( int d=0; d<1; d++ ){
      arg37_l[d] = ZERO_double;
    }
    double arg38_l[1];
    for ( int d=0; d<1; d++ ){
      arg38_l[d] = ZERO_double;
    }
    double arg39_l[1];
    for ( int d=0; d<1; d++ ){
      arg39_l[d] = ZERO_double;
    }
    double arg40_l[1];
    for ( int d=0; d<1; d++ ){
      arg40_l[d] = ZERO_double;
    }
    double arg41_l[1];
    for ( int d=0; d<1; d++ ){
      arg41_l[d] = ZERO_double;
    }
    double arg42_l[1];
    for ( int d=0; d<1; d++ ){
      arg42_l[d] = ZERO_double;
    }
    double arg43_l[1];
    for ( int d=0; d<1; d++ ){
      arg43_l[d] = ZERO_double;
    }
    double arg44_l[1];
    for ( int d=0; d<1; d++ ){
      arg44_l[d] = ZERO_double;
    }
    double arg45_l[1];
    for ( int d=0; d<1; d++ ){
      arg45_l[d] = ZERO_double;
    }
    double arg46_l[1];
    for ( int d=0; d<1; d++ ){
      arg46_l[d] = ZERO_double;
    }
    double arg47_l[1];
    for ( int d=0; d<1; d++ ){
      arg47_l[d] = ZERO_double;
    }
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    int map4idx;
    int map5idx;
    int map6idx;
    int map7idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];
    map2idx = opDat0Map[n + set_size * 2];
    map3idx = opDat0Map[n + set_size * 3];
    map4idx = opDat0Map[n + set_size * 4];
    map5idx = opDat0Map[n + set_size * 5];
    map6idx = opDat0Map[n + set_size * 6];
    map7idx = opDat0Map[n + set_size * 7];

    //user-supplied kernel call
    FBHourglassForceForElems_gpu(ind_arg0+map0idx*1,
                             ind_arg0+map1idx*1,
                             ind_arg0+map2idx*1,
                             ind_arg0+map3idx*1,
                             ind_arg0+map4idx*1,
                             ind_arg0+map5idx*1,
                             ind_arg0+map6idx*1,
                             ind_arg0+map7idx*1,
                             ind_arg1+map0idx*1,
                             ind_arg1+map1idx*1,
                             ind_arg1+map2idx*1,
                             ind_arg1+map3idx*1,
                             ind_arg1+map4idx*1,
                             ind_arg1+map5idx*1,
                             ind_arg1+map6idx*1,
                             ind_arg1+map7idx*1,
                             ind_arg2+map0idx*1,
                             ind_arg2+map1idx*1,
                             ind_arg2+map2idx*1,
                             ind_arg2+map3idx*1,
                             ind_arg2+map4idx*1,
                             ind_arg2+map5idx*1,
                             ind_arg2+map6idx*1,
                             ind_arg2+map7idx*1,
                             arg24_l,
                             arg25_l,
                             arg26_l,
                             arg27_l,
                             arg28_l,
                             arg29_l,
                             arg30_l,
                             arg31_l,
                             arg32_l,
                             arg33_l,
                             arg34_l,
                             arg35_l,
                             arg36_l,
                             arg37_l,
                             arg38_l,
                             arg39_l,
                             arg40_l,
                             arg41_l,
                             arg42_l,
                             arg43_l,
                             arg44_l,
                             arg45_l,
                             arg46_l,
                             arg47_l,
                             arg48+n*8,
                             arg49+n*8,
                             arg50+n*8,
                             arg51+n*8,
                             arg52+n*8,
                             arg53+n*8,
                             arg54+n*1,
                             arg55+n*1,
                             arg56+n*1);
    atomicAdd(&ind_arg3[0+map0idx*1],arg24_l[0]);
    atomicAdd(&ind_arg3[0+map1idx*1],arg25_l[0]);
    atomicAdd(&ind_arg3[0+map2idx*1],arg26_l[0]);
    atomicAdd(&ind_arg3[0+map3idx*1],arg27_l[0]);
    atomicAdd(&ind_arg3[0+map4idx*1],arg28_l[0]);
    atomicAdd(&ind_arg3[0+map5idx*1],arg29_l[0]);
    atomicAdd(&ind_arg3[0+map6idx*1],arg30_l[0]);
    atomicAdd(&ind_arg3[0+map7idx*1],arg31_l[0]);
    atomicAdd(&ind_arg4[0+map0idx*1],arg32_l[0]);
    atomicAdd(&ind_arg4[0+map1idx*1],arg33_l[0]);
    atomicAdd(&ind_arg4[0+map2idx*1],arg34_l[0]);
    atomicAdd(&ind_arg4[0+map3idx*1],arg35_l[0]);
    atomicAdd(&ind_arg4[0+map4idx*1],arg36_l[0]);
    atomicAdd(&ind_arg4[0+map5idx*1],arg37_l[0]);
    atomicAdd(&ind_arg4[0+map6idx*1],arg38_l[0]);
    atomicAdd(&ind_arg4[0+map7idx*1],arg39_l[0]);
    atomicAdd(&ind_arg5[0+map0idx*1],arg40_l[0]);
    atomicAdd(&ind_arg5[0+map1idx*1],arg41_l[0]);
    atomicAdd(&ind_arg5[0+map2idx*1],arg42_l[0]);
    atomicAdd(&ind_arg5[0+map3idx*1],arg43_l[0]);
    atomicAdd(&ind_arg5[0+map4idx*1],arg44_l[0]);
    atomicAdd(&ind_arg5[0+map5idx*1],arg45_l[0]);
    atomicAdd(&ind_arg5[0+map6idx*1],arg46_l[0]);
    atomicAdd(&ind_arg5[0+map7idx*1],arg47_l[0]);
  }
}


//host stub function
void op_par_loop_FBHourglassForceForElems(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51,
  op_arg arg52,
  op_arg arg53,
  op_arg arg54,
  op_arg arg55,
  op_arg arg56){

  int nargs = 57;
  op_arg args[57];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;
  args[33] = arg33;
  args[34] = arg34;
  args[35] = arg35;
  args[36] = arg36;
  args[37] = arg37;
  args[38] = arg38;
  args[39] = arg39;
  args[40] = arg40;
  args[41] = arg41;
  args[42] = arg42;
  args[43] = arg43;
  args[44] = arg44;
  args[45] = arg45;
  args[46] = arg46;
  args[47] = arg47;
  args[48] = arg48;
  args[49] = arg49;
  args[50] = arg50;
  args[51] = arg51;
  args[52] = arg52;
  args[53] = arg53;
  args[54] = arg54;
  args[55] = arg55;
  args[56] = arg56;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(2);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[2].name      = name;
  OP_kernels[2].count    += 1;


  int    ninds   = 6;
  int    inds[57] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: FBHourglassForceForElems\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_2
      int nthread = OP_BLOCK_SIZE_2;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_FBHourglassForceForElems<<<nblocks,nthread>>>(
        (double *)arg0.data_d,
        (double *)arg8.data_d,
        (double *)arg16.data_d,
        (double *)arg24.data_d,
        (double *)arg32.data_d,
        (double *)arg40.data_d,
        arg0.map_data_d,
        (double*)arg48.data_d,
        (double*)arg49.data_d,
        (double*)arg50.data_d,
        (double*)arg51.data_d,
        (double*)arg52.data_d,
        (double*)arg53.data_d,
        (double*)arg54.data_d,
        (double*)arg55.data_d,
        (double*)arg56.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[2].time     += wall_t2 - wall_t1;
}
