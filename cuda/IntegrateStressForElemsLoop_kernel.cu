//
// auto-generated by op2.py
//

//user function
__device__ void IntegrateStressForElemsLoop_gpu( 
                                        const double *p_x0, const double *p_x1, const double *p_x2, const double *p_x3, const double *p_x4, const double *p_x5, const double *p_x6, const double *p_x7,
                                        const double *p_y0, const double *p_y1, const double *p_y2, const double *p_y3, const double *p_y4, const double *p_y5, const double *p_y6, const double *p_y7,
                                        const double *p_z0, const double *p_z1, const double *p_z2, const double *p_z3, const double *p_z4, const double *p_z5, const double *p_z6, const double *p_z7,
                                        double *p_fx0, double *p_fx1, double *p_fx2, double *p_fx3, double *p_fx4, double *p_fx5, double *p_fx6, double *p_fx7,
                                        double *p_fy0, double *p_fy1, double *p_fy2, double *p_fy3, double *p_fy4, double *p_fy5, double *p_fy6, double *p_fy7,
                                        double *p_fz0, double *p_fz1, double *p_fz2, double *p_fz3, double *p_fz4, double *p_fz5, double *p_fz6, double *p_fz7,
                                        double *volume,
                                        const double *sigxx, const double *sigyy, const double *sigzz) {
    double b[3][8] ;

    double fx_local[8] ;
    double fy_local[8] ;
    double fz_local[8] ;

    double fjxxi, fjxet, fjxze;
    double fjyxi, fjyet, fjyze;
    double fjzxi, fjzet, fjzze;
    double cjxxi, cjxet, cjxze;
    double cjyxi, cjyet, cjyze;
    double cjzxi, cjzet, cjzze;

    fjxxi = double(.125) * ( (p_x6[0]-p_x0[0]) + (p_x5[0]-p_x3[0]) - (p_x7[0]-p_x1[0]) - (p_x4[0]-p_x2[0]) );
    fjxet = double(.125) * ( (p_x6[0]-p_x0[0]) - (p_x5[0]-p_x3[0]) + (p_x7[0]-p_x1[0]) - (p_x4[0]-p_x2[0]) );
    fjxze = double(.125) * ( (p_x6[0]-p_x0[0]) + (p_x5[0]-p_x3[0]) + (p_x7[0]-p_x1[0]) + (p_x4[0]-p_x2[0]) );

    fjyxi = double(.125) * ( (p_y6[0]-p_y0[0]) + (p_y5[0]-p_y3[0]) - (p_y7[0]-p_y1[0]) - (p_y4[0]-p_y2[0]) );
    fjyet = double(.125) * ( (p_y6[0]-p_y0[0]) - (p_y5[0]-p_y3[0]) + (p_y7[0]-p_y1[0]) - (p_y4[0]-p_y2[0]) );
    fjyze = double(.125) * ( (p_y6[0]-p_y0[0]) + (p_y5[0]-p_y3[0]) + (p_y7[0]-p_y1[0]) + (p_y4[0]-p_y2[0]) );

    fjzxi = double(.125) * ( (p_z6[0]-p_z0[0]) + (p_z5[0]-p_z3[0]) - (p_z7[0]-p_z1[0]) - (p_z4[0]-p_z2[0]) );
    fjzet = double(.125) * ( (p_z6[0]-p_z0[0]) - (p_z5[0]-p_z3[0]) + (p_z7[0]-p_z1[0]) - (p_z4[0]-p_z2[0]) );
    fjzze = double(.125) * ( (p_z6[0]-p_z0[0]) + (p_z5[0]-p_z3[0]) + (p_z7[0]-p_z1[0]) + (p_z4[0]-p_z2[0]) );

    cjxxi =    (fjyet * fjzze) - (fjzet * fjyze);
    cjxet =  - (fjyxi * fjzze) + (fjzxi * fjyze);
    cjxze =    (fjyxi * fjzet) - (fjzxi * fjyet);

    cjyxi =  - (fjxet * fjzze) + (fjzet * fjxze);
    cjyet =    (fjxxi * fjzze) - (fjzxi * fjxze);
    cjyze =  - (fjxxi * fjzet) + (fjzxi * fjxet);

    cjzxi =    (fjxet * fjyze) - (fjyet * fjxze);
    cjzet =  - (fjxxi * fjyze) + (fjyxi * fjxze);
    cjzze =    (fjxxi * fjyet) - (fjyxi * fjxet);

    b[0][0] =   -  cjxxi  -  cjxet  -  cjxze;
    b[0][1] =      cjxxi  -  cjxet  -  cjxze;
    b[0][2] =      cjxxi  +  cjxet  -  cjxze;
    b[0][3] =   -  cjxxi  +  cjxet  -  cjxze;
    b[0][4] = -b[0][2];
    b[0][5] = -b[0][3];
    b[0][6] = -b[0][0];
    b[0][7] = -b[0][1];

    b[1][0] =   -  cjyxi  -  cjyet  -  cjyze;
    b[1][1] =      cjyxi  -  cjyet  -  cjyze;
    b[1][2] =      cjyxi  +  cjyet  -  cjyze;
    b[1][3] =   -  cjyxi  +  cjyet  -  cjyze;
    b[1][4] = -b[1][2];
    b[1][5] = -b[1][3];
    b[1][6] = -b[1][0];
    b[1][7] = -b[1][1];

    b[2][0] =   -  cjzxi  -  cjzet  -  cjzze;
    b[2][1] =      cjzxi  -  cjzet  -  cjzze;
    b[2][2] =      cjzxi  +  cjzet  -  cjzze;
    b[2][3] =   -  cjzxi  +  cjzet  -  cjzze;
    b[2][4] = -b[2][2];
    b[2][5] = -b[2][3];
    b[2][6] = -b[2][0];
    b[2][7] = -b[2][1];

    volume[0] = double(8.) * ( fjxet * cjxet + fjyet * cjyet + fjzet * cjzet);


    for (int i = 0 ; i < 8 ; ++i) {
      b[0][i] = double(0.0);
      b[1][i] = double(0.0);
      b[2][i] = double(0.0);
    }

    double bisectX0, bisectY0, bisectZ0, bisectX1, bisectY1, bisectZ1;
    double areaX, areaY, areaZ;







    bisectX0 = double(0.5) * (p_x3[0] + p_x2[0] - p_x1[0] - p_x0[0]);
    bisectY0 = double(0.5) * (p_y3[0] + p_y2[0] - p_y1[0] - p_y0[0]);
    bisectZ0 = double(0.5) * (p_z3[0] + p_z2[0] - p_z1[0] - p_z0[0]);
    bisectX1 = double(0.5) * (p_x2[0] + p_x1[0] - p_x3[0] - p_x0[0]);
    bisectY1 = double(0.5) * (p_y2[0] + p_y1[0] - p_y3[0] - p_y0[0]);
    bisectZ1 = double(0.5) * (p_z2[0] + p_z1[0] - p_z3[0] - p_z0[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][0] += areaX;
    b[0][1] += areaX;
    b[0][2] += areaX;
    b[0][3] += areaX;

    b[1][0] += areaY;
    b[1][1] += areaY;
    b[1][2] += areaY;
    b[1][3] += areaY;

    b[2][0] += areaZ;
    b[2][1] += areaZ;
    b[2][2] += areaZ;
    b[2][3] += areaZ;







    bisectX0 = double(0.5) * (p_x1[0] + p_x5[0] - p_x4[0] - p_x0[0]);
    bisectY0 = double(0.5) * (p_y1[0] + p_y5[0] - p_y4[0] - p_y0[0]);
    bisectZ0 = double(0.5) * (p_z1[0] + p_z5[0] - p_z4[0] - p_z0[0]);
    bisectX1 = double(0.5) * (p_x5[0] + p_x4[0] - p_x1[0] - p_x0[0]);
    bisectY1 = double(0.5) * (p_y5[0] + p_y4[0] - p_y1[0] - p_y0[0]);
    bisectZ1 = double(0.5) * (p_z5[0] + p_z4[0] - p_z1[0] - p_z0[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][0] += areaX;
    b[0][4] += areaX;
    b[0][5] += areaX;
    b[0][1] += areaX;

    b[1][0] += areaY;
    b[1][4] += areaY;
    b[1][5] += areaY;
    b[1][1] += areaY;

    b[2][0] += areaZ;
    b[2][4] += areaZ;
    b[2][5] += areaZ;
    b[2][1] += areaZ;







    bisectX0 = double(0.5) * (p_x2[0] + p_x6[0] - p_x5[0] - p_x1[0]);
    bisectY0 = double(0.5) * (p_y2[0] + p_y6[0] - p_y5[0] - p_y1[0]);
    bisectZ0 = double(0.5) * (p_z2[0] + p_z6[0] - p_z5[0] - p_z1[0]);
    bisectX1 = double(0.5) * (p_x6[0] + p_x5[0] - p_x2[0] - p_x1[0]);
    bisectY1 = double(0.5) * (p_y6[0] + p_y5[0] - p_y2[0] - p_y1[0]);
    bisectZ1 = double(0.5) * (p_z6[0] + p_z5[0] - p_z2[0] - p_z1[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][1] += areaX;
    b[0][5] += areaX;
    b[0][6] += areaX;
    b[0][2] += areaX;

    b[1][1] += areaY;
    b[1][5] += areaY;
    b[1][6] += areaY;
    b[1][2] += areaY;

    b[2][1] += areaZ;
    b[2][5] += areaZ;
    b[2][6] += areaZ;
    b[2][2] += areaZ;







    bisectX0 = double(0.5) * (p_x3[0] + p_x7[0] - p_x6[0] - p_x2[0]);
    bisectY0 = double(0.5) * (p_y3[0] + p_y7[0] - p_y6[0] - p_y2[0]);
    bisectZ0 = double(0.5) * (p_z3[0] + p_z7[0] - p_z6[0] - p_z2[0]);
    bisectX1 = double(0.5) * (p_x7[0] + p_x6[0] - p_x3[0] - p_x2[0]);
    bisectY1 = double(0.5) * (p_y7[0] + p_y6[0] - p_y3[0] - p_y2[0]);
    bisectZ1 = double(0.5) * (p_z7[0] + p_z6[0] - p_z3[0] - p_z2[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][2] += areaX;
    b[0][6] += areaX;
    b[0][7] += areaX;
    b[0][3] += areaX;

    b[1][2] += areaY;
    b[1][6] += areaY;
    b[1][7] += areaY;
    b[1][3] += areaY;

    b[2][2] += areaZ;
    b[2][6] += areaZ;
    b[2][7] += areaZ;
    b[2][3] += areaZ;







    bisectX0 = double(0.5) * (p_x0[0] + p_x4[0] - p_x7[0] - p_x3[0]);
    bisectY0 = double(0.5) * (p_y0[0] + p_y4[0] - p_y7[0] - p_y3[0]);
    bisectZ0 = double(0.5) * (p_z0[0] + p_z4[0] - p_z7[0] - p_z3[0]);
    bisectX1 = double(0.5) * (p_x4[0] + p_x7[0] - p_x0[0] - p_x3[0]);
    bisectY1 = double(0.5) * (p_y4[0] + p_y7[0] - p_y0[0] - p_y3[0]);
    bisectZ1 = double(0.5) * (p_z4[0] + p_z7[0] - p_z0[0] - p_z3[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][3] += areaX;
    b[0][7] += areaX;
    b[0][4] += areaX;
    b[0][0] += areaX;

    b[1][3] += areaY;
    b[1][7] += areaY;
    b[1][4] += areaY;
    b[1][0] += areaY;

    b[2][3] += areaZ;
    b[2][7] += areaZ;
    b[2][4] += areaZ;
    b[2][0] += areaZ;







    bisectX0 = double(0.5) * (p_x5[0] + p_x6[0] - p_x7[0] - p_x4[0]);
    bisectY0 = double(0.5) * (p_y5[0] + p_y6[0] - p_y7[0] - p_y4[0]);
    bisectZ0 = double(0.5) * (p_z5[0] + p_z6[0] - p_z7[0] - p_z4[0]);
    bisectX1 = double(0.5) * (p_x6[0] + p_x7[0] - p_x5[0] - p_x4[0]);
    bisectY1 = double(0.5) * (p_y6[0] + p_y7[0] - p_y5[0] - p_y4[0]);
    bisectZ1 = double(0.5) * (p_z6[0] + p_z7[0] - p_z5[0] - p_z4[0]);
    areaX = double(0.25) * (bisectY0 * bisectZ1 - bisectZ0 * bisectY1);
    areaY = double(0.25) * (bisectZ0 * bisectX1 - bisectX0 * bisectZ1);
    areaZ = double(0.25) * (bisectX0 * bisectY1 - bisectY0 * bisectX1);

    b[0][4] += areaX;
    b[0][7] += areaX;
    b[0][6] += areaX;
    b[0][5] += areaX;

    b[1][4] += areaY;
    b[1][7] += areaY;
    b[1][6] += areaY;
    b[1][5] += areaY;

    b[2][4] += areaZ;
    b[2][7] += areaZ;
    b[2][6] += areaZ;
    b[2][5] += areaZ;






    for(int i = 0; i < 8; i++) {
        fx_local[i] = -( sigxx[0] * b[0][i] );
        fy_local[i] = -( sigyy[0] * b[1][i]  );
        fz_local[i] = -( sigzz[0] * b[2][i] );
    }









    p_fx0[0] += fx_local[0];
    p_fx1[0] += fx_local[1];
    p_fx2[0] += fx_local[2];
    p_fx3[0] += fx_local[3];
    p_fx4[0] += fx_local[4];
    p_fx5[0] += fx_local[5];
    p_fx6[0] += fx_local[6];
    p_fx7[0] += fx_local[7];

    p_fy0[0] += fy_local[0];
    p_fy1[0] += fy_local[1];
    p_fy2[0] += fy_local[2];
    p_fy3[0] += fy_local[3];
    p_fy4[0] += fy_local[4];
    p_fy5[0] += fy_local[5];
    p_fy6[0] += fy_local[6];
    p_fy7[0] += fy_local[7];

    p_fz0[0] += fz_local[0];
    p_fz1[0] += fz_local[1];
    p_fz2[0] += fz_local[2];
    p_fz3[0] += fz_local[3];
    p_fz4[0] += fz_local[4];
    p_fz5[0] += fz_local[5];
    p_fz6[0] += fz_local[6];
    p_fz7[0] += fz_local[7];

}

// CUDA kernel function
__global__ void op_cuda_IntegrateStressForElemsLoop(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  double *__restrict ind_arg3,
  double *__restrict ind_arg4,
  double *__restrict ind_arg5,
  const int *__restrict opDat0Map,
  double *arg48,
  const double *__restrict arg49,
  const double *__restrict arg50,
  const double *__restrict arg51,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg24_l[1];
    for ( int d=0; d<1; d++ ){
      arg24_l[d] = ZERO_double;
    }
    double arg25_l[1];
    for ( int d=0; d<1; d++ ){
      arg25_l[d] = ZERO_double;
    }
    double arg26_l[1];
    for ( int d=0; d<1; d++ ){
      arg26_l[d] = ZERO_double;
    }
    double arg27_l[1];
    for ( int d=0; d<1; d++ ){
      arg27_l[d] = ZERO_double;
    }
    double arg28_l[1];
    for ( int d=0; d<1; d++ ){
      arg28_l[d] = ZERO_double;
    }
    double arg29_l[1];
    for ( int d=0; d<1; d++ ){
      arg29_l[d] = ZERO_double;
    }
    double arg30_l[1];
    for ( int d=0; d<1; d++ ){
      arg30_l[d] = ZERO_double;
    }
    double arg31_l[1];
    for ( int d=0; d<1; d++ ){
      arg31_l[d] = ZERO_double;
    }
    double arg32_l[1];
    for ( int d=0; d<1; d++ ){
      arg32_l[d] = ZERO_double;
    }
    double arg33_l[1];
    for ( int d=0; d<1; d++ ){
      arg33_l[d] = ZERO_double;
    }
    double arg34_l[1];
    for ( int d=0; d<1; d++ ){
      arg34_l[d] = ZERO_double;
    }
    double arg35_l[1];
    for ( int d=0; d<1; d++ ){
      arg35_l[d] = ZERO_double;
    }
    double arg36_l[1];
    for ( int d=0; d<1; d++ ){
      arg36_l[d] = ZERO_double;
    }
    double arg37_l[1];
    for ( int d=0; d<1; d++ ){
      arg37_l[d] = ZERO_double;
    }
    double arg38_l[1];
    for ( int d=0; d<1; d++ ){
      arg38_l[d] = ZERO_double;
    }
    double arg39_l[1];
    for ( int d=0; d<1; d++ ){
      arg39_l[d] = ZERO_double;
    }
    double arg40_l[1];
    for ( int d=0; d<1; d++ ){
      arg40_l[d] = ZERO_double;
    }
    double arg41_l[1];
    for ( int d=0; d<1; d++ ){
      arg41_l[d] = ZERO_double;
    }
    double arg42_l[1];
    for ( int d=0; d<1; d++ ){
      arg42_l[d] = ZERO_double;
    }
    double arg43_l[1];
    for ( int d=0; d<1; d++ ){
      arg43_l[d] = ZERO_double;
    }
    double arg44_l[1];
    for ( int d=0; d<1; d++ ){
      arg44_l[d] = ZERO_double;
    }
    double arg45_l[1];
    for ( int d=0; d<1; d++ ){
      arg45_l[d] = ZERO_double;
    }
    double arg46_l[1];
    for ( int d=0; d<1; d++ ){
      arg46_l[d] = ZERO_double;
    }
    double arg47_l[1];
    for ( int d=0; d<1; d++ ){
      arg47_l[d] = ZERO_double;
    }
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    int map4idx;
    int map5idx;
    int map6idx;
    int map7idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];
    map2idx = opDat0Map[n + set_size * 2];
    map3idx = opDat0Map[n + set_size * 3];
    map4idx = opDat0Map[n + set_size * 4];
    map5idx = opDat0Map[n + set_size * 5];
    map6idx = opDat0Map[n + set_size * 6];
    map7idx = opDat0Map[n + set_size * 7];

    //user-supplied kernel call
    IntegrateStressForElemsLoop_gpu(ind_arg0+map0idx*1,
                                ind_arg0+map1idx*1,
                                ind_arg0+map2idx*1,
                                ind_arg0+map3idx*1,
                                ind_arg0+map4idx*1,
                                ind_arg0+map5idx*1,
                                ind_arg0+map6idx*1,
                                ind_arg0+map7idx*1,
                                ind_arg1+map0idx*1,
                                ind_arg1+map1idx*1,
                                ind_arg1+map2idx*1,
                                ind_arg1+map3idx*1,
                                ind_arg1+map4idx*1,
                                ind_arg1+map5idx*1,
                                ind_arg1+map6idx*1,
                                ind_arg1+map7idx*1,
                                ind_arg2+map0idx*1,
                                ind_arg2+map1idx*1,
                                ind_arg2+map2idx*1,
                                ind_arg2+map3idx*1,
                                ind_arg2+map4idx*1,
                                ind_arg2+map5idx*1,
                                ind_arg2+map6idx*1,
                                ind_arg2+map7idx*1,
                                arg24_l,
                                arg25_l,
                                arg26_l,
                                arg27_l,
                                arg28_l,
                                arg29_l,
                                arg30_l,
                                arg31_l,
                                arg32_l,
                                arg33_l,
                                arg34_l,
                                arg35_l,
                                arg36_l,
                                arg37_l,
                                arg38_l,
                                arg39_l,
                                arg40_l,
                                arg41_l,
                                arg42_l,
                                arg43_l,
                                arg44_l,
                                arg45_l,
                                arg46_l,
                                arg47_l,
                                arg48+n*1,
                                arg49+n*1,
                                arg50+n*1,
                                arg51+n*1);
    atomicAdd(&ind_arg3[0+map0idx*1],arg24_l[0]);
    atomicAdd(&ind_arg3[0+map1idx*1],arg25_l[0]);
    atomicAdd(&ind_arg3[0+map2idx*1],arg26_l[0]);
    atomicAdd(&ind_arg3[0+map3idx*1],arg27_l[0]);
    atomicAdd(&ind_arg3[0+map4idx*1],arg28_l[0]);
    atomicAdd(&ind_arg3[0+map5idx*1],arg29_l[0]);
    atomicAdd(&ind_arg3[0+map6idx*1],arg30_l[0]);
    atomicAdd(&ind_arg3[0+map7idx*1],arg31_l[0]);
    atomicAdd(&ind_arg4[0+map0idx*1],arg32_l[0]);
    atomicAdd(&ind_arg4[0+map1idx*1],arg33_l[0]);
    atomicAdd(&ind_arg4[0+map2idx*1],arg34_l[0]);
    atomicAdd(&ind_arg4[0+map3idx*1],arg35_l[0]);
    atomicAdd(&ind_arg4[0+map4idx*1],arg36_l[0]);
    atomicAdd(&ind_arg4[0+map5idx*1],arg37_l[0]);
    atomicAdd(&ind_arg4[0+map6idx*1],arg38_l[0]);
    atomicAdd(&ind_arg4[0+map7idx*1],arg39_l[0]);
    atomicAdd(&ind_arg5[0+map0idx*1],arg40_l[0]);
    atomicAdd(&ind_arg5[0+map1idx*1],arg41_l[0]);
    atomicAdd(&ind_arg5[0+map2idx*1],arg42_l[0]);
    atomicAdd(&ind_arg5[0+map3idx*1],arg43_l[0]);
    atomicAdd(&ind_arg5[0+map4idx*1],arg44_l[0]);
    atomicAdd(&ind_arg5[0+map5idx*1],arg45_l[0]);
    atomicAdd(&ind_arg5[0+map6idx*1],arg46_l[0]);
    atomicAdd(&ind_arg5[0+map7idx*1],arg47_l[0]);
  }
}


//host stub function
void op_par_loop_IntegrateStressForElemsLoop(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38,
  op_arg arg39,
  op_arg arg40,
  op_arg arg41,
  op_arg arg42,
  op_arg arg43,
  op_arg arg44,
  op_arg arg45,
  op_arg arg46,
  op_arg arg47,
  op_arg arg48,
  op_arg arg49,
  op_arg arg50,
  op_arg arg51){

  int nargs = 52;
  op_arg args[52];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;
  args[33] = arg33;
  args[34] = arg34;
  args[35] = arg35;
  args[36] = arg36;
  args[37] = arg37;
  args[38] = arg38;
  args[39] = arg39;
  args[40] = arg40;
  args[41] = arg41;
  args[42] = arg42;
  args[43] = arg43;
  args[44] = arg44;
  args[45] = arg45;
  args[46] = arg46;
  args[47] = arg47;
  args[48] = arg48;
  args[49] = arg49;
  args[50] = arg50;
  args[51] = arg51;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(1);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[1].name      = name;
  OP_kernels[1].count    += 1;


  int    ninds   = 6;
  int    inds[52] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,-1,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: IntegrateStressForElemsLoop\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_1
      int nthread = OP_BLOCK_SIZE_1;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_IntegrateStressForElemsLoop<<<nblocks,nthread>>>(
        (double *)arg0.data_d,
        (double *)arg8.data_d,
        (double *)arg16.data_d,
        (double *)arg24.data_d,
        (double *)arg32.data_d,
        (double *)arg40.data_d,
        arg0.map_data_d,
        (double*)arg48.data_d,
        (double*)arg49.data_d,
        (double*)arg50.data_d,
        (double*)arg51.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[1].time     += wall_t2 - wall_t1;
}
